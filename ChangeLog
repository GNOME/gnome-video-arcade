2006-06-25  Matthew F. Barnes  <mbarnes@redhat.com>

	* Released PCL 0.0.25

	* Rejecting Boeing's PclString and PclTuple changes for now.

2006-06-18  Matthew F. Barnes  <mbarnes@redhat.com>

	* Fix semantics for cuts that appear after a disjunction.

	* pcl-compiler.c: (compiler_cut)
	Pass depth value from cut node to PCL_OPCODE_STORE_CUT arg.

	* pcl-eval.c: (pcl_eval_frame)
	PCL_OPCODE_STORE_CUT: Set the cut flag on the appropriate frame.

	* pcl-opcode.h:
	PCL_OPCODE_STORE_CUT now takes an argument.

	* pcl-parser.y: (normalize_conjunction)
	Tag cut nodes at depth 2 for post-processing.

	* pcl-parser.y: (normalize_cut)
	New function normalizes tagged cut nodes.

2006-05-31  Matthew F. Barnes  <mbarnes@redhat.com>

	* pcl-eval.c: (pcl_eval_code_ex)
	Fix logic for populating cell variable slots.

	* pcl-string.c: (string_method_join)
	Refactor logic and handle iterator arguments properly.

2006-04-20  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.24

        * New feature summary:
        Better detection of GNU Readline during configuration.

        * configure.ac:
        Test for libcurses before testing for libreadline.
        GNU Readline depends on curses, so the test should now succeed.

        * docs/reference/pcl-sections.txt: (PclObject)
        Add PCL_IS_CALLABLE, PCL_IS_ITERABLE, and PCL_IS_MEASURABLE.

        * docs/reference/pcl-sections.txt: (pcl)
        Remove pcl_object_unref_notify.

        * docs/reference/pcl-sections.txt: (pcl-error)
        Add pcl_error_check_signals, pcl_error_set_interrupt.
        Add pcl_os_interrupt_occurred.

        * docs/reference/pcl-sections.txt: (pcl-eval)
        Add pcl_add_pending_call and pcl_make_pending_calls.

        * docs/reference/pcl-sections.txt: (pcl-run)
        Add PCL_ERROR_EOF.

        * src/pcl-config.h:
        #include <sys/types.h>
        Update comments.

        * src/pcl-mod-signal.c:
        Only the main thread may handle signals.

2006-04-19  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        New PCL standard library module: signal
        Raise a KeyboardInterrupt on Ctrl-C in interactive mode.
        SystemExit exception now causes a normal termination of PCL.

        * src/Makefile.am:
        New source file: pcl-mod-signal.c

        * src/pcl.c: (pcl_initialize)
        Call _pcl_signal_init() to initialize the signal module.

        * src/pcl-config.h:
        #include <signal.h>

        * src/pcl-error.h:
        Add some signal-related prototypes (implemented in pcl-mod-signal.c).
        Cosmetic changes.

        * src/pcl-error.c: (pcl_error_print)
        Handle SystemExit exceptions properly.
        Cosmetic changes.

        * src/pcl-eval.[ch]: (pcl_add_pending_call)
        New function adds a function to call from the main evaluation loop.

        * src/pcl-eval.[ch]: (pcl_make_pending_calls)
        New function dispatches functions added with pcl_add_pending_call().

        * src/pcl-eval.c: (pcl_eval_frame)
        Periodically check for and dispatch pending calls.

        * src/pcl-file.c: (file_get_line)
        * src/pcl-object.c: (object_internal_print, pcl_object_repr)
        * src/pcl-traceback.c: (pcl_traceback_print)
        Call pcl_error_check_signals().

        * src/pcl-import.c:
        Add a signal module entry to the import_init_table.

        * src/pcl-item-getter.c: (item_getter_class_init)
        Forgot to register item_getter_call().

        * src/pcl-lexer.l: (lexer_input)
        Handle SIGINTs properly (both readline and non-readline versions).

        * src/pcl-mod-signal.c:
        New source file implements the standard library module "signal".

        * src/pcl-mod-sys.c: (sys_exit)
        Clarify the logic a bit.

        * src/pcl-object.c:
        Define a null_error() convenience macro and use where appropriate.

        * src/pcl-parse-info.h:
        Add an `error_code' field to PclParseInfo (for parsing errors).

        * src/pcl-run.h:
        Define PCL_ERROR_EOF for parsing errors.

        * src/pcl-run.c: (pcl_run_interactive_loop_flags)
        Exit interactive loop when PCL_ERROR_EOF is detected.

        * src/pcl-run.c: (pcl_run_interactive_one_flags)
        Return PclParseInfo's error code if non-zero.

        * src/pcl-sequence.c: (pcl_sequence_count, pcl_sequence_index)
        Add the current function name to null argument error messages.

        * src/pcl-table.c:
        * src/pcl-tablerecord.c:
        Cosmetic changes / better error handling.

2006-04-13  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * HACKING:
        Instructions and tips for hacking on PCL.

        * Makefile.am:
        Add HACKING to EXTRA_DIST list.

        * src/Makefile.am:
        New source file: pcl-optimizer.c

        * src/pcl.h:
        Change definition of pcl_object_new to be an alias of g_object_new.
        Apply a similar change to pcl_object_ref and pcl_object_unref.
        Remove pcl_object_unref_notify.

        * src/pcl.c:
        Rip out an obsolete debugging feature for tracking reference counts.
        There are enough hooks in the software that make it redundant.

        * src/pcl-compiler.c: (compiler_done)
        Trims excess bytes off the byte code string and line number table.

        * src/pcl-compiler.c: (pcl_compile)
        Call compiler_done() if compilation was successful.
        Call pcl_optimize() before creating a PclCode object.

        * src/pcl-list.c: (list_method_sort)
        * src/pcl-state.c: (pcl_thread_state_new)
        * src/pcl-string.c: (pcl_string_intern_in_place)
        Change pcl_object_unref_notify to pcl_object_unref.

        * src/pcl-optimizer.c:
        New "peephole" optimizer for PCL byte code.
        It is buggy, and thus disabled until someone can fix it.

2006-04-06  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.23

        * src/docs/reference/pcl-docs.sgml:
        Remove "xml/pcl-callable.xml" from Interfaces section.
        Remove "xml/pcl-comparable.xml" from Interfaces section.
        Remove "xml/pcl-hashable.xml" from Interfaces section.
        Remove "xml/pcl-iterable.xml" from Interfaces section.
        Remove "xml/pcl-measurable.xml" from Interfaces section.
        Remove "xml/pcl-rich-comparable.xml" from Interfaces section.
        Remove "xml/pcl-subscriptable.xml" from Interfaces section.

        * src/docs/reference/pcl-sections.txt:
        Remove sections: PclCallable
                         PclComparable
                         PclHashable
                         PclIterable
                         PclMeasurable
                         PclRichComparable
                         PclSubscriptable
        Merge remaining symbols from deleted sections into PclObject section.

        * src/docs/reference/pcl.types:
        Remove pcl_callable_get_type.
        Remove pcl_comparable_get_type.
        Remove pcl_hashable_get_type.
        Remove pcl_iterable_get_type.
        Remove pcl_measurable_get_type.
        Remove pcl_rich_comparable_get_type.
        Remove pcl_subscriptable_get_type.

        * src/Makefile.am:
        Remove source files: pcl-callable.[ch]
                             pcl-comparable.[ch]
                             pcl-hashable.[ch]
                             pcl-iterable.[ch]
                             pcl-measurable.[ch]
                             pcl-subscriptable.[ch]

        * src/pcl.h:
        Remove #include "pcl-callable.h"
        Remove #include "pcl-comparable.h"
        Remove #include "pcl-hashable.h"
        Remove #include "pcl-iterable.h"
        Remove #include "pcl-measurable.h"
        Remove #include "pcl-subscriptable.h"

        * src/pcl-attr-getter.c:
        * src/pcl-code.c:
        * src/pcl-complex.c:
        * src/pcl-dict.c:
        * src/pcl-dict-proxy.c:
        * src/pcl-ellipsis.c:
        * src/pcl-float.c:
        * src/pcl-free.c:
        * src/pcl-function.c:
        * src/pcl-instance-method.c:
        * src/pcl-int.c:
        * src/pcl-item-getter.c:
        * src/pcl-iterator.c:
        * src/pcl-list.c:
        * src/pcl-method.c:
        * src/pcl-method-descriptor.c:
        * src/pcl-none.c:
        * src/pcl-not-implemented.c:
        * src/pcl-range.c:
        * src/pcl-reversed.c:
        * src/pcl-sequence-iterator.c:
        * src/pcl-set.c:
        * src/pcl-slice.c:
        * src/pcl-string.c:
        * src/pcl-table.c:
        * src/pcl-tablerecord.c:
        * src/pcl-tuple.c:
        * src/pcl-type.c:
        * src/pcl-weak-ref.c:
        Move interface hooks directly into the base object.
        Exclude the majors ones: numbers, mappings, and sequences.

        * src/pcl-callable-iterator.c: (callable_iterator_next)
        * src/pcl-dict.c: (dict_characterize, dict_lookup,
                           dict_rich_compare_bool)
        * src/pcl-eval.c: (pcl_eval_code_ex)
        * src/pcl-iterator.c: (iterator_contains)
        * src/pcl-list.c: (list_rich_compare, list_contains,
                           list_method_count, list_method_index,
                           list_method_remove)
        * src/pcl-sequence.c: (pcl_sequence_count, pcl_sequence_index)
        * src/pcl-tuple.c: (tuple_rich_compare, tuple_contains)
        Change pcl_object_compare_xx() to pcl_object_rich_compare_bool().

        * src/pcl-eval.c: (eval_build_class)
        * src/pcl-import.c: (import_get_path_importer, pcl_import)
        * src/pcl-mod-gc.c: (gc_handle_weakrefs)
        * src/pcl-property.c: (property_get, property_set)
        * src/pcl-super.c: (super_get)
        * src/pcl-weak-ref.c: (weak_ref_notify)
        Change pcl_callable_call_function() to pcl_object_call_function().

        * src/pcl-import.c: (import_find_module, import_load_module)
        * src/pcl-reversed.c: (reversed_new_instance)
        * src/pcl-set.c: (base_set_method_pop)
        Change pcl_callable_call_method() to pcl_object_call_method().

        * src/pcl-file.c: (pcl_file_get_line, pcl_file_write_object,
                           pcl_file_as_file_descriptor)
        * src/pcl-mapping.c: (mapping_method_fromkeys)
        Change pcl_callable_call_object() to pcl_object_call_object().

        * src/pcl-mapping.c: (pcl_mapping_get_type)
        * src/pcl-sequence.c: (pcl_sequence_get_type)
        Remove interface prerequisites; they no longer exist.

        * src/pcl-mod-gc.c: (pcl_gc_list_remove)
        Set link->ref_state to GC_REF_STATE_REACHABLE.
        This is critical for GC and factories to play together nice.

        * src/pcl-object.[ch]:
        Merge simple interfaces directly into PclObject class.
        Reduces time it takes to determine if object implements a feature.
        Add new methods: call(), hash(), compare(), rich_compare(), iterate(),
                         measure(), get_item(), set_item()
        Merge auxillary declarations from various interface headers.

2006-04-03  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Add debugging features to the garbage collection (gc) module.
        Fix some garbage collection bugs so that it actually works now.
        Add id() and intern() functions to the sys module.

        * docs/reference/pcl-docs.sgml:
        Add link to PclLong in "Basic Types" section.

        * docs/reference/pcl-sections.txt:
        Add a section for PclLong.

        * docs/reference/pcl.types:
        Add pcl_long_get_type.

        * src/Makefile.am:
        Add source files: pcl-long.[ch]
        Add graph.pcl to EXTRA_DIST.

        * src/pcl.h:
        #include "pcl-long.h"

        * src/pcl.c: (pcl_finalize)
        Rearrange steps for better memory clean-up.

        * src/pcl-arg.c: (arg_parse, arg_parse_kw, pcl_arg_unpack_tuple)
        Use fast-access tuple macros whenever possible.
        Rename `len' variables to `size'.

        * src/pcl-dict.c: (_pcl_dict_fini)
        Free the dummy key, if it was created.

        * src/pcl-eval.c: (eval_raise, pcl_eval_code_ex)
        Use fast-access tuple macros whenever possible.

        * src/pcl-factory.c: (factory_toggle_notify)
        If the object is a container, disable GC tracking of it when adding
                it to the factory's free list.  Re-enable GC tracking once
                the object gets recycled.

        * src/pcl-factory.c: (pcl_factory_order)
        Set the PCL_OBJECT_FLAG_RECYCLABLE flag on the new object.

        * src/pcl-frame.c: (names_to_dict, dict_to_names,
                            frame_fast_to_locals, frame_locals_to_fast)
        Use fast-access tuple macros whenever possible.

        * src/pcl-import.c:
        Remove `get_parent_namestr', `get_parent_pathstr', and `import_str'.
        Just use pcl_dict_get_item_string() and hardcode the key.

        * src/pcl-import.c: (pcl_import_cleanup)
        Add logic to properly clean-up sys.modules.

        * src/pcl-mod-gc.h:
        Add a PclGCDebugFlags enumeration.

        * src/pcl-mod-gc.c:
        Add debugging capabilities (same as Python's gc module).
        Fix a bug so that factory-generated objects can be collected.
        Handle weak references properly (...I think).

        * src/pcl-mod-sys.c: (sys_id)
        New function implements sys module method id().

        * src/pcl-mod-sys.c: (sys_intern)
        New function implements sys module method intern().

        * src/pcl-mod-sys.[ch]: (pcl_sys_write_stdout)
        New function provides a printf-like interface to sys.stdout.

        * src/pcl-mod-sys.[ch]: (pcl_sys_write_stderr)
        New function provides a printf-like interface to sys.stderr.

        * src/pcl-module.[ch]: (_pcl_module_clear)
        New function provides controlled deletion of a module's contents.

        * src/pcl-object.h:
        Add PCL_OBJECT_FLAG_RECYCLABLE to PclObjectFlags.

        * src/pcl-parser.y:
        Eliminate compiler warnings about g_list_delete_link().

        * src/pcl-table.c: (table_new_instance)
        Better error handling.

        * src/pcl-tuple.c: (tuple_subscriptable_get_item)
        Use fast-access tuple macros whenever possible.

        * src/pcl-type.c: (type_dispose)
        Forgot to clear self->base and self->subclasses.

        * src/pcl-type.c: (type_get_attr, type_set_attr)
        Special methods override PclObject's get_attr() and set_attr().

        * src/pcl-type.c: (type_traverse)
        Forgot to traverse self->base and self->subclasses.

2006-03-22  David R. Crepps  <david.crepps@boeing.com>

        * src/pcl-free.h:
        Bug fix: Added G_END_DECLS to end of file.
        
        * src/pcl-list.c:
        Using more complete implementation of sort method with quicksort.
        
        * test/list_method_test.pcl:
        Updated test for sort method.

2006-03-16  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.22

        * src/pcl-sections.txt:
        Add new function signature symbols.
        Change pcl_mapping_popitem to pcl_mapping_pop_item.

        * src/Makefile.am:
        Add source files: pcl-callable-iterator.[ch]
                          pcl-sequence-iterator.[ch]

        * src/pcl.h:
        #include "pcl-callable-iterator.h"
        #include "pcl-sequence-iterator.h"

        * src/pcl-attr-getter.c:
        * src/pcl-code.c:
        * src/pcl-complex.c:
        * src/pcl-dict.c:
        * src/pcl-dict-proxy.c:
        * src/pcl-ellipsis.c:
        * src/pcl-float.c:
        * src/pcl-free.c:
        * src/pcl-function.c:
        * src/pcl-instance-method.c:
        * src/pcl-int.c:
        * src/pcl-item-getter.c:
        * src/pcl-iterator.c:
        * src/pcl-method.c:
        * src/pcl-method-descriptor.c:
        * src/pcl-none.c:
        * src/pcl-not-implemented.c:
        * src/pcl-range.c:
        * src/pcl-reversed.c:
        * src/pcl-set.c:
        * src/pcl-slice.c:
        * src/pcl-string.c:
        * src/pcl-table.c:
        * src/pcl-tablerecord.c:
        * src/pcl-tuple.c:
        * src/pcl-type.c:
        * src/pcl-weak-ref.c:
        Coding style change:
        In functions that implement GInterfaces, make the type of the first
        argument (the 'self' argument) correspond with the type being
        implemented.  Then cast the function to the appropriate signature in
        the GInterfaceInitFunc.

        * src/pcl-callable.h:
        * src/pcl-comparable.h:
        * src/pcl-hashable.h:
        * src/pcl-iterable.h:
        * src/pcl-mapping.h:
        * src/pcl-measurable.h:
        * src/pcl-subscriptable.h:
        Define a function signature type for each interface function.

        * src/pcl-callable.[ch]:
        Break PclCallableIterator into its own file.

        * src/pcl-callable-iterator.[ch]:
        New source files implement callable iterators.

        * src/pcl-code.h:
        Update documentation.

        * src/pcl-dict.c:
        Rename dict_mapping_popitem() to dict_mapping_pop_item().

        * src/pcl-dict.c: (dict_comparable_compare)
        Make sure both arguments are PclDict's before proceeding.

        * src/pcl-dict.c: (dict_class_init)
        * src/pcl-list.c: (list_class_init)
        * src/pcl-set.c: (set_class_init, frozen_set_class_init)
        Remove assignment to `is_mutable' flag.

        * src/pcl-callable.c:
        * src/pcl-comparable.c:
        * src/pcl-hashable.c:
        * src/pcl-iterable.c:
        * src/pcl-iterator.c:
        * src/pcl-mapping.c:
        * src/pcl-measurable.c:
        * src/pcl-number.c:
        * src/pcl-object.c:
        * src/pcl-sequence.c:
        * src/pcl-subscriptable.c:
        Populate the offset field for each item in the PclMethodDef array.

        * src/pcl-mapping.[ch]:
        Rename PclMapping's popitem() method to pop_item().

        * src/pcl-measurable.c: (pcl_object_measure)
        Better error handling.

        * src/pcl-member.h:
        Update documentation.

        * src/pcl-method.h:
        Remove PCL_METHOD_FLAG_MUTABLE from PclMethodFlags.
        Add `offset' field to PclMethodDef struct.
        Update documentation.

        * src/pcl-method.c: (method_comparable_compare)
        Make sure both arguments are PclMethod's before proceeding.

        * src/pcl-mod-builtin.c: (builtin_len)
        Remove type check; let pcl_object_measure() handle it.
        Look for length < 0 to indicate error.

        * src/pcl-object.h:
        Remove `is_mutable' flag from PclObjectClass.
        Update documentation.

        * src/pcl-sequence.[ch]:
        Break PclSequenceIterator into its own file.

        * src/pcl-scope.h:
        Update documentation.

        * src/pcl-sequence-iterator.[ch]:
        New source files implement sequence iterators.

        * src/pcl-set.c:
        Split `base_set_methods' into `set_methods' and `frozen_set_methods'.
        Necessary since the PCL_METHOD_FLAG_MUTABLE flag is obsolete.

        * src/pcl-slice.c: (slice_comparable_compare)
        Make sure both arguments are PclSlice's before proceeding.

        * src/pcl-string.c: (string_hashable_hash)
        Use Python's string hashing algorithm.

        * src/pcl-type.c: (type_add_methods)
        Accept a `base' argument; points to base address of a struct.
        Only add a wrapper if the corresponding function pointer is NULL.

        * src/pcl-type.c: (type_add_descriptors)
        Calculate the base address of either the GTypeClass or GTypeInterface
                struct corresponding to the given GType.  Pass the base
                address to type_add_methods().

2006-03-14  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * docs/reference/pcl-docs.sgml:
        Add "xml/pcl-descriptor.xml" to Descriptors section.
        Add "xml/pcl-getset-descriptor.xml" to Descriptors section.
        Add "xml/pcl-member-descriptor.xml" to Descriptors section.
        Add "xml/pcl-method-descriptor.xml" to Descriptors section.

        * docs/reference/pcl-sections.txt:
        Expand `descr' to `descriptor' (all cases).

        * docs/reference/pcl.types:
        Change pcl_descr_get_type to pcl_descriptor_get_type.
        Change pcl_getset_descr_get_type to pcl_getset_descriptor_get_type.
        Change pcl_member_descr_get_type to pcl_member_descriptor_get_type.
        Change pcl_method_descr_get_type to pcl_method_descriptor_get_type.

        * src/Makefile.am:
        Rename pcl-descr.[ch] to pcl-descriptor.[ch].
        Add source files: pcl-getset-descriptor.[ch]
                          pcl-member-descriptor.[ch]
                          pcl-method-descriptor.[ch]

        * src/pcl.h:
        #include "pcl-descriptor.h"
        #include "pcl-getset-descriptor.h"
        #include "pcl-member-descriptor.h"
        #include "pcl-method-descriptor.h"
        Remove #include "pcl-descr.h"

        * src/pcl-class-method.[ch]:
        * src/pcl-instance-method.[ch]:
        * src/pcl-object.c:
        * src/pcl-property.[ch]:
        * src/pcl-static-method.[ch]:
        * src/pcl-super.[ch]:
        * src/pcl-type.c:
        Expand `descr' to `descriptor' (all cases).

        * src/pcl-descriptor.[ch]:
        Make this file just about abstract descriptors.
        Separate the other types of descriptors into their own files.

        * src/pcl-getset-descriptor.[ch]:
        New source files implement get/set descriptors.

        * src/pcl-member-descriptor.[ch]:
        New source files implement member descriptors.

        * src/pcl-method-descriptor.[ch]:
        New source files implement method descriptors.

        * src/pcl-type.c: (type_descriptor_new)
        New function creates a new instance of a descriptor subclass.

        * src/pcl-type.c: (type_add_getsets)
        Roll our own PclGetSetDescriptor objects.

        * src/pcl-type.c: (type_add_members)
        Roll our own PclMemberDescriptor objects.

        * src/pcl-type.c: (type_add_methods)
        Roll our own PclMethodDescriptor objects.

2006-03-13  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        New built-in types: classmethod, staticmethod

        * configure.ac:
        Set optimization level to -O3 for non-debug builds.
        Add -Wstrict-prototypes option to CFLAGS if using GCC.
        Add docs/reference/version.xml to AC_CONFIG_FILES.

        * docs/reference/Makefile.am:
        Add version.xml to content_files.
        Add version.xml.in to EXTRA_DIST.

        * docs/reference/pcl-docs.sgml:
        Add PCL version after <title> tag.
        Add "xml/pcl-class-method.xml" to Descriptors section.
        Add "xml/pcl-instance-method.xml" to Descriptors section.
        Add "xml/pcl-static-method.xml" to Descriptors section.

        * docs/reference/pcl-sections.txt:
        Add sections: PclClassMethod
                      PclInstanceMethod
                      PclStaticMethod
        Fix <TITLE> tag in PclSuper section.

        * docs/reference/pcl.types:
        Add: pcl_class_method_get_type
             pcl_instance_method_get_type
             pcl_static_method_get_type
             pcl_super_get_type

        * src/Makefile.am:
        Add source files: pcl-class-method.[ch]
                          pcl-instance-method.[ch]
                          pcl-static-method.[ch]

        * src/pcl.h:
        #include "pcl-class-method.h"
        #include "pcl-instance-method.h"
        #include "pcl-static-method.h"

        * src/pcl.c: (pcl_initialize)
        Call _pcl_instance_method_init().

        * src/pcl.c: (pcl_finalize)
        Call _pcl_instance_method_fini().

        * src/pcl-class-method.[ch]:
        New source files implement class methods.

        * src/pcl-error.c: (pcl_error_display)
        Fix some bugs in displaying syntax errors.

        * src/pcl-frame.h:
        Don't use curly braces in comments; it confuses gtk-doc.

        * src/pcl-instance-method.[ch]:
        New source files implement instance methods.

        * src/pcl-lexer.l: (yyerror)
        Use "invalid syntax" as the default message for syntax errors.

        * src/pcl-mod-builtin.c: (_pcl_builtin_init)
        Add classmethod type object to __builtin__ module.
        Add staticmethod type object to __builtin__ module.

        * src/pcl-number.c: (number_binary_op, number_ternary_op)
        Add subtype check where marked.

        * src/pcl-object.h:
        Add `init_instance' method to PclObject class.

        * src/pcl-object.c: (object_repr)
        New default implementation of repr() attempts to show module name.

        * src/pcl-object.c: (object_str)
        New function provides a default implementation of the str() method.

        * src/pcl-static-method.[ch]:
        New source files implement static methods.

        * src/pcl-super.h:
        Change `type' and `object_type' field types to PclObject pointers.

        * src/pcl-super.c:
        Finish implementation of super-class objects.

        * src/pcl-type.h:
        Add `base' field to PclType.

        * src/pcl-type.c:
        More hackery to support user-defined classes.
        Still don't really understand how it works.

2006-03-09  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * docs/reference/Makefile.am:
        Ignore pcl-compiler.h.

        * docs/reference/pcl-docs.sgml:
        Add link to pcl-super page.
        Remove link to pcl-compiler page.

        * docs/reference/pcl-sections.txt:
        Add a PclSuper section.
        Remove pcl-compiler section.
        Add missing interface section titles.

        * docs/reference/pcl-sections.txt: (PclCode)
        Add PclCodeFlags.
        Remove all PCL_CODE_FLAG_xxx.

        * docs/reference/pcl-sections.txt: (PclMethod)
        Add PclMethodFlags.
        Remove all PCL_METHOD_FLAG_xxx.

        * docs/reference/pcl-sections.txt: (PclObject)
        Add PclObjectFlags and PCL_OBJECT_GET_FLAGS.

        * docs/reference/pcl-sections.txt: (pcl)
        Add PCL_MAX_BLOCKS, PCL_OPTION_DEBUG, and PCL_OPTION_PARSE_ONLY.

        * docs/reference/pcl-sections.txt: (pcl-member)
        Add PclMemberFlags.
        Remove PCL_MEMBER_FLAG_READONLY.

        * src/Makefile.am:
        Add source files: pcl-super.[ch]

        * src/pcl.h:
        #include "pcl-super.h"

        * src/pcl.c: (pcl_register_singleton)
        Set the PCL_OBJECT_FLAG_SINGLETON flag on the object.

        * src/pcl-bool.c: (bool_print)
        * src/pcl-complex.c: (complex_print)
        * src/pcl-dict.c: (dict_print)
        * src/pcl-float.c: (float_print)
        * src/pcl-int.c: (int_print)
        * src/pcl-list.c: (list_print)
        * src/pcl-object.[ch]: (pcl_object_print)
        * src/pcl-object.c: (object_internal_print)
        * src/pcl-set.c: (base_set_print)
        * src/pcl-string.c: (string_print)
        * src/pcl-table.c: (table_print)
        * src/pcl-tablerecord.c: (tablerecord_print)
        * src/pcl-tuple.c: (tuple_print)
        Change `flags' parameter type to PclPrintFlags.

        * src/pcl-code.h:
        Group code flags into a PclCodeFlags enum.  Document it.
        Change `flags' field type of PclCode to PclCodeFlags.

        * src/pcl-code.[ch]: (pcl_code_new)
        Change `flags' parameter type to PclCodeFlags.

        * src/pcl-compiler.[ch]:
        Rename pcl_compile_ast() to pcl_compile().
        Change all PCL_NT_xxx symbols to PCL_NODE_TYPE_xxx.
        Change all PCL_FLAG_xxx symbols to PCL_NODE_FLAG_xxx.

        * src/pcl-compiler.[ch]: (pcl_compile)
        Rename `ast' parameter to `parse_tree'.

        * src/pcl-import.c: (import_parse_source_module)
        * src/pcl-run.c: (run_parse_tree)
        Change pcl_compile_ast() to pcl_compile().

        * src/pcl-lexer.l:
        Change all PCL_NT_xxx symbols to PCL_NODE_TYPE_xxx.
        Change PCL_FLAG_INTERNED to PCL_NODE_FLAG_INTERNED.

        * src/pcl-member.h:
        Group member flags into a PclMemberFlags enum.  Document it.
        Change `flags' field type of PclMemberDef to PclMemberFlags.

        * src/pcl-method.h:
        Group method flags into a PclMethodFlags enum.  Document it.
        Change `flags' field type of PclMethodDef to PclMethodFlags.

        * src/pcl-mod-builtin.c: (_pcl_builtin_init)
        Add super type object to __builtin__ module.

        * src/pcl-node.h:
        Rename PclNodeType enum values to PCL_NODE_TYPE_xxx.
        Group node flags into a PclNodeFlags enum.
        Change `flags' field type of PclNode to PclNodeFlags.

        * src/pcl-node.c:
        Change PCL_NT_INVALID symbol to PCL_NODE_TYPE_INVALID.
        Change all PCL_FLAG_xxx symbols to PCL_NODE_FLAG_xxx.

        * src/pcl-object.h:
        Define a PclObjectFlags enum type.
        Define a PCL_OBJECT_FLAG_SINGLETON enum value.
        Group print flags into a PclPrintFlags enum.
        Add a `flags' field to PclObject.
        Define a PCL_OBJECT_GET_FLAGS() macro.

        * src/pcl-object.c: (pcl_object_dir)
        Remove unused variable `next'.

        * src/pcl-parser.y:
        * src/pcl-symbol-table.c:
        Change all PCL_NT_xxx symbols to PCL_NODE_TYPE_xxx.
        Change all PCL_FLAG_xxx symbols to PCL_NODE_FLAG_xxx.
 
        * src/pcl-property.c: (property_get, property_set)
        Forgot to declare these functions static.

        * src/pcl-scope.h:
        Document PclScopeType.
        Group scope flags into a PclScopeFlags enum.  Document it.
        Group symbol flags into a PclSymbolFlags enum.  Document it.
        Change `flags' field type of PclScope to PclScopeFlags.

        * src/pcl-scope.[ch]: (pcl_scope_get_flags)
        Change return type to PclSymbolFlags.

        * src/pcl-scope.[ch]: (pcl_scope_set_flags, pcl_symbol_is_free)
        Change `flags' parameter type to PclSymbolFlags.

        * src/pcl-scope.c: (pcl_scope_new)
        Change all PCL_NT_xxx symbols to PCL_NODE_TYPE_xxx.

        * src/pcl-super.[ch]:
        New source files implement superclass descriptors.
        Implementation is not yet complete.

        * src/pcl-type.c:
        Finish implementation of repr() and getset callbacks using
                PCL_OBJECT_FLAG_SINGLETON to distinguish between built-in
                types and user-defined classes.
        ... except type_set_bases(); still not complete.

2006-03-07  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/Makefile.am:
        Add source files: pcl-ellipsis.[ch]
                          pcl-free.[ch]
                          pcl-none.[ch]
                          pcl-not-implemented.[ch]
        Remove source files: pcl-singleton.[ch]

        * src/pcl.h:
        #include "pcl-ellipsis.h"
        #include "pcl-free.h"
        #include "pcl-none.h"
        #include "pcl-not-implemented.h"
        Remove #include "pcl-singleton.h"

        * src/pcl.[ch]:
        Move singleton macros and functions to respective files.

        * src/pcl-bool.[ch]:
        Add macros and functions for singleton objects True and False.

        * src/pcl-ellipsis.[ch]:
        New source files implement the built-in object Ellipsis.
        Broken out from the old pcl-singleton file.

        * src/pcl-free.[ch]:
        New source files implement the built-in object Free.
        Broken out from the old pcl-singleton file.

        * src/pcl-none.[ch]:
        New source files implement the built-in object None.
        Broken out from the old pcl-singleton file.

        * src/pcl-not-implemented.[ch]:
        New source files implement the built-in object NotImplemented.
        Broken out from the old pcl-singleton file.

2006-03-06  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-attr-getter.c: (attr_getter_traverse)
        * src/pcl-callable.c: (callable_iterator_traverse)
        * src/pcl-cell.c: (cell_traverse)
        * src/pcl-code.c: (code_traverse)
        * src/pcl-descr.c: (descr_traverse)
        * src/pcl-dict.c: (dict_traverse)
        * src/pcl-dict-proxy.c: (dict_proxy_traverse)
        * src/pcl-enumerate.c: (enumerate_traverse)
        * src/pcl-file.c: (file_traverse)
        * src/pcl-frame.c: (frame_traverse)
        * src/pcl-function.c: (function_traverse)
        * src/pcl-generator.c: (generator_traverse)
        * src/pcl-item-getter.c: (item_getter_traverse)
        * src/pcl-list.c: (list_traverse)
        * src/pcl-method.c: (method_traverse)
        * src/pcl-module.c: (module_traverse)
        * src/pcl-reversed.c: (reversed_traverse)
        * src/pcl-sequence.c: (sequence_iterator_traverse)
        * src/pcl-set.c: (base_set_traverse)
        * src/pcl-slice.c: (slice_traverse)
        * src/pcl-table.c: (table_traverse)
        * src/pcl-tablerecord.c: (tablerecord_traverse)
        * src/pcl-traceback.c: (traceback_traverse)
        * src/pcl-tuple.c: (tuple_traverse)
        * src/pcl-type.c: (type_traverse)
        * src/pcl-weak-ref.c: (weak_ref_traverse)
        * src/pcl-zip.c: (zip_traverse)
        Chain up to parent's traverse method.

        * src/pcl-container.c: (container_traverse)
        New function implements a default traverse() method.

        * src/pcl-enumerate.c: (enumerate_new_instance)
        Change keyword argument from `sequence' to `iterable'.

        * src/pcl-frame.c: (frame_dispose)
        Reset the cut flag and block count.

2006-03-02  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        min() and max() now consume iterators.
        range() and zip() now return an iterator.

        * docs/reference/pcl-docs.sgml:
        Create a new "Internal Types" partition.
        Move PclNumber to the "Interfaces" partition.
        Add PclRange and PclZip to the "Iterators" partition.
        Move PclEnumerate and PclReversed to the "Iterators" partition.

        * docs/reference/pcl-sections.txt:
        Add PclXxxClass to the `Standard' subsection of each section.
        Add sections for PclRange and PclZip.

        * docs/reference/pcl.types:
        Add pcl_range_get_type and pcl_zip_get_type.

        * src/Makefile.am:
        Add source files: pcl-attr-getter.[ch]
                          pcl-item-getter.[ch]
                          pcl-range.[ch]
                          pcl-zip.[ch]
        Remove source file: pcl-mod-operator.h

        * src/pcl.h:
        #include "pcl-attr-getter.h"
        #include "pcl-item-getter.h"
        #include "pcl-range.h"
        #include "pcl-zip.h"
        Remove #include "pcl-mod-operator.h"

        * src/pcl-attr-getter.[ch]:
        New source files break PclAttrGetter class from the `operator' module.

        * src/pcl-bool.c: (pcl_bool_get_type_object)
        * src/pcl-bool.c: (pcl_bool_from_boolean)
        * src/pcl-code.c: (pcl_code_get_type_object)
        * src/pcl-complex.c: (pcl_complex_get_type_object)
        * src/pcl-dict.c: (pcl_dict_get_type_object)
        * src/pcl-dict-proxy.c: (pcl_dict_proxy_get_type_object)
        * src/pcl-enumerate.c: (pcl_enumerate_get_type_object)
        * src/pcl-exception.c: (pcl_exception_get_type_object)
        * src/pcl-file.c: (pcl_file_get_type_object)
        * src/pcl-float.c: (pcl_float_get_type_object)
        * src/pcl-frame.c: (pcl_frame_get_type_object)
        * src/pcl-function.c: (pcl_function_get_type_object)
        * src/pcl-generator.c: (pcl_generator_get_type_object)
        * src/pcl-int.c: (pcl_int_get_type_object)
        * src/pcl-iterator.c: (pcl_iterator_next)
        * src/pcl-iterator.c: (pcl_iterator_stop)
        * src/pcl-list.c: (pcl_list_get_type_object)
        * src/pcl-method.c: (pcl_method_get_type_object)
        * src/pcl-mod-operator.c: (pcl_attr_getter_get_type_object)
        * src/pcl-mod-operator.c: (pcl_item_getter_get_type_object)
        * src/pcl-module.c: (pcl_module_get_type_object)
        * src/pcl-object.c: (pcl_object_get_type_object)
        * src/pcl-property.c: (pcl_property_get_type_object)
        * src/pcl-reversed.c: (pcl_reversed_get_type_object)
        * src/pcl-set.c: (pcl_set_get_type_object)
        * src/pcl-set.c: (pcl_frozen_set_get_type_object)
        * src/pcl-singleton.c: (pcl_free_get_type_object)
        * src/pcl-singleton.c: (pcl_none_get_type_object)
        * src/pcl-singleton.c: (pcl_ellipsis_get_type_object)
        * src/pcl-singleton.c: (pcl_not_implemented_get_type_object)
        * src/pcl-slice.c: (pcl_slice_get_type_object)
        * src/pcl-string.c: (pcl_string_get_type_object)
        * src/pcl-table.c: (pcl_table_get_type_object)
        * src/pcl-tablerecord.c: (pcl_tablerecord_get_type_object)
        * src/pcl-traceback.c: (pcl_traceback_get_type_object)
        * src/pcl-tuple.c: (pcl_tuple_get_type_object)
        * src/pcl-type.c: (pcl_type_get_type_object)
        * src/pcl-weak-ref.c: (pcl_weak_ref_get_type_object)
        Document function.

        * src/pcl-callable.c:
        * src/pcl-code.c:
        * src/pcl-descr.c:
        * src/pcl-dict.c:
        * src/pcl-dict-proxy.c:
        * src/pcl-enumerate.c:
        * src/pcl-file.c:
        * src/pcl-frame.c:
        * src/pcl-function.c:
        * src/pcl-generator.c:
        * src/pcl-list.c:
        * src/pcl-method.c:
        * src/pcl-mod-operator.c:
        * src/pcl-module.c:
        * src/pcl-property.c:
        * src/pcl-reversed.c:
        * src/pcl-sequence.c:
        * src/pcl-set.c:
        * src/pcl-slice.c:
        * src/pcl-table.c:
        * src/pcl-tablerecord.c:
        * src/pcl-traceback.c:
        * src/pcl-tuple.c:
        * src/pcl-type.c:
        * src/pcl-weak-ref.c:
        Remove private struct.

        * src/pcl-complex.h:
        PclComplexValue: Comment fields.

        * src/pcl-item-getter.[ch]:
        New source files break PclItemGetter class from the `operator' module.

        * src/pcl-mod-builtin.c:
        Remove builtin_range() and builtin_zip() functions.
        `range' and `zip' are now built-in type objects.

        * src/pcl-mod-builtin.c: (builtin_all, builtin_any)
        Rename 2nd argument from `object' to `iterable'.

        * src/pcl-mod-builtin.c: (builtin_max, builtin_min)
        Accept an iterator as the argument to min() and max().
        Refactor the code for better readability.
        Update the doc strings.

        * src/pcl-mod-operator.c:
        Break PclAttrGetter and PclItemGetter classes into separate files.

        * src/pcl-range.[ch]:
        New source files implement range iterators.

        * src/pcl-zip.[ch]:
        New source files implement zip iterators.

2006-02-28  David R. Crepps  <david.crepps@boeing.com>

        * benchmarks/bench.c:
        * benchmarks/chessboard_4_deep.py:
        * benchmarks/dict_insert_access_delete.py:
        * benchmarks/dict_insert_access.py:
        * benchmarks/dict_insert.py:
        * benchmarks/dict_string_key.py:
        * benchmarks/eight_queens.py:
        * benchmarks/float_add.py:
        * benchmarks/float_divide.py:
        * benchmarks/float_multiply.py:
        * benchmarks/inline_arithmetic.py:
        * benchmarks/int_add.py:
        * benchmarks/int_divide.py:
        * benchmarks/int_multiply.py:
        * benchmarks/list_access.py:
        * benchmarks/list_insert_first_and_truncate.py:
        * benchmarks/list_insert_first.py:
        * benchmarks/list_insert_last.py:
        * benchmarks/Makefile
        * benchmarks/nested_for.py:
        * benchmarks/nested_functions.py:
        * benchmarks/nested_if.py:
        * benchmarks/no_for.py:
        * benchmarks/pclsuite:
        * benchmarks/pcltest:
        * benchmarks/pysuite:
        * benchmarks/pytest:
        * benchmarks/set_insert_and_remove.py:
        * benchmarks/set_insert.py:
        * benchmarks/set_insert_redundant.py:
        * benchmarks/single_for.py:
        * benchmarks/single_if.py:
        * benchmarks/string_concatination.py:
        * benchmarks/task1.pcl:
        * benchmarks/task1_predicates.pcl:
        * benchmarks/task1_tables.pcl:
        * benchmarks/tuple_access.py:
        * benchmarks/version.test:
        Added benchmark suite comparing performance versus Python.

2006-02-28  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.21

        * src/pcl.c: (pcl_initialize, pcl_finalize)
        Call init()/fini() functions for dictionaries.

        * src/pcl-dict.[ch]:
        Remove pcl_dict_clear() (instead: use pcl_mapping_clear()).
        Remove pcl_dict_keys() (instead: use pcl_mapping_keys()).
        Remove pcl_dict_values() (instead: use pcl_mapping_values()).
        Remove pcl_dict_items() (instead: use pcl_mappipng_items()).

        * src/pcl-dict.c:
        Use a PclFactory for more efficient memory usage.

        * src/pcl-dict.c: (pcl_dict_new)
        * src/pcl-list.c: (pcl_list_new)
        * src/pcl-tuple.c: (pcl_tuple_new)
        Clear `dispose_has_run' flag if recycling an object.

        * src/pcl-eval.c: (pcl_eval_frame)
        PCL_OPCODE_PRINT_NEWLINE: Fix error handling bug.

        * src/pcl-list.c: (list_dispose)
        * src/pcl-tuple.c: (tuple_dispose)
        Fix iteration bug.

        * src/pcl-list.[ch]: (pcl_list_from_iterator)
        New function constructs a list from an iterator.

        * src/pcl-object.c: (pcl_object_dir)
        Call pcl_mapping_keys() instead of pcl_dict_keys().
        Pass the keys iterator to pcl_list_from_iterator().

        * src/pcl-table.c:
        Better error handling.

        * src/pcl-table.c: (table_print, table_str)
        Call pcl_mapping_values() instead of pcl_dict_values().

        * src/pcl-table.c: (table_record_build)
        Use pcl_dict_next() to iterate over the kwds dictionary.

        * src/pcl-table.c: (table_record_update)
        Use pcl_dict_next() to iterate over the kwds dictionary.

        * src/pcl-table.c: (table_iterable_iterate)
        Call pcl_mapping_values() instead of pcl_dict_values().

        * src/pcl-table.c: (table_method_find)
        Use pcl_list_from_iterator() to generate a list from an iterator.

        * src/pcl-tablerecord.c: (tablerecord_dispose)
        Use new PCL_CLEAR() macro for discarding object references.

2006-02-27  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support extended form of print statement.
        More efficient memory comsumption and usage.

        * Makefile.am:
        Add source files: pcl-factory.[ch]

        * src/glib-ext.[ch]:
        Remove g_string_compare() (no longer needed).

        * src/pcl.h:
        #include "pcl-factory.h"

        * src/pcl.c: (pcl_initialize)
        Call _pcl_xxx_init() for types that use factories or cached objects.

        * src/pcl.c: (pcl_finalize)
        Call _pcl_xxx_fini() for types that use factories or cached objects.

        * src/pcl-compiler.c: (compiler_print)
        Support extended form of print statement.

        * src/pcl-eval.c: (pcl_eval_frame)
        Support new opcodes (see src/pcl-opcode.h).

        * src/pcl-factory.[ch]:
        New source files support efficient reuse of spent objects.

        * src/pcl-float.c:
        Use a PclFactory for more efficient memory usage.

        * src/pcl-frame.h:
        Add `slot_count' and `stack_size' fields to PclFrame.

        * src/pcl-frame.c:
        Use a PclFactory for more efficient memory usage.
        Fix dispose() and traverse() methods to handle stack properly.

        * src/pcl-int.c:
        Cache small integers as singletons.
        Use a PclFactory for more efficient memory usage.

        * src/pcl-iterable.h:
        Fix a type declaration typo.

        * src/pcl-list.c:
        Use a PclFactory for more efficient memory usage.

        * src/pcl-method.c:
        Use a PclFactory for more efficient memory usage.

        * src/pcl-mod-gc.c:
        Enable automatic garbage collection by default.
        Add some debug messages about whether GC is enabled.

        * src/pcl-opcode.h:
        New opcodes: PCL_OPCODE_PRINT_ITEM_TO
                     PCL_OPCODE_PRINT_NEWLINE_TO

        * src/pcl-parser.y:
        Add production to support extended form of print statement.

        * src/pcl-type.c: (type_new_instance)
        Add some hackery to support user-defined classes -- still not ready.

        * src/pcl-type.c: (type_set_name)
        Check for null bytes in given name string.

        * src/pcl-tuple.c:
        Use a PclFactory array for more efficient memory usage.

2006-02-23  David R. Crepps  <david.crepps@boeing.com>

        * test/dict_method_test.pcl:
        Modified tests for iterator returns of items(), values(), and keys()
        
        * test/simple_ops_test.pcl:
        Changes to simple division tests for 0.0.21 pre-release.

2006-02-22  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support "from module import ..." notation.
        Improved tracebacks when reading from standard input.
        Working garbage collection module (not yet complete).
        Remove the '<>' operator (instead: use '!=').
        Remove built-in 'callable()' (instead: catch the exception).

        * src/pcl-arg.c: (arg_convert_error)
        Make `expected' argument constant -- fixes compiler warning.

        * src/pcl-arg.c: (arg_convert_simple)
        Support "O!" format code (type object followed by object).

        * src/pcl.c: (pcl_finalize)
        Rearrange logic: call exit funcs first, then collect garbage.
        Remove circular reference kludge for `sys' module.

        * src/pcl-compiler.c: (compiler_import)
        Support `from' form of import statement.

        * src/pcl-compiler.c: (compiler_resolve_free)
        Better error handling.

        * src/pcl-compiler.c: (compiler_load_symbols)
        Better error_handling.

        * src/pcl-container.h:
        Add a garbage collection hook to PclContainer.

        * src/pcl-container.c: (container_finalize)
        New function implements GObject's finalize() method.
        Calls pcl_gc_list_remove(), which terminates GC tracking.

        * src/pcl-container.c: (container_init)
        Calls pcl_gc_list_insert(), which initiates GC tracking.

        * src/pcl-container.c: (pcl_object_traverse)
        Better error handling.

        * src/pcl-dict.c: (dict_characterize)
        Bug fix -- unref'ing wrong objects on detection of "winner".

        * src/pcl-dict.c: (dict_dispose)
        Call pcl_mapping_clear() to safely clean the dictionary.
        Eliminates the need for a finalize() method.

        * src/pcl-dict.c: (pcl_dict_next)
        Bug fix -- always return a valid key and value.

        * src/pcl-error.[ch]: (pcl_error_program_text)
        Accept a file stream pointer as the first argument.
        Rewrite the logic without using a GIOChannel.

        * src/pcl-error.c: (pcl_error_display)
        Adapt to modified pcl_error_program_text() signature.

        * src/pcl-eval.c: (eval_import_all_from)
        New function handles "from module import *" statements.

        * src/pcl-eval.c: (eval_import_from)
        New function handles `from' form of import statements.

        * src/pcl-eval.c: (pcl_eval_frame)
        Handle new opcodes (see src/pcl-opcode.h).

        * src/pcl-file.[ch]: (pcl_universal_newline_fgets)
        Replacement for fgets() with universal newline support.

        * src/pcl-frame.c:
        Temporary fix to keep the GC from exploding.

        * src/pcl-function.c: (pcl_function_new)
        Reference `globals' -- the GC will clean up the circular reference.

        * src/pcl-lexer.l:
        * src/pcl-parser.y:
        Drop support for the '<>' operator.

        * src/pcl-list.c:
        Remove list_self_refs() -- used by old GC; no longer needed.

        * src/pcl-mod-builtin.c:
        Drop support for the 'callable()' function.

        * src/pcl-mod-gc.[ch]:
        New implementation of garbage collection, enabled by default.

        * src/pcl-mod-sys.h:
        Cosmetic changes.

        * src/pcl-object.h:
        Remove self_refs() method -- used by old GC; no longer needed.

        * src/pcl-opcode.h:
        New opcodes: PCL_OPCODE_IMPORT_FROM
                     PCL_OPCODE_IMPORT_STAR

        * src/pcl-parser.y:
        Add productions to support `from' form of import statement.

        * src/pcl-symbol-table.c: (symbol_table_import)
        Support `from' form of import statement.

        * src/pcl-table.c: (table_update_record, table_method_delete)
        Call pcl_dict_del_item() instead of pcl_dict_set_item(..., NULL).

        * src/pcl-table.c: (table_method_find)
        Build a list from the iterator returned by pcl_dict_values().

        * src/pcl-traceback.c: (traceback_display_line)
        Adapt to modified pcl_error_program_text() signature.
        Return TRUE even if we can't open a stream (for standard input).

        * src/pcl-traceback.c: (pcl_traceback_print)
        Don't worry about making sure the code object's filename exists.
        traceback_display_line() will handle it by calling pcl_open_source().

        * src/pcl-util.[ch]: (pcl_open_source)
        New function uses sys.path to open a stream to the given filename.
        Returns NULL if an error occurred but never raises an exception.

        * src/pcl-weak-ref.c: (weak_ref_notify)
        Temporary fix to keep the GC from exploding.

2006-02-20  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Faster dictionary implementation (based on Python).

        * src/pcl-arg.c: (arg_parse_kw)
        Use pcl_dict_next() to iterate over the kwds dictionary.

        * src/pcl-callable.c: (callable_iterator_next)
        * src/pcl-eval.c: (pcl_eval_code_ex)
        * src/pcl-iterator.c: (iterator_iterable_contains)
        * src/pcl-list.c: (list_iterable_contains,
                           list_method_count,
                           list_method_index,
                           list_method_remove)
        * src/pcl-sequence.c: (pcl_sequence_index, pcl_sequence_count)
        * src/pcl-tuple.c: (tuple_iterable_contains)
        Replace pcl_object_equal() with pcl_object_compare_eq().

        * src/pcl-code.c: (code_hashable_hash)
        * src/pcl-compilex.c: (complex_hashable_hash)
        * src/pcl-int.c: (int_hashable_hash)
        * src/pcl-method.c: (method_hashable_hash)
        * src/pcl-set.c: (frozen_set_hashable_hash, frozen_set_init)
        * src/pcl-string.c: (string_hashable_hash, string_init)
        * src/pcl-tuple.c: (tuple_hashable_hash)
        * src/pcl-weak-ref.c: (weak_ref_hashable_hash, weak_ref_init)
        Use the PCL_HASH_INVALID and PCL_HASH_VALIDATE() macros.

        * src/pcl-comparable.h:
        Define a set of convenience macros for using rich compares.
        pcl_object_compare_xx(): pcl_object_rich_compare_bool() using PCL_XX

        * src/pcl-compiler.c: (compiler_dict_keys_inorder)
        Use pcl_dict_next() to iterate over the given dictionary.
        Better error handling.

        * src/pcl-compiler.c: (compiler_cellvar_offsets)
        Add checks for VARARGS and VARKWDS flags; adjust argc appropriately.
        Use pcl_dict_next() to iterate over the cs->cellvars dictionary.
        Better error handling.

        * src/pcl-compiler.c: (compiler_freevar_offsets)
        Use pcl_dict_next() to iterate over the freevars dictionary.
        Better error handling.

        * src/pcl-container.h:
        Change first argument of PclTraverseFunc type to gpointer.
        Casting is no longer necessary when calling a PclTraverseFunc.

        * src/pcl-dict.[ch]:
        Implement Python's concept of a dictionary.
        Much more efficient than using a GHashTable.

        * src/pcl-file.c: (file_method_readlines)
        pcl_string_concat_and_del() now takes PclObject as first argument.
        Get rid of krufty workaround crap around the call.

        * src/pcl-frame.c: (frame_traverse)
        * src/pcl-function.c: (function_traverse)
        * src/pcl-generator.c: (generator_traverse)
        * src/pcl-traceback.c: (traceback_traverse)
        Casting is no longer necessary when calling a PclTraverseFunc.

        * src/pcl-hashable.h:
        Define PCL_HASH_INVALID and PCL_HASH_DEFAULT hash constants.
        Define PCL_HASH_VALIDATE() macro to adjust a hash value if invalid.

        * src/pcl-hashable.c: (hashable_method_hash, pcl_object_hash)
        * src/pcl-mod-builtin.c: (builtin_hash)
        Use the PCL_HASH_INVALID macro.

        * src/pcl-iterator.c: (pcl_iterator_next, pcl_iterator_stop)
        Better error handling.

        * src/pcl-list.c: (list_repr)
        * src/pcl-slice.c: (slice_repr)
        * src/pcl-table.c: (table_str)
        * src/pcl-tuple.c: (tuple_repr)
        pcl_string_concat[_and_del]() now takes PclObject as first argument.

        * src/pcl-list.c: (list_print, list_repr)
        Use pcl_repr_enter() and pcl_repr_leave() instead of object->marker.
        Restructure logic to more closely resemble Python.

        * src/pcl-list.c: (list_rich_comparable_compare)
        * src/pcl-tuple.c: (tuple_rich_comparable_compare)
        Silence compiler warnings.

        * src/pcl-mapping.[ch]:
        Change select() method of PclMapping interface to popitem().
        Remove iterkeys(), itervalues(), and iteritems() from method table.

        * src/pcl-object.[ch]:
        Remove `marker' field from PclObject.
        Remove pcl_object_equal() function; use pcl_object_compare_eq().

        * src/pcl-object.c: (pcl_object_dir)
        pcl_mapping_keys() now returns an iterator, not a list; adapt.

        * src/pcl-sequence.c: (sequence_iterator_stop)
        Do not unref self->sequence if it's already NULL.

        * src/pcl-set.c: (base_set_symmetric_difference_update)
        Handle special case when 'self is other'.

        * src/pcl-string.[ch]: (pcl_string_concat, pcl_string_concat_and_del)
        Accept a PclObject pointer-pointer as the first argument.
        Ultimately just calls string_sequence_concat().

        * src/pcl-string.c: (pcl_string_join)
        New function calls string_method_join().

        * src/pcl-table.c: (table_record_build, table_update_record)
        pcl_dict_items() now returns an iterator.

        * src/pcl-table.c: (table_iterable_iterate)
        pcl_dict_values() now returns an iterator.

        * src/pcl-tuple.c: (tuple_print, tuple_repr)
        Restructure logic to more closely resemble Python.

        * src/pcl-util.[ch]: (pcl_repr_enter, pcl_repr_leave)
        New functions prevent infinite recursion when creating a string
                representation of an object containing a reference cycle.

2006-02-15  David R. Crepps  <david.crepps@boeing.com>

        * test/simple_ops_test.pcl:
        Added test for string concatination and repetition operators.
        Added test for string formatting.

2006-02-14  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-object.c: (pcl_object_is_true)
        Try pcl_object_measure() before pcl_object_nonzero().
        This is a temporary workaround for the benefit of sets.

        * src/pcl-tablerecord.c: (tablerecord_comparable_compare)
        If either argument is not a table-record, return 2 (undefined).

2006-02-13  David R. Crepps  <david.crepps@boeing.com>

        * test/simple_ops_test.pcl:
        Added tests for complex numbers and some builtin functions.
        
        * test/method_test.pcl:
        * test/set_method_test.pcl:
        Added test suite for set and frozenset methods.

2006-02-13  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Begin using gtk-doc to document the C API.
        Support true division and the floor division operator (//).

        * configure.ac:
        Use proper libtool versioning.
        Do not export symbols starting with an underscore.
        Restructure things based on GLib's configure.in.
        Split --enable-debug into <no|minimum|yes>.
        Add GTK_DOC_CHECK(1.4).

        * Makefile.am:
        Add `docs' to SUBDIRS.

        * src/Makefile.am:
        Use proper libtool versioning.
        Add PCL prefix to PREFIX and EXEC_PREFIX.

        * src/pcl-bool.h:
        * src/pcl-callable.h:
        * src/pcl-cell.h:
        * src/pcl-code.h:
        * src/pcl-comparable.h:
        * src/pcl-compiler.[ch]:
        * src/pcl-complex.h:
        * src/pcl-container.h:
        * src/pcl-descr.h:
        * src/pcl-dict.h:
        * src/pcl-dict-proxy.h:
        * src/pcl-enumerate.h:
        * src/pcl-exception.h:
        * src/pcl-file.h:
        * src/pcl-float.h:
        * src/pcl-frame.h:
        * src/pcl-function.h:
        * src/pcl-generator.h:
        * src/pcl-hashable.h:
        * src/pcl-import.h:
        * src/pcl-int.h:
        * src/pcl-iterable.h:
        * src/pcl-iterator.h:
        * src/pcl-list.h:
        * src/pcl-mapping.h:
        * src/pcl-measurable.h:
        * src/pcl-member.h:
        * src/pcl-method.h:
        * src/pcl-mod-operator.h:
        * src/pcl-module.h:
        * src/pcl-number.h:
        * src/pcl-object.h:
        * src/pcl-parse-info.h:
        * src/pcl-property.h:
        * src/pcl-reversed.h:
        * src/pcl-sequence.h:
        * src/pcl-set.h:
        * src/pcl-singleton.h:
        * src/pcl-slice.h:
        * src/pcl-state.h:
        * src/pcl-string.h:
        * src/pcl-subscriptable.h:
        * src/pcl-symbol-table.h:
        * src/pcl-table.h:
        * src/pcl-tablerecord.h:
        * src/pcl-traceback.h:
        * src/pcl-tuple.h:
        * src/pcl-type.h:
        * src/pcl-weak-ref.h:
        Prefix raw struct names with an underscore.
        e.g. typedef struct _PclObject PclObject;
        Previous form (without the underscore) was confusing gtk-doc.

        * src/pcl-bool.c:
        * src/pcl-callable.[ch]:
        * src/pcl-code.c:
        * src/pcl-comparable.[ch]:
        * src/pcl-complex.c:
        * src/pcl-descr.c:
        * src/pcl-dict.c:
        * src/pcl-dict-proxy.c:
        * src/pcl-float.c:
        * src/pcl-function.c:
        * src/pcl-hashable.h:
        * src/pcl-int.c:
        * src/pcl-iterable.[ch]:
        * src/pcl-iterator.c:
        * src/pcl-list.c:
        * src/pcl-mapping.[ch]:
        * src/pcl-measurable.[ch]:
        * src/pcl-mod-operator.c:
        * src/pcl-number.[ch]:
        * src/pcl-reversed.c:
        * src/pcl-sequence.[ch]:
        * src/pcl-set.c:
        * src/pcl-singleton.c:
        * src/pcl-slice.c:
        * src/pcl-subscriptable.[ch]:
        * src/pcl-table.c:
        * src/pcl-tablerecord.c:
        * src/pcl-tuple.c:
        * src/pcl-type.c:
        * src/pcl-weak-ref.c:
        Use `iface' as abbreviation for `interface'.
        Follows GTK+ naming convention.

        * src/pcl-bool.c:
        * src/pcl-callable.c:
        * src/pcl-cell.c:
        * src/pcl-code.c:
        * src/pcl-complex.c:
        * src/pcl-container.c:
        * src/pcl-descr.c:
        * src/pcl-dict.c:
        * src/pcl-dict-proxy.c:
        * src/pcl-enumerate.c:
        * src/pcl-exception.c:
        * src/pcl-file.c:
        * src/pcl-float.c:
        * src/pcl-frame.c:
        * src/pcl-function.c:
        * src/pcl-generator.c:
        * src/pcl-int.c:
        * src/pcl-iterator.c:
        * src/pcl-list.c:
        * src/pcl-mod-operator.c:
        * src/pcl-module.c:
        * src/pcl-object.c:
        * src/pcl-property.c:
        * src/pcl-reversed.c:
        * src/pcl-sequence.c:
        * src/pcl-set.c:
        * src/pcl-singleton.c:
        * src/pcl-slice.c:
        * src/pcl-table.c:
        * src/pcl-tablerecord.c:
        * src/pcl-traceback.c:
        * src/pcl-tuple.c:
        * src/pcl-type.c:
        * src/pcl-weak-ref.c:
        Cosmetic changes.

        * src/pcl-complex.c: (complex_number_floordiv)
        * src/pcl-float.c: (float_number_floordiv)
        * src/pcl-int.c: (int_number_floordiv)
        New function implements PclNumber's floordiv() method.

        * src/pcl-eval.c: (pcl_eval_frame)
        Handle new opcodes (see src/pcl-opcode.h).

        * src/pcl-int.c: (pcl_number_divide)
        Implement true division.

        * src/pcl-lexer.l:
        New operators: // (floor division), //= (in-place floor division)

        * src/pcl-number.[ch]:
        Add floordiv() method to PclNumber interface.
        Add in_place_floordiv() method to PclNumber interface.

        * src/pcl-mod-operator.c:
        Add floordiv() and __floordiv__() module functions.

        * src/pcl-mod-sys.c:
        Add PCL prefix to PREFIX and EXEC_PREFIX.

        * src/pcl-opcode.h:
        New opcodes: PCL_OPCODE_BINARY_FLD
                     PCL_OPCODE_INPLACE_FLD

        * src/pcl-parser.y:
        Define new operation tokens: OP_INPLACE_FLD, OP_FLD
        New production: m_expr := m_expr OP_FLD u_expr
        New production: augmented_assignment_operator ::= OP_INPLACE_FLD

2006-02-09  David R. Crepps  <david.crepps@boeing.com>

        * test/dict_method_test.pcl:
        Fixed logic error concerning dictionary equality/inequality.

2006-02-09  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released 0.0.20.1

        * New feature summary:
        Fully support set and frozenset methods and operators.

        * src/Makefile.am:
        Rename pcl-compile.[ch] to pcl-compiler.[ch].

        * src/pcl.h:
        #include "pcl-compiler.h" (instead of "pcl-compile.h")
        Define PCL_CLEAR() macro for safely discarding object references.

        * src/pcl-arg.[ch]:
        * src/pcl-code.c:
        * src/pcl-compiler.c:
        * src/pcl-dict.c:
        * src/pcl-dict-proxy.c:
        * src/pcl-eval.[ch]:
        * src/pcl-file.c:
        * src/pcl-function.c:
        * src/pcl-list.[ch]:
        * src/pcl-mapping.c:
        * src/pcl-measurable.[ch]:
        * src/pcl-method.c:
        * src/pcl-mod-builtin.c:
        * src/pcl-reversed.c:
        * src/pcl-sequence.c:
        * src/pcl-slice.[ch]:
        * src/pcl-string.[ch]:
        * src/pcl-table.[ch]:
        * src/pcl-tablerecord.[ch]:
        * src/pcl-traceback.c:
        * src/pcl-tuple.[ch]:
        * src/pcl-type.c:
        Use glong instead of gsize for measurements and bounds.

        * src/pcl-arg.c: (arg_convert_simple)
        Support "s#" format codes.

        * src/pcl-callable.c:
        * src/pcl-generator.c:
        * src/pcl-reversed.c:
        Use new PCL_CLEAR() macro for discarding object references.

        * src/pcl-compiler.[ch]:
        Rename everything from `compile' to `compiler'.

        * src/pcl-dict.c:
        Make dictionaries rich comparable.

        * src/pcl-eval.c: (pcl_eval_frame)
        Add inline optimizations for the following:
                PCL_OPCODE_BINARY_ADD:          int + int
                PCL_OPCODE_BINARY_SUB:          int - int
                PCL_OPCODE_INPLACE_ADD:         int + int
                PCL_OPCODE_INPLACE_SUB:         int - int
                PCL_OPCODE_COMPARISON_LT:       int < int
                PCL_OPCODE_COMPARISON_LE:       int <= int
                PCL_OPCODE_COMPARISON_EQ:       int == int
                PCL_OPCODE_COMPARISON_NE:       int != int
                PCL_OPCODE_COMPARISON_GE:       int >= int
                PCL_OPCODE_COMPARISON_GT:       int > int
                PCL_OPCODE_LOAD_SUBSCRIPT:      list[int]
                PCL_OPCODE_UNPACK_SEQUENCE:     tuple or list

        * src/pcl-file.c:
        * src/pcl-import.c:
        * src/pcl-iterator.c:
        * src/pcl-list.c:
        * src/pcl-mapping.c:
        * src/pcl-method.c:
        * src/pcl-mod-builtin.c:
        * src/pcl-mod-gc.c:
        * src/pcl-mod-operator.c:
        * src/pcl-mod-sys.c:
        * src/pcl-run.c:
        * src/pcl-string.c:
        * src/pcl-subscriptable.c:
        * src/pcl-table.c:
        * src/pcl-util.c:
        Stop using PCL_RETURN_{NONE|TRUE|FALSE} macros.

        * src/pcl-number.c: (number_method_nonzero)
        The method should return a boolean, not None.

        * src/pcl-number.c: (pcl_number_in_place_power)
        Silence a compiler warning.

        * src/pcl-parser.y: (copy_to_disjunct)
        Silence a compiler warning.

        * src/pcl-set.[ch]:
        Define a new abstract class called PclBaseSet.
        PclSet and PclFrozenSet now inherit directly from PclBaseSet.
        Finish all methods and bind operators to the PclNumber interface.

2006-02-07  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support decorators for functions and methods.
        Support all built-in methods and members on file objects.

        * src/Makefile.am:
        Change -pedantic-errors to -pedantic so that long string literals
                (more than 509 chars) only cause a warning, not an error.

        * src/pcl-config.h:
        #include <sys/stat.h>
        Update comments.

        * src/pcl-callable.c: (callable_iterator_next)
        * src/pcl-eval.c: (pcl_eval_code_ex)
        * src/pcl-iterator.c: (iterator_iterable_contains)
        * src/pcl-list.c: (list_iterable_contains, list_method_count,
                           list_method_index, list_method_remove)
        * src/pcl-sequence.c: (pcl_sequence_count, pcl_sequence_index)
        * src/pcl-tuple.c: (tuple_iterable_contains)
        Check for errors when calling pcl_object_equal().

        * src/pcl-compile.c: (compile_decorators)
        New function handles PCL_NT_DECORATORS nodes.

        * src/pcl-compile.c: (compile_function)
        Handle PCL_NT_DECORATORS nodes, if present.

        * src/pcl-complex.c: (complex_number_as_complex)
        New function implements PclNumber's as_complex() method.

        * src/pcl-eval.c: (pcl_eval_frame)
        PCL_OPCODE_PRINT_ITEM: Know when to call pcl_file_soft_space().

        * src/pcl-file.[ch]:
        Fully implement Python's file object interface.

        * src/pcl-float.c: (float_number_as_complex)
        New function implements PclNumber's as_complex() method.

        * src/pcl-function.c: (function_dict)
        Create a dictionary on demand.

        * src/pcl-int.c: (int_number_as_complex)
        New function implements PclNumber's as_complex() method.

        * src/pcl-lexer.l:
        Rename lexer_process_int() to lexer_process_integer().
        Don't strip the 'J' off of imaginary literals.

        * src/pcl-mod-builtin.c: (_pcl_builtin_init)
        Add open (alias of file) to __builtin__ module.

        * src/pcl-node.[ch]:
        Add node type: DECORATORS

        * src/pcl-object.[ch]: (pcl_object_equal)
        Change return type to gint so that errors can be reported.
        Call pcl_object_rich_compare_bool().

        * src/pcl-parse-info.c:
        Cosmetic changes to debug output.

        * src/pcl-parser.y:
        Add productions to support function and method decorators.
        New production: dotted_name ::= NAME | dotted_name '.' NAME
        function_definition: Add `decorators' variation.
        predicate_definition: Add `decorators' variation.
        Rename `dotted_as_names' production to `module_list'.
        Modify `module' production to be a wrapper for `dotted_name'.

        * src/pcl-parser.y: (adopt_name)
        New function extracts a child's name and destroys the child.

        * src/pcl-symbol-table.c: (symbol_table_function,
                                   symbol_table_predicate)
        Handle PCL_NT_DECORATORS nodes, if present.

2006-02-02  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Add a copyright notice to all source files.

        * New feature summary:
        New built-in types: frozenset, property, set
        New built-in functions: isinstance(), issubclass()
        Make in-place operators work correctly.
        Support type methods mro() and __subclasses__().
        Support in-place list concatenation (+=) and repetition (*=).

        * configure.ac:
        Make the --enable-profiling switch work again.

        * src/Makefile.am:
        Add source files: pcl-mro.c pcl-property.[ch] pcl-set.[ch]

        * src/pcl.h:
        #include "pcl-property.h"
        #include "pcl-set.h"

        * src/pcl.[ch]: (pcl_register_singleton)
        Registers a singleton object for deletion at exit.
        For use with built-in type objects, None, True, False, etc.

        * src/pcl.c:
        Surround #include <execinfo.h> with G_ENABLE_DEBUG condition.
        Should allow compiling on non-glibc systems (but not in debug mode).

        * src/pcl.c: (pcl_initialize)
        Check GLib version and emit debug message.
        Initialize `singletons' data container.

        * src/pcl.c: (pcl_finalize)
        Remove finalization of individual singleton objects.
        Clear `singletons' data container (finalizes objects).
        Move interpreter and thread state destruction to the end.

        * src/pcl.c: (pcl_free, pcl_none, pcl_true, pcl_false,
                      pcl_ellipsis, pcl_not_implemented)
        Call pcl_register_singleton().

        * src/pcl-bool.h:
        * src/pcl-callable.h:
        * src/pcl-cell.h:
        * src/pcl-code.h:
        * src/pcl-comparable.h:
        * src/pcl-complex.h:
        * src/pcl-container.h:
        * src/pcl-descr.h:
        * src/pcl-dict.h:
        * src/pcl-dict-proxy.h:
        * src/pcl-enumerate.h:
        * src/pcl-exception.h:
        * src/pcl-file.h:
        * src/pcl-float.h:
        * src/pcl-frame.h:
        * src/pcl-function.h:
        * src/pcl-generator.h:
        * src/pcl-hashable.h:
        * src/pcl-int.h:
        * src/pcl-iterable.h:
        * src/pcl-iterator.h:
        * src/pcl-list.h:
        * src/pcl-mapping.h:
        * src/pcl-measurable.h:
        * src/pcl-method.h:
        * src/pcl-mod-operator.h:
        * src/pcl-module.h:
        * src/pcl-number.h:
        * src/pcl-object.h:
        * src/pcl-reversed.h:
        * src/pcl-sequence.h:
        * src/pcl-singleton.h:
        * src/pcl-slice.h:
        * src/pcl-string.h:
        * src/pcl-subscriptable.h:
        * src/pcl-table.h:
        * src/pcl-tablerecord.h:
        * src/pcl-traceback.h:
        * src/pcl-tuple.h:
        * src/pcl-type.h:
        * src/pcl-weak-ref.h:
        Cosmetic changes.

        * src/pcl-bool.c: (pcl_bool_get_type_object)
        * src/pcl-callable.c: (pcl_callable_iterator_get_type_object)
        * src/pcl-cell.c: (pcl_cell_get_type_object)
        * src/pcl-code.c: (pcl_code_get_type_object)
        * src/pcl-descr.c: (pcl_getset_descr_get_type_object,
                            pcl_member_descr_get_type_object,
                            pcl_method_descr_get_type_object)
        * src/pcl-dict.c: (pcl_dict_get_type_object)
        * src/pcl-dict-proxy.c: (pcl_dict_proxy_get_type_object)
        * src/pcl-enumerate.c: (pcl_enumerate_get_type_object)
        * src/pcl-exception.c: (pcl_exception_get_type_object,
                                pcl_exception_assertion_error,
                                pcl_exception_attribute_error,
                                pcl_exception_eof_error,
                                pcl_exception_floating_point_error,
                                pcl_exception_io_error,
                                pcl_exception_import_error,
                                pcl_exception_index_error,
                                pcl_exception_key_error,
                                pcl_exception_keyboard_interrupt,
                                pcl_exception_memory_error,
                                pcl_exception_name_error,
                                pcl_exception_not_implemented_error,
                                pcl_exception_os_error,
                                pcl_exception_overflow_error,
                                pcl_exception_reference_error,
                                pcl_exception_runtime_error,
                                pcl_exception_stop_iteration,
                                pcl_exception_syntax_error,
                                pcl_exception_system_error,
                                pcl_exception_system_exit,
                                pcl_exception_type_error,
                                pcl_exception_unbound_local_error,
                                pcl_exception_value_error,
                                pcl_exception_zero_division_error)
        * src/pcl-file.c: (pcl_file_get_type_object)
        * src/pcl-float.c: (pcl_float_get_type_object)
        * src/pcl-frame.c: (pcl_frame_get_type_object)
        * src/pcl-function.c: (pcl_function_get_type_object)
        * src/pcl-generator.c: (pcl_generator_get_type_object)
        * src/pcl-int.c: (pcl_int_get_type_object)
        * src/pcl-list.c: (pcl_list_get_type_object)
        * src/pcl-method.c: (pcl_method_get_type_object)
        * src/pcl-mod-operator.c: (pcl_attr_getter_get_type_object,
                                   pcl_item_getter_get_type_object)
        * src/pcl-module.c: (pcl_module_get_type_object)
        * src/pcl-object.c: (pcl_object_get_type_object)
        * src/pcl-reversed.c: (pcl_reversed_get_type_object)
        * src/pcl-sequence.c: (pcl_sequence_iterator_get_type_object)
        * src/pcl-singleton.c: (pcl_free_get_type_object,
                                pcl_none_get_type_object,
                                pcl_ellipsis_get_type_object,
                                pcl_not_implemented_get_type_object)
        * src/pcl-slice.c: (pcl_slice_get_type_object)
        * src/pcl-string.c: (pcl_string_get_type_object)
        * src/pcl-table.c: (pcl_table_get_type_object)
        * src/pcl-tablerecord.c: (pcl_tablerecord_get_type_object)
        * src/pcl-traceback.c: (pcl_traceback_get_type_object)
        * src/pcl-tuple.c: (pcl_tuple_get_type_object)
        * src/pcl-type.c: (pcl_type_get_type_object)
        * src/pcl-weak-ref.c: (pcl_weak_ref_get_type_object)
        Call pcl_register_singleton().

        * src/pcl-comparable.c: (pcl_object_rich_compare)
        Fix bug at end of non-rich comparable shortcut.
        Add pcl_enter_recursive_call() and pcl_leave_recursive_call().

        * src/pcl-compile.c:
        Use glong instead of gint for sequence indicies.

        * src/pcl-compile.c: (compile_add)
        Call pcl_object_type() instead of PCL_GET_TYPE_OBJECT().

        * src/pcl-compile.c: (compile_top_level_predicate)
        Fix memory corruption bug.

        * src/pcl-complex.c:
        Rename complex_number_remainder() to complex_number_modulo().

        * src/pcl-error.[ch]:
        Remove function pcl_type_error(); not worth it.

        * src/pcl-error.c: (pcl_error_write_unraisable)
        Fix typo when unref'ing traceback.

        * src/pcl-eval.c: (pcl_eval_frame)
        Adapt to new arithmetic opcode names.
        Handle new INPLACE opcodes (see src/pcl-opcode.h).
        PCL_OPCODE_COMPARISON_*: Call pcl_object_rich_compare().

        * src/pcl-float.c:
        Rename float_number_remainder() to float_number_modulo().

        * src/pcl-int.c:
        Rename int_number_remainder() to int_number_modulo().

        * src/pcl-lexer.l:
        Shorten LSHIFT and RSHIFT token names to LSH and RSH.

        * src/pcl-list.[ch]:
        Use glong instead of gint for sequence indicies.

        * src/pcl-list.c: (pcl_sequence_in_place_concat)
        New function implements PclSequence's in_place_concat() method.

        * src/pcl-list.c: (pcl_sequence_in_place_repeat)
        New function implements PclSequence's in_place_repeat() method.

        * src/pcl-mod-builtin.c: (builtin_isinstance)
        New function implements the built-in method isinstance().

        * src/pcl-mod-builtin.c: (builtin_issubclass)
        New function implements the built-in method issubclass().

        * src/pcl-mod-builtin.c: (_pcl_builtin_init)
        Add frozenset type object to __builtin__ module.
        Add property type object to __builtin__ module.
        Add set type object to __builtin__ module.

        * src/pcl-mod-operator.c:
        Adapt to changes in PclNumber interface.

        * src/pcl-mro.c:
        New source file implements the method resolution order algorithm.

        * src/pcl-number.[ch]:
        Add as_complex() method to PclNumber interface.
        Rename remainder() method to modulo() in PclNumber interface.
        Add in_place_xxx() methods to PclNumber interface.

        * src/pcl-object.[ch]: (pcl_object_type)
        New function calls the type() method of PclObjects.

        * src/pcl-object.[ch]: (pcl_object_is_instance)
        New function adds preliminary support for class hierarchies.

        * src/pcl-object.[ch]: (pcl_object_is_subclass)
        New function adds preliminary support for class hierarchies.

        * src/pcl-object.c: (object_get_attr, object_set_attr)
        Use mro_lookup() to look up attribute names.

        * src/pcl-opcode.h:
        Shorten names of arithmetic opcodes (e.g. SUB instead of SUBTRACT).
        Add INPLACE opcodes; one for each BINARY opcode.

        * src/pcl-parser.y:
        Adapt to new arithmetic opcode names.
        Shorten LSHIFT and RSHIFT token names to LSH and RSH.
        augmented_assignment_operator: Use new INPLACE opcodes.

        * src/pcl-property.[ch]:
        New source files implement property descriptors.

        * src/pcl-sequence.[ch]:
        Use glong instead of gint for sequence indicies.
        Add in_place_concat() method to PclSequence interface.
        Add in_place_repeat() method to PclSequence interface.

        * src/pcl-sequence.c:
        Support __add__ and __iadd__ methods.
        Support __mul__, __imul__, and __rmul__ methods.

        * src/pcl-set.[ch]:
        New source files implement sets and frozen sets.

        * src/pcl-singleton.c:
        Remove finalize methods; found a better way (see src/pcl.c).

        * src/pcl-slice.[ch]:
        Use glong instead of gint for sequence indicies.

        * src/pcl-string.c:
        Support __imod__ and __mod__ methods.
        Use glong instead of gint for sequence indicies.

        * src/pcl-symbol-table.c: (symbol_table_predicate)
        predicate foo(), G=n: -- Forgot to process `n'.

        * src/pcl-tuple.[ch]:
        Use glong instead of gint for sequence indicies.

        * src/pcl-type.[ch]:
        Add `mro' and `subclasses' fields to PclType.
        Very preliminary support for user-defined classes.

        * src/pcl-util.[ch]:
        Remove obsolete function pcl_extract_object().
        Remove obsolete function pcl_log_instantiation().

        * src/pcl-util.c: (make_list)
        Fix bug - initializing new list to wrong size.

        * src/pcl-weak-ref.h:
        Define PCL_WEAK_REF_GET_OBJECT() macro.
        Define PCL_WEAK_REF_GET_CALLBACK() macro.

2006-01-25  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support rich comparisons.
        Support string formatting (format % value).

        * src/Makefile.am:
        Add source files: pcl-comparable.[ch]

        * src/pcl.h:
        #include "pcl-comparable.h"
        
        * src/pcl.c: (pcl_finalize)
        Finalize singleton objects after finializing type objects.
        Except type(object); finalize this one dead last.
        XXX This is a workaround for some circular dependencies during
            finalization.  The issue will probably need to be revisited.

        * src/pcl-code.c:
        * src/pcl-dict-proxy.c:
        * src/pcl-int.c:
        * src/pcl-method.c:
        * src/pcl-slice.c:
        * src/pcl-tablerecord.c:
        * src/pcl-type.c:
        Implement PclComparable interface.

        * src/pcl-comparable.[ch]:
        New source files implement the comparable interfaces.

        * src/pcl-complex.c:
        * src/pcl-float.c:
        * src/pcl-list.c:
        * src/pcl-string.c:
        * src/pcl-tuple.c:
        Implement PclRichComparable interface.

        * src/pcl-mod-operator.c:
        Finish the rich comparison operator functions.
        Remove the slice functions (they'll be obsolete in Python 3.0).

        * src/pcl-object.[ch]:
        Remove the compare() method from PclObjectClass.
        Move rich comparison opcodes to pcl-comparable.h.

        * src/pcl-number.c: (pcl_number_remainder)
        Call pcl_string_format() if the first object is a string.

        * src/pcl-singleton.c:
        Issue a debug message when singleton objects are finalized.

        * src/pcl-string.[ch]: (pcl_string_format)
        New function implements string formatting (format % value).

2006-01-23  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        New built-in type: weakref
        PEP 308: Conditional Expressions
        PEP 341: Unifying try-except and try-finally
        Transcribe all relevant changes from Python 2.4.1 to 2.4.2.

        * src/Makefile.am:
        Add source files: pcl-weak-ref.[ch]

        * src/pcl.h:
        #include "pcl-weak-ref.h"

        * src/pcl.c: (pcl_finalize)
        Finalize the weakref type object.

        * src/pcl-args.[ch]: (pcl_arg_no_keywords)
        New function ensures that a keywords dictionary is NULL or empty.

        * src/pcl-args.c: (arg_skip_item)
        Consolidate handling of simple codes.

        * src/pcl-bool.c:
        * src/pcl-complex.h:
        * src/pcl-enumerate.c:
        * src/pcl-float.c:
        * src/pcl-int.c:
        * src/pcl-list.c:
        * src/pcl-object.c:
        * src/pcl-string.c:
        * src/pcl-tuple.c:
        * src/pcl-type.c:
        Cosmetic changes.

        * src/pcl-compile.c: (compile_conditional)
        New function handles PCL_NT_CONDITIONAL nodes (see PEP 308).

        * src/pcl-compile.c: (compile_try_except)
        Support an optional finally clause (see PEP 341).

        * src/pcl-complex.c: (complex_format)
        Slightly more efficient way to format output.

        * src/pcl-error.[ch]: (pcl_error_write_unraisable)
        New function writes a message to stderr without raising an exception.

        * src/pcl-eval.h: (pcl_eval_call_function)
        Pass format as a `const' gchar pointer.

        * src/pcl-import.c: (pcl_import_reload_module)
        Fix reference counting bug.

        * src/pcl-method.[ch]:
        Declare `name' and `doc' fields of PclMethodDef as constant.

        * src/pcl-mod-builtin.c: (builtin_eval)
        Ensure that `globals' and `locals' are not NULL before proceeding.

        * src/pcl-mod-operator.c: (attr_getter_new_instance,
                                   item_getter_new_instance)
        * src/pcl-slice.c: (slice_new_instance)
        Call pcl_arg_no_keywords().

        * src/pcl-node.[ch]:
        Add node type: CONDITIONAL

        * src/pcl-parser.y:
        if_statement: Change `expression' to `or_test'
        predicate_if_statement: Change `expression' to `or_test'
        generator_for_clause: Change `expression' to `or_test_or_tuple'
        generator_if_clause: Change `expression' to `or_test'
        list_for_clause: Change `expression_or_tuple' to `or_test_or_tuple'
        list_if_clause: Change `expression' to `or_test'
        expression: Change `or_test' to `conditional'
        New production: finally_clause ::= KW_FINALLY ':' suite
        Support optional `finally_clause' in `try_statement'.
        Support conditional expressions (lowest precedence).

        * src/pcl-symbol-table.c: (symbol_table_conjunction)
        Remove dead code.

        * src/pcl-type.[ch]:
        Declare `name' field of PclType as constant.
        Remove type_finalize() since we no longer own `self->name'.

        * src/pcl-type.c: (pcl_type_new)
        Do not duplicate string when assigning to `self->name'.

        * src/pcl-weak-ref.[ch]:
        New source files implement weak references.

2006-01-19  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        New PCL standard library module: operator
        New built-in types (via `operator' module): attrgetter, itemgetter

        * src/Makefile.am:
        Add source files: pcl-mod-operator.[ch]

        * src/pcl.h:
        #include "pcl-mod-operator.h"

        * src/pcl.c: (pcl_finalize)
        Finalize the attrgetter type object.
        Finalize the itemgetter type object.

        * src/pcl-eval.c: (pcl_eval_frame)
        PCL_OPCODE_UNARY_NOT: Call pcl_object_not().

        * src/pcl-import.c:
        Add `operator' module to import_init_table.

        * src/pcl-import.c: (import_init_builtin)
        Fix infinite loop bug.

        * src/pcl-mod-operator.[ch]:
        New source file implements the standard library module "operator".
        XXX Slice operations and rich comparisons are not yet working.

        * src/pcl-object.[ch]:
        Remove obsolete pcl_object_from_value().

        * src/pcl-object.[ch]: (pcl_object_not)
        New function returns True if object is logically false.

2006-01-18  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        New built-in type: complex
        Support imaginary integer and float literals.

        * src/Makefile.am:
        Add source files: pcl-complex.[ch]

        * src/pcl.h:
        #include "pcl-complex.h"

        * src/pcl.c: (pcl_finalize)
        Finalize the complex type object.

        * src/pcl-arg.c: (arg_convert_simple, arg_skip_item)
        Support 'D' (complex double) format code.

        * src/pcl-bool.h:
        * src/pcl-cell.h:
        * src/pcl-dict-proxy.h:
        * src/pcl-enumerate.h:
        * src/pcl-exception.h:
        * src/pcl-file.h:
        * src/pcl-float.h:
        * src/pcl-generator.h:
        * src/pcl-hashable.h:
        * src/pcl-int.h:
        * src/pcl-iterator.h:
        * src/pcl-list.h:
        * src/pcl-reversed.h:
        * src/pcl-singleton.h:
        * src/pcl-string.h:
        * src/pcl-table.h:
        * src/pcl-tablerecord.h:
        * src/pcl-traceback.h:
        * src/pcl-tuple.h:
        Cosmetic changes.

        * src/pcl-compile.c:
        Remove GET_NAME() macro (use PCL_NODE_STRING() instead).
        Split compile_const() into:
                compile_float()         (for PCL_NT_FLOAT nodes)
                compile_imaginary()     (for PCL_NT_IMAGINARY nodes)
                compile_integer()       (for PCL_NT_INTEGER nodes)
                compile_string()        (for PCL_NT_STRING nodes)
        Use pcl_xxx_from_string() functions to convert literals to objects.

        * src/pcl-complex.[ch]:
        New source files implement complex numbers.

        * src/pcl-lexer.l: (lexer_process_float, lexer_process_int)
        Let the compiler handle numeric literal strings.
        Create nodes of type FLOAT, IMAGINARY, or INTEGER as appropriate.

        * src/pcl-lexer.l: (lexer_process_name)
        Intern the string and set the PCL_FLAG_INTERNED flag on the node.

        * src/pcl-mod-builtin.c: (_pcl_builtin_init)
        Add complex type object to __builtin__ module.

        * src/pcl-node.[ch]:
        Break PCL_NT_NUMBER into:
                PCL_NT_FLOAT
                PCL_NT_IMAGINARY
                PCL_NT_INTEGER
        Replace GValue field in PclNode with a const gchar pointer.
        Replace PCL_NODE_VALUE() macro with PCL_NODE_STRING().
        Replace PCL_FLAG_IMAG flag with PCL_FLAG_INTERNED.

        * src/pcl-node.c: (pcl_node_copy, pcl_node_destroy)
        Don't copy/destroy string if PCL_FLAG_INTERNED is set.

        * src/pcl-parser.y:
        Adapt to changes in PclNode (see pcl-node.h).
        Remove inlining of unary +/- operations.

        * src/pcl-symbol-table.c:
        Remove GET_NAME() macro (use PCL_NODE_STRING() instead).

        * src/pcl-util.c: (make_value)
        Support 'D' (complex double) format code.

2006-01-17  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.19.1

        * src/pcl-parser.y: (copy_to_disjunct, normalize_conjunction)
        Normalize PCL_NT_IF nodes appropriately.

        * src/pcl-compile.c: (compile_if)
        Process stack values left by conjunctions.

2006-01-17  David R. Crepps  <david.crepps@boeing.com>

        * test/chessboard_pred.pcl:
        * test/chessboard_table_pred.pcl:
        * test/farmer_pred.pcl:
        * test/farmer_table_pred.pcl:
        * test/queens_pred.pcl:
        * test/queens_table_pred.pcl:
        Testing the use of goal variables in predicates.
        
        * test/logic_test.pcl:
        Enabled test for chessboard predicates.

2006-01-16  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.19

        * New feature summary:
        Support an optional goal symbol in predicate definitions.
        Support 'if' statements in predicate conjunctions.
        Support optional third argument in pow() function.

        * src/Makefile.am:
        Add source files: pcl-scope.[ch] pcl-symbol-table.[ch]
        Remove obsolete source files: pcl-symtab.[ch]

        * src/glib-ext.[ch]: (g_intern_string, g_intern_static_string)
        New functions slated for GLib 2.10, implementation is trivial.

        * src/pcl-bool.c:
        Use PclInt's fast access macro.

        * src/pcl-compile.c:
        Integrate new symbol table.
        Rename SCOPE_* definitions to SOURCE_*.
        Rename PCL_NT_ATTR to PCL_NT_ATTRIBUTE.
        Rename compile_attr() to compile_attribute().

        * src/pcl-compile.c: (compile_lookup_index)
        Return zero if dictionary lookup failed.

        * src/pcl-compile.c: (compile_try_finally)
        Make the logic more closely resemble that of compile_try_expect().
        These will soon be merged into a single construct (see PEP 341).

        * src/pcl-compile.c: (compile_top_level_conjunction)
        Remove implicit result accumulation logic.
        Accumulating predicate results is now an explicit task.

        * src/pcl-compile.c: (compile_top_level_predicate)
        Support an explicit goal variable in the predicate definition.
        If a goal variable was not specified, return a boolean.

        * src/pcl-eval.c: (pcl_eval_frame)
        PCL_OPCODE_MAKE_CLOSURE: Use PCL_CODE_GET_NUM_FREE() macro.

        * src/pcl-float.[ch]:
        Inherit directly from PclObject (PclValue is obsolete).
        Define macro for accessing gdouble value.

        * src/pcl-float.c: (convert_to_double)
        New function promotes a PclInt to PclFloat.
        Returns NotImplemented if it doesn't recognize object type.

        * src/pcl-int.[ch]:
        Inherit directly from PclObject (PclValue is obsolete).
        Define macro for accessing glong value.
        Use Python's numerical algorithms.

        * src/pcl-node.[ch]:
        Rename PCL_NT_ATTR to PCL_NT_ATTRIBUTE.

        * src/pcl-node.c: (pcl_node_contents)
        More efficient implementation.

        * src/pcl-number.[ch]:
        Add third argument to pow() method (can be None).
        Remove the coerce() method.
        PclNumber now implements its own PclMethods.
        Overhaul wrapper logic to more closely resemble Python.

        * src/pcl-parser.y:
        Restructure productions to eliminate most "opt" productions.
        New production: predicate_goal ::= NAME '=' expression_or_tuple
        Add optional `predicate_goal' to `predicate_definition'.
        Add productions to support 'if' statements in conjunctions.
        Rename PCL_NT_ATTR to PCL_NT_ATTRIBUTE.

        * src/pcl-run.c: (run_parse_tree)
        Only call pcl_parse_info_display() if PCL_OPTION_DEBUG flag is set.

        * src/pcl-scope.[ch]:
        New source files implement symbol scopes.

        * src/pcl-string.[ch]:
        Inherit directly from PclObject (PclValue is obsolete).
        Define macros for accessing char-array and length.

        * src/pcl-string.[ch]: (pcl_string_resize)
        Change return type from void to gboolean.

        * src/pcl-string.[ch]: (pcl_string_concat, pcl_string_concat_and_del)
        Change return type from void to gboolean.

        * src/pcl-string.c: (string_compare)
        Check if pointers are equal before calling g_string_compare().

        * src/pcl-symbol-table.[ch]:
        New symbol table implementation uses GLib data structures directly.
        Symbol tables are not objects and can't be inspected at run-time.

2006-01-09  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/Makefile.am:
        Remove source files: pcl-value.[ch]

        * src/pcl.h:
        Remove: #include "pcl-value.h"

        * src/pcl.c: (pcl_true, pcl_false)
        Update initialization of boolean value.

        * src/pcl-eval.c: (pcl_eval_frame)
        PCL_OPCODE_BINARY_ADD: Always call pcl_number_add().
        PCL_OPCODE_BINARY_MULTIPLY: Always call pcl_number_multiply().
        PCL_OPCODE_BINARY_POWER: Call pcl_number_power(v, w, PCL_NONE).

        * src/pcl-list.[ch]:
        No need for PclListClass to define methods for list operations.

        * src/pcl-mod-builtin.c: (builtin_pow)
        Accept an optional third argument 'z'.

        * src/pcl-parser.y: (copy_to_disjunct)
        Recurse if last child of conjunction is a for-loop.

        * src/pcl-object.c: (pcl_object_compare)
        When arguments are both numbers, manually convert them to floats.
        XXX This is a temporary kludge.

        * src/pcl-sequence.[ch]:
        Cosmetic changes.

2006-01-05  David R. Crepps  <david.crepps@boeing.com>

        * test/test.pcl:
        Added test for simple operations.
        
        * test/simple_ops_test.pcl:
        New simple operations test suite.
        
        * test/list_method_test.pcl:
        Removed commented-out test for insert.

2006-01-05  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Accept syntax for user-defined classes.
        Readable __bases__ attribute in type objects.

        * src/pcl-compile.c: (compile_class)
        New function handles PCL_NT_CLASS nodes.
        
        * src/pcl-compile.c: (compile_top_level_class)
        New function handles PCL_NT_CLASS nodes as a function call.

        * src/pcl-compile.c: (compile_resolve_free)
        Isolate PCL_DEF_FREE_CLASS flag when testing for free variables.

        * src/pcl-compile.c: (compile_load_symbols)
        Handle class scopes properly.

        * src/pcl-eval.c: (eval_build_class)
        New function constructs a new user-defined class object.
        
        * src/pcl-eval.c: (pcl_eval_frame)
        Handle new opcodes (see src/pcl-opcode.h).

        * src/pcl-lexer.l:
        New keyword: `class'
        Fix line number bug.

        * src/pcl-list.c:
        Remove list_method_reversed(), at least for now.

        * src/pcl-list.c: (pcl_list_set_slice)
        Fix slice assignment bug.

        * src/pcl-method.c: (pcl_method_get_type_object)
        Change type object name to `builtin_function_or_method'.

        * src/pcl-node.[ch]:
        Add node type: CLASS
        Remove obsolete node type: WILDCARD

        * src/pcl-opcode.h:
        New opcodes: PCL_OPCODE_LOAD_LOCALS
                     PCL_OPCODE_BUILD_CLASS

        * src/pcl-parser.y:
        Define new keyword token: KW_CLASS
        Add productions to support class definitions.
        New production: compound_statement ::= class_definition

        * src/pcl-symtab.h:
        Define PCL_DEF_FREE_CLASS flag.

        * src/pcl-symtab.c: (symtab_node)
        Handle PCL_NT_CLASS nodes.

        * src/pcl-symtab.c: (symtab_check_global, symtab_update_free_vars)
        Handle class scopes (ste->type == PCL_NT_CLASS).

        * src/pcl-tuple.c: (tuple_print, tuple_repr)
        Print trailing comma for single valued tuples.

        * src/pcl-type.[ch]:
        Add `bases' field to PclType.

        * src/pcl-type.c: (type_new_instance)
        Preliminary support for type(name, bases, dict).

        * src/pcl-type.c: (type_get_bases)
        Return the `bases' field of the type object.

        * src/pcl-type.c: (pcl_type_new)
        Initialize __bases__ to () for PclObject's type object.
        Initialize __bases__ to (<type 'object'>,) for all other types.

2006-01-05  David R. Crepps  <david.crepps@boeing.com>

        * test/string_method_test.pcl:
        Enabled test within expandtabs test.
        
        * test/test.pcl:
        Reorganized test structure for modularity.
        Added test suite for the logic puzzles.
        
        * test/logic_test.pcl:
        * test/method_test.pcl:
        New test suite file.
        
        * test/chessboard.pcl:
        * test/chessboard_table.pcl:
        * test/chessboard_table_pred.pcl:
        * test/chessboard_pred.pcl:
        * test/farmer.pcl:
        * test/farmer_table.pcl:
        * test/farmer_table_pred.pcl:
        * test/farmer_pred.pcl:
        * test/queens.pcl:
        * test/queens_table.pcl:
        * test/queens_table_pred.pcl:
        * test/queens_pred.pcl:
        New logic puzzle test file.
        
        * src/pcl-table.c:
        * src/pcl-tablerecord.[ch]:
        Removed reference cycle to owner table within tablerecord.

2006-01-03  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/Makefile.am:
        New source files: pcl-container.[ch] pcl-subscriptable.[ch]

        * src/pcl.h:
        #include "pcl-container.h"
        #include "pcl-subscriptable.h"

        * src/pcl-callable.[ch]:
        Remove definition for PclCallable.
        Interface methods now pass PclObject instead.

        * src/pcl-callable.c: (pcl_object_call)
        Restructure logic so that type check is performed once.

        * src/pcl-callable.c: (callable_iterator_traverse)
        * src/pcl-cell.c: (cell_traverse)
        * src/pcl-code.c: (code_traverse)
        * src/pcl-descr.c: (descr_traverse)
        * src/pcl-dict.c: (dict_traverse)
        * src/pcl-dict-proxy.c: (dict_proxy_traverse)
        * src/pcl-enumerate.c: (enumerate_traverse)
        * src/pcl-file.c: (file_traverse)
        * src/pcl-frame.c: (frame_traverse)
        * src/pcl-function.c: (function_traverse)
        * src/pcl-generator.c: (generator_traverse)
        * src/pcl-list.c: (list_traverse)
        * src/pcl-method.c: (method_traverse)
        * src/pcl-module.c: (module_traverse)
        * src/pcl-reversed.c: (reversed_traverse)
        * src/pcl-sequence.c: (sequence_iterator_traverse)
        * src/pcl-slice.c: (slice_traverse)
        * src/pcl-symtab.c: (symtab_entry_traverse)
        * src/pcl-table.c: (table_traverse)
        * src/pcl-tablerecord.c: (tablerecord_traverse)
        * src/pcl-traceback.c: (traceback_traverse)
        * src/pcl-tuple.c: (tuple_traverse)
        * src/pcl-type.c: (type_traverse)
        New function implements PclContainer's traverse() method.

        * src/pcl-callable.c: (callable_iterator_class_init)
        * src/pcl-cell.c: (cell_class_init)
        * src/pcl-dict.c: (dict_class_init)
        * src/pcl-dict-proxy.c: (dict_proxy_class_init)
        * src/pcl-descr.c: (descr_class_init)
        * src/pcl-descr.c: (getset_descr_class_init)
        * src/pcl-descr.c: (member_descr_class_init)
        * src/pcl-descr.c: (method_descr_class_init)
        * src/pcl-dict-proxy.c: (dict_proxy_class_init)
        * src/pcl-enumerate.c: (enumerate_class_init)
        * src/pcl-exception.c: (exception_class_init)
        * src/pcl-file.c: (file_class_init)
        * src/pcl-frame.c: (frame_class_init)
        * src/pcl-function.c: (function_class_init)
        * src/pcl-generator.c: (generator_class_init)
        * src/pcl-list.c: (list_class_init)
        * src/pcl-list.c: (list_class_init)
        * src/pcl-method.c: (method_class_init)
        * src/pcl-module.c: (module_class_init)
        * src/pcl-reversed.c: (reversed_class_init)
        * src/pcl-sequence.c: (sequence_iterator_class_init)
        * src/pcl-slice.c: (slice_class_init)
        * src/pcl-symtab.c: (symtab_entry_class_init)
        * src/pcl-table.c: (table_class_init)
        * src/pcl-tablerecord.c: (tablerecord_class_init)
        * src/pcl-traceback.c: (traceback_class_init)
        * src/pcl-tuple.c: (tuple_class_init)
        * src/pcl-type.c: (type_class_init)
        * src/pcl-value.c: (value_class_init)
        Cosmetic changes.

        * src/pcl-cell.[ch]:
        PclCellClass inherits from PclContainerClass.
        PclCellClass is no longer derived from PclValueClass.

        * src/pcl-cell.c: (cell_clone)
        New function implements PclObject's clone() method.
        Replaces cell_deep().

        * src/pcl-code.[ch]:
        PclCodeClass inherits from PclContainerClass.
        Rename flags to be more compliant with GLib naming conventions.

        * src/pcl-code.c: (pcl_code_new)
        Rename PCL_CODE_NOFREE flag to PCL_CODE_FLAG_NOFREE.

        * src/pcl-compile.c: (compile_call)
        Fix stack prediction bug.

        * src/pcl-compile.c: (compile_expression, compile_for)
        Rename PCL_CODE_CONJUNCTION flag to PCL_CODE_FLAG_CONJUNCTION.

        * src/pcl-compile.c: (compile_return)
        Rename PCL_CODE_GENERATOR flag to PCL_CODE_FLAG_GENERATOR.

        * src/pcl-compile.c: (compile_top_level_conjunction)
        Rename PCL_CODE_CONJUNCTION flag to PCL_CODE_FLAG_CONJUNCTION.

        * src/pcl-compile.c: (compile_top_level_predicate)
        Rename PCL_CODE_PREDICATE flag to PCL_CODE_FLAG_PREDICATE.

        * src/pcl-compile.c: (compile_update_flags)
        Rename PCL_CODE_GENERATOR flag to PCL_CODE_FLAG_GENERATOR.
        Rename PCL_CODE_NEWLOCALS flag to PCL_CODE_FLAG_NEWLOCALS.

        * src/pcl-compile.c: (compile_load_symbols)
        Rename PCL_CODE_VARARGS flag to PCL_CODE_FLAG_VARARGS.
        Rename PCL_CODE_VARKEYWORDS flag to PCL_CODE_FLAG_VARKWDS.

        * src/pcl-container.[ch]:
        New source files implement an abstract base for "container" classes.

        * src/pcl-descr.[ch]:
        PclDescrClass inherits from PclContainerClass.

        * src/pcl-dict.h:
        Implement PclSubscriptable interface.
        PclDictClass inherits from PclContainerClass.
        PclMapping now implements all the standard PclMethods for us!

        * src/pcl-dict.c: (dict_clone)
        New function implements PclObject's clone() method.
        Replaces dict_deep().

        * src/pcl-dict.c: (dict_subscriptable_get_item)
        New function implements PclSubscriptable's get_item() method.

        * src/pcl-dict.c: (dict_subscriptable_set_item)
        New function implements PclSubscriptable's set_item() method.

        * src/pcl-dict-proxy.[ch]:
        Implement PclSubscriptable interface.
        PclDictProxyClass inherits from PclContainerClass.
        PclMapping now implements all the standard PclMethods for us!

        * src/pcl-dict-proxy.c: (dict_proxy_subscriptable_get_item)
        New function implements PclSubscriptable's get_item() method.

        * src/pcl-error.c: (pcl_error_display)
        Rename PCL_PRINT_RAW flag to PCL_PRINT_FLAG_RAW.

        * src/pcl-eval.c: (eval_fast_function)
        Rename PCL_CODE_NEWLOCALS flag to PCL_CODE_FLAG_NEWLOCALS.
        Rename PCL_CODE_NOFREE flag to PCL_CODE_FLAG_NOFREE.

        * src/pcl-eval.c: (pcl_eval_frame)
        Don't initialize `retval', even when in a predicate.
        PCL_OPCODE_CONJUNCT: When TOS is None, replace with True.
        Rename PCL_PRINT_RAW flag to PCL_PRINT_FLAG_RAW.

        * src/pcl-eval.c: (pcl_eval_code_ex)
        Rename PCL_CODE_VARARGS flag to PCL_CODE_FLAG_VARARGS.
        Rename PCL_CODE_VARKEYWORDS flag to PCL_CODE_FLAG_VARKWDS.
        Rename PCL_CODE_GENERATOR flag to PCL_CODE_FLAG_GENERATOR.

        * src/pcl-file.[ch]:
        PclFileClass inherits from PclContainerClass.

        * src/pcl-float.c: (float_print)
        Rename PCL_PRINT_RAW flag to PCL_PRINT_FLAG_RAW.

        * src/pcl-frame.[ch]:
        PclFrameClass inherits from PclContainerClass.

        * src/pcl-frame.c: (frame_dispose)
        Dispose stack up to frame->tos.

        * src/pcl-frame.c: (pcl_frame_new)
        Rename PCL_CODE_PREDICATE flag to PCL_CODE_FLAG_PREDICATE.
        Rename PCL_CODE_CONJUNCTION flag to PCL_CODE_FLAG_CONJUNCTION.

        * src/pcl-function.[ch]:
        PclFunctionClass inherits from PclContainerClass.

        * src/pcl-function.c: (function_clone)
        New function implements PclObject's clone() method.
        Replaces function_deep().

        * src/pcl-hashable.[ch]:
        Remove definition for PclHashable.
        Interface methods now pass PclObject instead.

        * src/pcl-hashable.c: (pcl_object_hash)
        Restructure logic so that type check is performed once.

        * src/pcl-import.c: (import_ensure_fromlist)
        Restructure logic to use an iterator rather than a for-loop.

        * src/pcl-iterable.[ch]:
        Remove definition for PclIterable.
        Interface methods now pass PclObject instead.

        * src/pcl-iterable.c: (iterable_method_iter)
        Just call pcl_object_iterate().

        * src/pcl-iterable.c: (pcl_object_contains, pcl_object_iterate)
        Restructure logic so that type check is performed once.

        * src/pcl-iterator.[ch]:
        PclIteratorClass inherits from PclContainerClass.

        * src/pcl-list.[ch]:
        Implement PclSubscriptable interface.
        Remove implementation of PclMutableSequence interface.
        PclListClass inherits from PclContainerClass.

        * src/pcl-list.c: (list_clone)
        New function implements PclObject's clone() method.
        Replaces list_deep().

        * src/pcl-list.c: (list_subscriptable_get_item)
        New function implements PclSubscriptable's get_item() method.
        Replaces list_sequence_get_item() and list_sequence_get_slice().

        * src/pcl-list.c: (list_subscriptable_set_item)
        New function implements PclSubscriptable's set_item() method.
        Replaces list_mutable_sequence_set_item() and
                list_mutable_sequence_set_slice().

        * src/pcl-mapping.[ch]:
        Remove definition for PclMapping.
        Interface methods now pass PclObject instead.
        Add clear() and select() methods to PclMapping.
        Remove PclMapping's get_item(), get_item_string(), set_item(), and
                set_item_string() methods.
        PclMapping now implements its own PclMethods.

        * src/pcl-mapping.c: (pcl_mapping_get_type)
        Require PclSubscriptable interface.

        * src/pcl-mapping.c: (pcl_mapping_keys,
                              pcl_mapping_values,
                              pcl_mapping_items)
        Restructure logic so that type check is performed once.

        * src/pcl-mapping.[ch]: (pcl_mapping_merge)
        New function implements merge algorithm for any iterable object.

        * src/pcl-measurable.[ch]:
        Remove definition for PclMeasurable.
        Interface methods now pass PclObject instead.

        * src/pcl-measurable.c: (pcl_object_measure)
        Restructure logic so that type check is performed once.

        * src/pcl-method.[ch]:
        PclMethodClass inherits from PclContainerClass.
        Define PCL_METHOD_FLAG_MUTABLE.

        * src/pcl-method.c: (method_callable_call)
        Add PCL_METHOD_FLAG_MUTABLE to bit mask.

        * src/pcl-module.[ch]:
        PclModuleClass inherits from PclContainerClass.

        * src/pcl-mod-builtin.c: (builtin_clone)
        New function implements the built-in method clone().

        * src/pcl-mod-builtin.c: (builtin_hex, builtin_oct)
        Just call pcl_number_hex() or pcl_number_oct().

        * src/pcl-number.[ch]:
        Remove definition for PclNumber.
        Interface methods now pass PclObject instead.
        Remove function signature type definitions.

        * src/pcl-number.c: (pcl_number_as_int,
                             pcl_number_as_float,
                             pcl_number_oct,
                             pcl_number_hex,
                             pcl_number_add,
                             pcl_number_subtract,
                             pcl_number_multiply,
                             pcl_number_divide,
                             pcl_number_divmod,
                             pcl_number_remainder,
                             pcl_number_power,
                             pcl_number_negative,
                             pcl_number_positive,
                             pcl_number_absolute,
                             pcl_number_bitwise_or,
                             pcl_number_bitwise_xor,
                             pcl_number_bitwise_and,
                             pcl_number_bitwise_lshift,
                             pcl_number_bitwise_rshift,
                             pcl_number_bitwise_invert,
                             pcl_number_nonzero,
                             pcl_number_coerce)
        Restructure logic so that type check is performed once.

        * src/pcl-object.[ch]:
        Add `is_mutable' field to PclObjectClass.
        Rename PclObject's deep() method to clone().
        Remove PclObject's del_item(), get_item(), and set_item() methods.
        Rename PCL_PRINT_RAW flag to PCL_PRINT_FLAG_RAW.

        * src/pcl-object.c: (object_merge_class_dict)
        Call pcl_mapping_update() instead of pcl_dict_update().
        Restructure logic to use an iterator rather than a for-loop.

        * src/pcl-sequence.[ch]:
        Remove definition for PclSequence.
        Interface methods now pass PclObject instead.
        Remove PclSequence's get_item() and get_slice() methods.
        Remove PclMutableSequence interface (obsolete).

        * src/pcl-sequence.c: (pcl_sequence_get_type)
        Require PclSubscriptable interface.

        * src/pcl-sequence.c: (pcl_sequence_concat,
                               pcl_sequence_repeat,
                               pcl_sequence_as_list,
                               pcl_sequence_as_tuple)
        Restructure logic so that type check is performed once.

        * src/pcl-sequence.c: (pcl_sequence_get_item)
        Klunky wrapper for PclSubscriptable's get_item() method.  (temporary)

        * src/pcl-slice.[ch]:
        PclSliceClass inherits from PclContainerClass.

        * src/pcl-string.c:
        Implement PclSubscriptable interface.

        * src/pcl-string.c: (string_print)
        Rename PCL_PRINT_RAW flag to PCL_PRINT_FLAG_RAW.

        * src/pcl-string.c: (string_subscriptable_get_item)
        New function implements PclSubscriptable's get_item() method.
        Replaces string_sequence_get_item() and string_sequence_get_slice().

        * src/pcl-subscriptable.[ch]:
        New source files implement the subscriptable interface.

        * src/pcl-symtab.[ch]:
        PclSymtabEntryClass inherits from PclContainerClass.

        * src/pcl-symtab.c: (symtab_update_free_vars)
        Add fix so that name assignments to static variables work properly.

        * src/pcl-table.[ch]:
        PclTableClass inherits from PclContainerClass.

        * src/pcl-table.c: (table_clone)
        New function implements PclObject's clone() method.
        Replaces table_deep().

        * src/pcl-table.c: (table_print)
        Rename PCL_PRINT_RAW flag to PCL_PRINT_FLAG_RAW.

        * src/pcl-tablerecord.[ch]:
        Implement PclSubscriptable interface.
        Remove implementation of PclMapping interface.
        PclTableRecordClass inherits from PclContainerClass.

        * src/pcl-tablerecord.c: (tablerecord_clone)
        New function implements PclObject's clone() method.
        Replaces tablerecord_deep().

        * src/pcl-tablerecord.c: (tablerecord_subscriptable_get_item)
        New function implements PclSubscriptable's get_item() method.

        * src/pcl-traceback.[ch]:
        PclTracebackClass inherits from PclContainerClass.

        * src/pcl-tuple.[ch]:
        Implement PclSubscriptable interface.
        PclTupleClass inherits from PclContainerClass.

        * src/pcl-tuple.c: (tuple_clone)
        New function implements PclObject's clone() method.
        Replaces tuple_deep().

        * src/pcl-tuple.c: (tuple_subscriptable_get_item)
        New function implements PclSubscriptable's get_item() method.

        * src/pcl-type.[ch]:
        PclTypeClass inherits from PclContainerClass.

        * src/pcl-type.c: (type_add_getsets, type_add_members)
        Fix infinite loop when name already exists in type.__dict__.

        * src/pcl-type.c: (type_add_methods)
        If MUTABLE flag is set, only add method if type is mutable.

        * src/pcl-util.c: (pcl_find_file)
        Restructure logic to use an iterator rather than a for-loop.

2005-12-21  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.18

2005-12-21  David R. Crepps  <david.crepps@boeing.com>

        * src/pcl.c:
        Fixed typo on pcl_tablerecord_get_type_object.
        Added whitespace to reference tracking log.
        
        * src/pcl-dict.c:
        Destruction of dictionaries now send values to the garbage collector.
        
        * src/pcl-eval.c:
        Added garbage collection to fast locals slots.
        
        * src/pcl-frame.c:
        Removed some gc from frame_dispose, since all dicts now handle it.
        
        * src/pcl-error.c:    (pcl_error_display)
        * src/pcl-function.c: (function_dispose
                               pcl_function_new)
        * src/pcl-list.c:     (list_method_pop
                               list_method_remove
                               pcl_list_set_item)
        * src/pcl-tuple.c:    (pcl_tuple_set_item)
        Fixed reference errors.
        
        * src/pcl-mod-gc.[ch]:
        Added function pcl_gc_object_unref.
        gc_enabled defaults to FALSE

2005-12-20  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl.c:
        Streamline backtrace logging.

        * src/pcl-callable.c: (callable_iterator_dispose)
        * src/pcl-code.c: (code_dispose)
        * src/pcl-descr.c: (descr_dispose)
        * src/pcl-dict.c: (dict_dispose)
        * src/pcl-dict-proxy.c: (dict_proxy_dispose)
        * src/pcl-enumerate.c: (enumerate_dispose)
        * src/pcl-file.c: (file_dispose)
        * src/pcl-frame.c: (frame_dispose)
        * src/pcl-function.c: (function_dispose)
        * src/pcl-generator.c: (generator_dispose)
        * src/pcl-list.c: (list_dispose)
        * src/pcl-method.c: (method_dispose)
        * src/pcl-module.c: (module_dispose)
        * src/pcl-reversed.c: (reversed_dispose)
        * src/pcl-sequence.c: (sequence_iterator_dispose)
        * src/pcl-slice.c: (slice_dispose)
        * src/pcl-symtab.c: (symtab_entry_dispose)
        * src/pcl-table.c: (table_dispose)
        * src/pcl-tablerecord.c: (tablerecord_dispose)
        * src/pcl-traceback.c: (traceback_dispose)
        * src/pcl-tuple.c: (tuple_dispose)
        * src/pcl-type.c: (type_dispose)
        New function implements GObject's dispose() method.
        Either replaces or complements the finalize() method.
        Purpose is to drop all references to other objects.

        * src/pcl-code.[ch]:
        Replace pcl_code_get_num_free() with a macro.
        Define PCL_CODE_CONJUNCTION flag.

        * src/pcl-compile.c:
        New macro GET_NAME() extracts string value from a GNode.
        Remove `in_predicate' field from PclCompileState struct.
        Replace pcl_code_get_num_free() with a macro.

        * src/pcl-compile.c: (compile_add_variable)
        Accept a gchar pointer rather than a GNode pointer.
        Use SCOPE_LOCAL for PCL_NT_CONJUNCTION nodes.

        * src/pcl-compile.c: (compile_conjunction)
        Rewrite logic to treat conjunctions as a function definition + call.

        * src/pcl-compile.c: (compile_cut)
        Rewrite logic to use new opcodes.

        * src/pcl-compile.c: (compile_disjunction)
        Add a dizzying number of ROTATE opcodes to handle conjunction results.

        * src/pcl-compile.c: (compile_for)
        Rewrite logic to use new opcodes.

        * src/pcl-compile.c: (compile_try_finally)
        Fix stack prediction bug.

        * src/pcl-compile.c: (compile_top_level_conjunction)
        New function handles PCL_NT_CONJUNCTION nodes as a function call.

        * src/pcl-compile.c: (compile_top_level_predicate)
        Rewrite logic to use new opcodes.

        * src/pcl-compile.c: (compile_resolve_free)
        Use cs->cellvars dictionary for PCL_NT_CONJUNCTION nodes.

        * src/pcl-compile.c: (compile_update_flags)
        Update cs->variable_count for PCL_NT_CONJUNCTION nodes.

        * src/pcl-compile.c: (pcl_compile_ast)
        Issue warning if predicted stack level is non-zero after compilation.

        * src/pcl-descr.c:
        Rename macro DESCR_TYPE_NAME() to DESCR_GET_TYPE_NAME().

        * src/pcl-descr.c: (descr_new)
        Reestablish the reference cycle and let the GC deal with it.

        * src/pcl-eval.c: (eval_exec)
        Replace pcl_code_get_num_free() with a macro.

        * src/pcl-eval.c: (pcl_eval_frame)
        Handle new opcodes (see src/pcl-opcode.h).

        * src/pcl-frame.[ch]:
        Add `result' field to PclFrame.
        Remove fork() method from PclFrameClass.

        * src/pcl-frame.c: (pcl_frame_new)
        Handle PCL_CODE_CONJUNCTION code objects appropriately.
        Initialize `result' field for PCL_CODE_PREDICATE code objects.

        * src/pcl-lexer.l:
        Handle input files with only whitespace.

        * src/pcl-mod-builtin.c: (_pcl_builtin_init)
        * src/pcl-mod-exceptions.c: (_pcl_exceptions_init)
        * src/pcl-mod-gc.c: (_pcl_gc_init)
        * src/pcl-mod-math.c: (_pcl_math_init)
        * src/pcl-mod-sys.c: (_pcl_sys_init)
        Pass a docstring to pcl_module_init().

        * src/pcl-mod-builtin.c: (builtin_eval)
        Replace pcl_code_get_num_free() with a macro.

        * src/pcl-module.[ch]: (pcl_module_init)
        New `doc' parameter gets saved in module as `module.__doc__'.

        * src/pcl-opcode.h:
        New opcodes:
                PCL_OPCODE_LOAD_CUT
                PCL_OPCODE_STORE_CUT
                PCL_OPCODE_LOAD_RESULT
        Remove obsolete opcodes:
                PCL_OPCODE_CUT
                PCL_OPCODE_FORK_FRAME
                PCL_OPCODE_RECORD_RESULT
                PCL_OPCODE_RETURN_RESULT

        * src/pcl-parser.y:
        New production: simple_predicate_statement ::= static_statement

        * src/pcl-symtab.h:
        Define PCL_STATIC flag.

        * src/pcl-symtab.c: (symtab_conjunction)
        New function handles PCL_NT_CONJUNCTION nodes.

        * src/pcl-symtab.c: (symtab_function)
        For PCL_NT_PREDICATE nodes, embed arg names in child conjunctions.

        * src/pcl-symtab.c: (symtab_inherit_scope)
        New function inherits parent scope, mutating flags as necessary.

        * src/pcl-symtab.c: (symtab_entry_new)
        PCL_NT_CONJUNCTION nodes should inherit their parent scope.

        * src/pcl-symtab.c: (symtab_undo_free)
        Fix logic error for when name is not defined in scope.

        * src/pcl-tablerecord.[ch]:
        Cosmetic change to macro names.

2005-12-19  David R. Crepps  <david.crepps@boeing.com>

        * New feature summary:
        Added the gc module for collecting ghost memory.  (Lists only)
        
        * src/Makefile.am:
        Added pcl-mod-gc.[ch] to file list.
        
        * src/pcl.[ch]:
        Added calls for _pcl_gc_init and _pcl_gc_finalize, and included header.
        
        * src/pcl-frame.c:
        Added calls to pcl_gc_process and pcl_gc_check in frame_finalize.
        Added frame_object_list_insert and frame_symbol_objects for finalize.
        
        * src/pcl-list.c:
        Added class funtions dispose and self_refs for garbage collection.
        
        * src/pcl-object.h:
        Added class function self_refs, and temporary bool flag dispose_has_run.
        
        * src/pcl-mod-gc.[ch]:
        New builtin module for garbage collection.  Based off Python's gc mod.

2005-12-16  David R. Crepps  <david.crepps@boeing.com>

        * src/pcl-compile.c:
        Changed g_object_unref to pcl_object_unref

2005-12-14  David R. Crepps  <david.crepps@boeing.com>

        * src/pcl.c:
        Added extra reference cleanup for type objects and imports.
        Added line and file info to invalid unrefs.
        
        * src/pcl-import.[ch]:
        Added function pcl_import_cleanup() to finalize some static pointers.
        
        * src/pcl-table.c:
        Changed insert, update, and delete methods to return PCL_NONE.
        Changed iterator to iterate over the records, not the keys.

2005-12-13  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        PCL now requires Autoconf 2.54 or higher.

        * configure.ac:
        Require Autoconf 2.54 or higher.
        Uncomment AC_GNU_SOURCE macro.

        * src/.gdbinit:
        New GDB initialization file defines commands gtrap and gtrace.

        * src/Makefile.am:
        EXTRA_DIST = .gdbinit

        * src/pcl.c:
        Only enable backtrace logging when PCL_DEBUG_FILE is non-empty.

        * src/pcl-compile.c:
        Fix some reference leaks.
        Add preliminary hooks for static statements.
        Cosmetic changes.

        * src/pcl-dict.c:
        * src/pcl-list.c:
        Method cleanups.

        * src/pcl-hashable.c: (pcl_object_hash)
        Give a more descriptive error message if the object is unhashable.

        * src/pcl-lexer.l:
        New keyword: `static'
        Use libreadline if available.

        * src/pcl-mod-builtin.c: (builtin_hash)
        Let pcl_object_hash() complain if the object is unhashable.

        * src/pcl-node.[ch]:
        Add node type: STATIC

        * src/pcl-parser.y:
        Define new keyword token: KW_STATIC
        New production: expression_or_tuple ::= expression_list opt_comma
        New production: target_or_tuple ::= target_list opt_comma
        New productions eliminate the need for expression_or_tuple().
        Add productions to support static statements.

        * src/pcl-symtab.[ch]:
        Add PCL_DEF_STATIC flag.
        Cosmetic changes.

        * src/pcl-symtab.c: (symtab_function)
        Don't embed a name in the suite node since we're not using it.

        * src/pcl-symtab.c: (symtab_static)
        New function handles PCL_NT_STATIC (preliminary).

2005-12-09  David R. Crepps  <david.crepps@boeing.com>

        * src/pcl-mod-sys.c:
        Fixed memory leak in pcl_sys_set_path().
        
        * src/pcl-dict.c:
        Fixed dereferencing error in dict_any_item_helper().
        
        * test/dict_method_test.pcl:
        Completed regression tests for all dict methods.

2005-12-07  David R. Crepps  <david.crepps@boeing.com>

        * New feature summary:
        New debugging tool gives detailed report on stale memory refs.
        
        * configure.ac:
        Temporarily commented out AC_GNU_SOURCE.
        Must be changed in pcl.c when re-enabled
        
        * src/pcl-arg.c:
        * src/pcl-bool.c:
        * src/pcl-callable.c:
        * src/pcl-cell.c:
        * src/pcl-code.c:
        * src/pcl-compile.c:
        * src/pcl-descr.c:
        * src/pcl-dict.c:
        * src/pcl-dict-proxy.c:
        * src/pcl-enumerate.c:
        * src/pcl-error.c:
        * src/pcl-eval.c:
        * src/pcl-exception.c:
        * src/pcl-file.c:
        * src/pcl-float.c:
        * src/pcl-frame.c:
        * src/pcl-function.c:
        * src/pcl-generator.c:
        * src/pcl-import.c:
        * src/pcl-int.c:
        * src/pcl-iterable.c:
        * src/pcl-iterator.c:
        * src/pcl-lexer.l:
        * src/pcl-list.c:
        * src/pcl-member.c:
        * src/pcl-method.c:
        * src/pcl-mod-builtin.c:
        * src/pcl-mod-exceptions.c:
        * src/pcl-mod-sys.c:
        * src/pcl-module.c:
        * src/pcl-number.c:
        * src/pcl-object.c:
        * src/pcl-reversed.c:
        * src/pcl-run.c:
        * src/pcl-sequence.c:
        * src/pcl-slice.c:
        * src/pcl-state.c:
        * src/pcl-string.c:
        * src/pcl-symtab.c:
        * src/pcl-table.c:
        * src/pcl-tablerecord.c:
        * src/pcl-traceback.c:
        * src/pcl-tuple.c:
        * src/pcl-type.c:
        * src/pcl-util.c:
        Changed g_object_new -> pcl_object_new.
        Changed g_object_ref -> pcl_object_ref.
        Changed g_object_unref -> pcl_object_unref.
        Fixed observed memory leaks as necessary.
        
        * src/pcl.[ch]:
        Added pcl_object_new.
        Converted g_object_* functions to pcl_object_*.
        Modified the stale reference dump to be more useful.

2005-12-06  David R. Crepps  <david.crepps@boeing.com>

        * src/pcl.[ch]:
        Created debugging pcl_object_ref and pcl_object_unref.
        Added storage and dump of reference info when G_ENABLE_DEBUG is set.
        Added debug output to file pointed by env var PCL_DEBUG_FILE.
        
2005-12-06  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl.c: (pcl_finalize)
        Break a reference cycle between `sys' and `sys.modules'.

        * src/pcl-descr.c: (descr_new)
        Break a reference cycle between type->dict and descr->type.

        * src/pcl-import.c: (pcl_import)
        Add a FIXME comment about a leaking reference.

2005-12-05  David R. Crepps  <david.crepps@boeing.com>

        * src/pcl-string.c:
        Added method functions.  Fully tested.
        
        * test/string_method_test.pcl:
        Filled in tests for all the methods.

2005-12-05  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Sibling cuts can appear anywhere in a conjunction; their effect is
                immediate, even if the whole conjunction is not satisfied.
        Built-in types inherit static attributes from their base classes and
                from any interfaces they implement.
        The built-in function dir() can be called on any object.

        * src/pcl.c: (pcl_finalize)
        Remove call to pcl_wrapper_descr_get_type_object().

        * src/pcl-arg.c: (arg_convert_simple)
        Add format codes: 'c' (char) and 'S' (string object)

        * src/pcl-bool.h:
        * src/pcl-callable.h:
        * src/pcl-cell.h:
        * src/pcl-code.h:
        * src/pcl-descr.h:
        * src/pcl-dict.h:
        * src/pcl-dict-proxy.h:
        * src/pcl-enumerate.h:
        * src/pcl-exception.h:
        * src/pcl-file.h:
        * src/pcl-float.h:
        * src/pcl-frame.h:
        * src/pcl-function.h:
        * src/pcl-generator.h:
        * src/pcl-int.h:
        * src/pcl-iterator.h:
        * src/pcl-list.h:
        * src/pcl-method.h:
        * src/pcl-module.h:
        * src/pcl-object.h:
        * src/pcl-reversed.h:
        * src/pcl-sequence.h:
        * src/pcl-singleton.h:
        * src/pcl-slice.h:
        * src/pcl-string.h:
        * src/pcl-symtab.h:
        * src/pcl-table.h:
        * src/pcl-tablerecord.h:
        * src/pcl-traceback.h:
        * src/pcl-tuple.h:
        * src/pcl-type.h:
        * src/pcl-value.h:
        Rename `parent' field in class struct(s) to `parent_class'.

        * src/pcl-callable.h:
        * src/pcl-hashable.h:
        * src/pcl-iterable.h:
        * src/pcl-mapping.h:
        * src/pcl-measurable.h:
        * src/pcl-number.h:
        * src/pcl-sequence.h:
        Rename `parent' field in interface struct(s) to `parent_interface'.

        * src/pcl-callable.c:
        * src/pcl-descr.c:
        * src/pcl-dict.c:
        * src/pcl-dict-proxy.c:
        * src/pcl-file.c:
        * src/pcl-float.c:
        * src/pcl-function.c:
        * src/pcl-hashable.c:
        * src/pcl-int.c:
        * src/pcl-iterable.c:
        * src/pcl-iterator.c:
        * src/pcl-list.c:
        * src/pcl-measurable.c:
        * src/pcl-method.c:
        * src/pcl-module.c:
        * src/pcl-object.c:
        * src/pcl-slice.c:
        * src/pcl-string.c:
        * src/pcl-table.c:
        * src/pcl-tuple.c:
        * src/pcl-type.c:
        Register static attributes by storing them in the GType's data table.

        * src/pcl-callable.c:
        * src/pcl-enumerate.c:
        * src/pcl-generator.c:
        * src/pcl-reversed.c:
        * src/pcl-sequence.c:
        Defer to PclIterator's implementation of PclIterableInterface.

        * src/pcl-compile.c:
        Remove `parent_cut_seen' field from PclCompileState.
        Remove all experimental logic supporting parent cuts.
        Implement new semantics for sibling cuts.

        * src/pcl-compile.c: (compile_cut)
        New function handles PCL_NT_CUT nodes.

        * src/pcl-descr.h:
        Remove wrapper descriptor definitions and supporting types.
        It looks like we don't need them... yet.

        * src/pcl-descr.c:
        Remove functions supporting wrapper descriptors.

        * src/pcl-dict.c:
        Add docstrings to dict methods.
        Remove dict_mapping_has_key() and dict_mapping_has_key_string().

        * src/pcl-dict.c: (dict_iterable_contains)
        * src/pcl-dict-proxy.c: (dict_proxy_iterable_contains)
        * src/pcl-list.c: (list_iterable_contains)
        * src/pcl-string.c: (string_iterable_contains)
        * src/pcl-table.c: (table_iterable_contains)
        * src/pcl-tablerecord.c: (tablerecord_iterable_contains)
        * src/pcl-tuple.c: (table_iterable_contains)
        New function implements PclIterableInterface's contains() method.

        * src/pcl-dict.c: (pcl_dict_merge)
        Accept any mapping as the second argument, and only use pcl_mapping
                functions when dealing with it.

        * src/pcl-dict-proxy.c:
        Implement PclMappingInterface.

        * src/pcl-eval.c: (pcl_eval_frame)
        PCL_OPCODE_COMPARISON_IN / PCL_OPCODE_COMPARISON_NOT_IN:
                Call pcl_object_contains() on any iterable.
        Support new opcode (see src/pcl-opcode.h).
        PCL_OPCODE_FORK_FRAME: Leave (cut, [results], False) on the stack.

        * src/pcl-float.c: (float_as_double)
        Better error handling.

        * src/pcl-frame.h:
        Add `cut' field to PclFrame (gboolean).

        * src/pcl-int.c: (pcl_int_as_long)
        Better error handling.

        * src/pcl-iterable.h:
        Add contains() method to PclIterableInterface.

        * src/pcl-iterable.c:
        Add a __contains__() method to interable interface.

        * src/pcl-iterator.c:
        Implement PclIterableInterface.
        Add docstrings to iterator methods.

        * src/pcl-lexer.l: (parse_input_common)
        Flush again if the lexer is still in FLUSH state after yyparse().

        * src/pcl-list.c:
        Add docstrings to list methods.
        Remove list_sequence_contains() method.

        * src/pcl-mapping.[ch]:
        Remove has_key() and has_key_string() methods from
                PclMappingInterface because they're redundant with
                PclIterableInterface's new contains() method.

        * src/pcl-mod-builtin.c: (builtin_len)
        Better error handling.
        Cosmetic changes.

        * src/pcl-mod-math.c:
        Cosmetic changes.

        * src/pcl-mod-sys.c:
        Cosmetic changes.

        * src/pcl-node.[ch]:
        Remove PCL_FLAG_CUT.

        * src/pcl-object.h:
        Remove `getsets', `members', and `methods' fields from PclObjectClass.
        Define PCL_DATA_GETSETS, PCL_DATA_MEMBERS, and PCL_DATA_METHODS.

        * src/pcl-object.c: (object_repr)
        New function implements PclObject's repr() method.

        * src/pcl-object.c: (object_get_attr, object_set_attr)
        Don't assume object extracted from __dict__ is a descriptor.

        * src/pcl-object.c: (pcl_object_dir)
        Finish implementation -- accept anything.

        * src/pcl-opcode.h:
        New opcode: PCL_OPCODE_CUT

        * src/pcl-parser.y:
        Remove logic dealing with cut flags.

        * src/pcl-sequence.[ch]:
        Remove contains() method from PclSequence because it's redundant with
                PclIterableInterface's new contains() method.

        * src/pcl-string.c:
        Remove string_sequence_contains().

        * src/pcl-tablerecord.c:
        Remove tablerecord_mapping_has_key() and
                tablerecord_mapping_has_key_string().

        * src/pcl-tuple.c:
        Remove tuple_sequence_contains().

        * src/pcl-type.c:
        Add docstrings to type methods.

        * src/pcl-type.c: (type_add_descriptors)
        New function extracts static attributes from the GType's data table.

        * src/pcl-type.c: (pcl_type_new)
        Add static attributes registered with all base classes and interfaces
                that the type implements.

        * src/pcl-util.[ch]: (pcl_data_getsets_quark,
                              pcl_data_members_quark,
                              pcl_data_methods_quark)
        New functions return a GQuark for storing in a GType data table.

2005-12-01  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * configure.ac:
        Debug option defines G_ENABLE_DEBUG (used to be PCL_DEBUG).
        Add -DG_DISABLE_CAST_CHECKS to CFLAGS for better performance.

        * src/Makefile.am:
        New source files: pcl-iterable.[ch]

        * src/pcl.h:
        #include "pcl-iterable.h"

        * src/pcl.c: (pcl_finalize)
        Finalize Free and all type objects.

        * src/pcl-callable.[ch]:
        Make PclCallableIterator a subclass of PclIterator.
        Add __call__() method to callable interface.

        * src/pcl-dict.c:
        * src/pcl-enumerate.c:
        * src/pcl-eval.c:
        * src/pcl-function.c:
        * src/pcl-iterator.c:
        * src/pcl-list.c:
        * src/pcl-mod-builtin.c:
        * src/pcl-sequence.c:
        * src/pcl-table.c:
        * src/pcl-tuple.c:
        Rename pcl_object_next() to pcl_iterator_next().

        * src/pcl-enumerate.[ch]:
        Make PclEnumerate a subclass of PclIterator.

        * src/pcl-eval.c:
        * src/pcl-frame.c:
        Rename PCL_DEBUG to G_ENABLE_DEBUG.

        * src/pcl-generator.[ch]:
        Make PclGenerator a subclass of PclIterator.

        * src/pcl-hashable.c:
        Add __hash__() method to hashable interface.

        * src/pcl-iterable.[ch]:
        New source files implement iterable interface.

        * src/pcl-iterator.[ch]:
        Break PclIterable into its own source files.
        Make PclIterator a subclass of PclObject rather than an interface.
        Add next() and stop() methods.

        * src/pcl-measurable.c:
        Add __len__() method to measurable interface.

        * src/pcl-mod-builtin.c: (builtin_hash)
        Better error handling.

        * src/pcl-mod-sys.c: (sys_getrefcount)
        New function implements sys module method getrefcount().

        * src/pcl-reversed.[ch]:
        Make PclReversed a subclass of PclIterator.

        * src/pcl-sequence.[ch]:
        Make PclSequenceIterator a subclass of PclIterator.

        * src/pcl-tablerecord.c:
        Stop using the G_DEFINE_TYPE macros.  Implement the function by hand
                so we can better see how GObject type registration works.

2005-12-01  David R. Crepps  <david.crepps@boeing.com>

        * test/test.pcl:
        New automated test script.  Includes tests for methods.
        
        * test/list_method_test.pcl:
        * test/table_method_test.pcl:
        * test/string_method_test.pcl:
        * test/dict_method_test.pcl:
        New test suite.
        
        * src/pcl-list.c:
        * src/pcl-table.c:
        Fully tested methods using automated script.
        Made a handful of small corresponding changes and/or bug fixes.
        
        * src/pcl-tablerecord.c:
        Made minor changes to accommodate methods.
        Implemented the IterableInterface.

2005-11-29  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-bool.c:
        * src/pcl-dict.c:
        * src/pcl-enumerate.c:
        * src/pcl-file.c:
        * src/pcl-float.c:
        * src/pcl-function.c:
        * src/pcl-int.c:
        * src/pcl-list.c:
        * src/pcl-module.c:
        * src/pcl-object.c:
        * src/pcl-reversed.c:
        * src/pcl-slice.c:
        * src/pcl-string.c:
        * src/pcl-tuple.c:
        * src/pcl-type.c:
        Add a type docstring.

        * src/pcl-descr.h:
        Cosmetic changes.

        * src/pcl-descr.c:
        Implement class method descriptors.

        * src/pcl-dict.[ch]: (pcl_dict_merge_from_seq_2)
        New function merges from a sequence of pairs.

        * src/pcl-dict.c: (dict_new_instance)
        Implement it.

        * src/pcl-method.h:
        Add PCL_METHOD_FLAG_CLASS flag for class methods.

        * src/pcl-method.c: (method_callable_call)
        Mask out PCL_METHOD_FLAG_CLASS from the switch statement.

        * src/pcl-object.h:
        Add `doc' field to PclObjectClass.

        * src/pcl-type.c: (type_get_doc)
        Implement it.

        * src/pcl-type.c: (pcl_type_new)
        Add __doc__ to the type dictionary.

2005-11-28  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-descr.c:
        Add __objclass__, __name__, and __doc__ members.

        * src/pcl-dict.c:
        Add a copy() method.

        * src/pcl-dict-proxy.c:
        Add docstrings to the methods.

        * src/pcl-file.c:
        Add closed, mode, name, and softspace members.

        * src/pcl-function.[ch]:
        Add `module' field to PclFunction.
        Add __dict__, __doc__, __module__, and __name__ members.

        * src/pcl-object.c:
        Add __class__ member.

        * src/pcl-slice.c:
        Add indices method.
        Add start, stop, and step members.

        * src/pcl-slice.c: (slice_new_instance)
        New function implements PclObject's new_instance() method.

        * src/pcl-slice.c: (slice_repr)
        Produce a string that can be passed to eval().

        * src/pcl-slice.c: (slice_compare)
        New function implements PclObject's compare() method.

2005-11-28  David R. Crepps  <david.crepps@boeing.com>

        * src/pcl-table.c:
        Patched memory leaks from calls to pcl_object_next.
        Cosmetic changes.
        
        * src/pcl-list.c:
        * src/pcl-dict.c:
        Filled the bodies of the method functions.  Still needs to be tested.

2005-11-28  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support static attributes on built-in types.

        * src/Makefile.am:
        New source files: pcl-descr.[ch] pcl-dict-proxy.[ch]

        * src/pcl.h:
        #include "pcl-descr.h"
        #include "pcl-dict-proxy.h"

        * src/pcl-callable.[ch]:
        * src/pcl-dict.c:
        * src/pcl-float.c:
        * src/pcl-import.c:
        * src/pcl-int.c:
        * src/pcl-list.c:
        * src/pcl-mod-builtin.c:
        * src/pcl-mod-exceptions.c:
        * src/pcl-mod-math.c:
        * src/pcl-mod-sys.c:
        * src/pcl-string.c:
        * src/pcl-table.c:
        * src/pcl-tuple.c:
        Cosmetic changes.

        * src/pcl-descr.[ch]:
        New source files implement attribute descriptors.

        * src/pcl-dict.[ch]:
        Add `merge' and `update' methods to PclDictClass.

        * src/pcl-dict-proxy.[ch]:
        New source files implement read-only dictionary proxies.

        * src/pcl-eval.c: (eval_call_function)
        Add special logic for PclMethod objects.

        * src/pcl-function.[ch]:
        Add `doc' field to PclFunction.

        * src/pcl-function.c: (pcl_function_new)
        Try to extract a docstring from the PclCode object.

        * src/pcl-member.[ch]:
        Rename PCL_MEMBER_READONLY flag to PCL_MEMBER_FLAG_READONLY.
        Follows GLib naming convention for flags.

        * src/pcl-method.[ch]:
        Rename PCL_METHOD_xxx flags to PCL_METHOD_FLAG_xxx.
        Follows GLib naming convention for flags.
        Define fast-access macros for some PclMethod fields.

        * src/pcl-method.c:
        Add __doc__, __name__, __self__, and __module__ members.

        * src/pcl-mod-builtin.c:
        * src/pcl-mod-sys.c:
        Add docstrings.

        * src/pcl-module.c:
        Add __dict__ member.

        * src/pcl-object.h:
        Add `getsets' field to PclObjectClass.

        * src/pcl-object.[ch]: (pcl_object_get_dict)
        New function returns an object's built-in dict, if it has one.

        * src/pcl-object.c: (object_get_attr, object_set_attr)
        Rewrite logic to handle descriptor objects.

        * src/pcl-object.c: (pcl_object_dir)
        Handle type objects.

        * src/pcl-table.c: (pcl_table_get_type)
        Stop using the G_DEFINE_TYPE macros.  Implement the function by hand
                so we can better see how GObject type registration works.

        * src/pcl-tuple.[ch]: (pcl_tuple_get_slice)
        Accept a start and stop index instead of a PclSlice object.
        XXX This temporarily breaks the implementation of PclSequence's
                get_slice() method!!  Need to rethink the interface.

        * src/pcl-type.c:
        Add __name__, __bases__, __module__, __dict__, and __doc__ members.

        * src/pcl-type.c: (pcl_type_new)
        Add any getsets, members, or methods defined in the target type's
                PclObjectClass to the new type object's built-in dict.

2005-11-22  David R. Crepps  <david.crepps@boeing.com>

        * New feature summary:
        New built-in data type "table"
        
        * src/Makefile.am:
        New source files: pcl-tablerecord.[ch]
        
        * src/pcl.h:
        #include "pcl-tablrecord.h"
        
        * pcl-mod-builtin.c:
        Added "table" as a callable built-in type.
        
        * pcl-table.[ch]:
        Implemented the new built-in table object.
        Stable, but methods are not tested yet.
        
        * pcl-tablerecord.[ch]:
        New source files for the implementation of records within tables.
        Stable, but methods are not tested yet.
        
2005-11-21  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/Makefile.am:
        New source files: pcl-member.[ch]
        Move lexer and parser files from CLEANFILES to MAINTAINERCLEANFILES
                since they require special tools to build.

        * src/pcl.h:
        #include "pcl-member.h"

        * src/pcl-bool.c: (pcl_bool_get_type)
        * src/pcl-callable.c: (pcl_callable_iterator_get_type)
        * src/pcl-cell.c: (pcl_cell_get_type)
        * src/pcl-code.c: (pcl_code_get_type)
        * src/pcl-dict.c: (pcl_dict_get_type)
        * src/pcl-enumerate.c: (pcl_enumerate_get_type)
        * src/pcl-exception.c: (pcl_exception_get_type)
        * src/pcl-file.c: (pcl_file_get_type)
        * src/pcl-float.c: (pcl_float_get_type)
        * src/pcl-frame.c: (pcl_frame_get_type)
        * src/pcl-function.c: (pcl_function_get_type)
        * src/pcl-generator.c: (pcl_generator_get_type)
        * src/pcl-int.c: (pcl_int_get_type)
        * src/pcl-list.c: (pcl_list_get_type)
        * src/pcl-method.c: (pcl_method_get_type)
        * src/pcl-module.c: (pcl_module_get_type)
        * src/pcl-object.c: (pcl_object_get_type)
        * src/pcl-reversed.c: (pcl_reversed_get_type)
        * src/pcl-singleton.c: (pcl_free_get_type,
                                pcl_none_get_type,
                                pcl_ellipsis_get_type,
                                pcl_not_implemented_get_type)
        * src/pcl-slice.c: (pcl_slice_get_type)
        * src/pcl-string.c: (pcl_string_get_type)
        * src/pcl-symtab.c: (pcl_symtab_entry_get_type)
        * src/pcl-traceback.c: (pcl_traceback_get_type)
        * src/pcl-tuple.c: (pcl_tuple_get_type)
        * src/pcl-type.c: (pcl_type_get_type)
        * src/pcl-value.c: (pcl_value_get_type)
        Stop using the G_DEFINE_TYPE macros.  Implement the function by hand
                so we can better see how GObject type registration works.

        * src/pcl-bool.c: (pcl_bool_get_type_object)
        * src/pcl-callable.c: (pcl_callable_iterator_get_type_object)
        * src/pcl-cell.c: (pcl_cell_get_type_object)
        * src/pcl-code.c: (pcl_code_get_type_object)
        * src/pcl-dict.c: (pcl_dict_get_type_object)
        * src/pcl-enumerate.c: (pcl_enumerate_get_type_object)
        * src/pcl-exception.c: (pcl_exception_get_type_object)
        * src/pcl-file.c: (pcl_file_get_type_object)
        * src/pcl-float.c: (pcl_float_get_type_object)
        * src/pcl-frame.c: (pcl_frame_get_type_object)
        * src/pcl-function.c: (pcl_function_get_type_object)
        * src/pcl-generator.c: (pcl_generator_get_type_object)
        * src/pcl-int.c: (pcl_int_get_type_object)
        * src/pcl-list.c: (pcl_list_get_type_object)
        * src/pcl-method.c: (pcl_method_get_type_object)
        * src/pcl-module.c: (pcl_module_get_type_object)
        * src/pcl-object.c: (pcl_object_get_type_object)
        * src/pcl-reversed.c: (pcl_reversed_get_type_object)
        * src/pcl-singleton.c: (pcl_free_get_type_object,
                                pcl_none_get_type_object,
                                pcl_ellipsis_get_type_object,
                                pcl_not_implemented_get_type_object)
        * src/pcl-slice.c: (pcl_slice_get_type_object)
        * src/pcl-string.c: (pcl_string_get_type_object)
        * src/pcl-traceback.c: (pcl_traceback_get_type_object)
        * src/pcl-tuple.c: (pcl_tuple_get_type_object)
        * src/pcl-type.c: (pcl_type_get_type_object)
        Call pcl_type_new() instead of g_object_new().

        * src/pcl-bool.c:
        * src/pcl-cell.c:
        * src/pcl-float.c:
        * src/pcl-int.c:
        * src/pcl-string.c:
        Remove the cache_repr() method in favor of print() and repr().

        * src/pcl-code.c: (code_hashable_hash)
        * src/pcl-int.c: (int_hashable_hash)
        * src/pcl-method.c: (method_hashable_hash)
        * src/pcl-tuple.c: (tuple_hashable_hash)
        Check for an invalid hash value (G_MAXUINT indicates error).

        * src/pcl-arg.c: (arg_convert_error)
        Replace pcl_type_name() call with PCL_GET_TYPE_NAME() macro.

        * src/pcl-callable.[ch]:
        Make members of `PclCallableIterator' public.
        Flesh out the rest of the GTypeInfo struct.
        Replace pcl_type_name() calls with PCL_GET_TYPE_NAME() macro.
        Abolish callable iterator properties.

        * src/pcl-callable.[ch]: (pcl_callable_iterator_new)
        New function returns a new instance of `PclCallableIterator'.

        * src/pcl-code.[ch]: (pcl_code_new)
        New function returns a new instance of `PclCode'.

        * src/pcl-code.c:
        Abolish code properties.

        * src/pcl-compile.c: (pcl_compile_ast)
        Call pcl_code_new() instead of g_object_new().

        * src/pcl-dict.[ch]:
        Make members of `PclDict' public.

        * src/pcl-enumerate.[ch]:
        Make members of `PclEnumerate' public.

        * src/pcl-error.h: (pcl_error_bad_argument)
        New macro raises a TypeError with a stock error message.

        * src/pcl-error.[ch]: (pcl_type_error)
        Accept a format string followed by a variable-length argument list.

        * src/pcl-eval.c:
        Call pcl_frame_new() instead of g_object_new().
        Call pcl_generator_new() instead of g_object_new().
        Replace pcl_type_name() calls with PCL_GET_TYPE_NAME() macro.

        * src/pcl-exception.[ch]:
        Make members of `PclException' public.

        * src/pcl-file.c:
        Abolish file properties.

        * src/pcl-frame.c:
        Abolish frame properties.
        
        * src/pcl-frame.[ch]: (pcl_frame_new)
        New function returns a new instance of `PclFrame'.

        * src/pcl-generator.[ch]:
        Make members of `PclGenerator' public.
        Abolish generator properties.

        * src/pcl-generator.[ch]: (pcl_generator_new)
        New function returns a new instance of `PclGenerator'.

        * src/pcl-hashable.c: (pcl_hashable_get_type)
        Flesh out the rest of the GTypeInfo struct.

        * src/pcl-import.c: (import_load_dynamic_module,
                             pcl_import_exec_code_module_ex)
        Stop using g_object_get() and g_object_set(); access members directly.

        * src/pcl-iterator.c: (pcl_iterable_get_type, pcl_iterator_get_type)
        Flesh out the rest of the GTypeInfo struct.

        * src/pcl-iterator.c: (pcl_object_iterate)
        Replace pcl_type_name() call with PCL_GET_TYPE_NAME() macro.

        * src/pcl-lexer.l:
        Support imaginary integer and float literals (e.g. 1j).

        * src/pcl-mapping.c:
        Better error handling.

        * src/pcl-mapping.c: (pcl_mapping_get_type)
        Flesh out the rest of the GTypeInfo struct.
        Add interface prerequisites: ITERABLE and MEASURABLE

        * src/pcl-measurable.c: (pcl_measurable_get_type)
        Flesh out the rest of the GTypeInfo struct.

        * src/pcl-member.[ch]:
        New source files implement member data in C-implemented types.

        * src/pcl-method.[ch]:
        Rename `PclMethodDefinition' struct to `PclMethodDef'.
        Make members of `PclMethod' public.
        Abolish method properties.

        * src/pcl-module.[ch]:
        Make members of `PclModule' public.
        Abolish module properties.

        * src/pcl-mod-builtin.c:
        Replace pcl_type_name() calls with PCL_GET_TYPE_NAME() macro.

        * src/pcl-mod-builtin.c: (builtin_iter)
        Call pcl_callable_iterator_new() instead of g_object_new().

        * src/pcl-node.[ch]:
        Add PCL_FLAG_IMAG flag for imaginary numbers (e.g. 1j).

        * src/pcl-number.c: (pcl_number_get_type)
        Flesh out the rest of the GTypeInfo struct.

        * src/pcl-object.[ch]:
        Add `members' and `methods' fields to PclObjectClass.
        Define rich comparison opcodes, though they're not yet being used.
        Replace pcl_type_name() calls with PCL_GET_TYPE_NAME() macro.
        Better error handling in `attr' and `item' functions.

        * src/pcl-object.c: (object_get_attr, object_set_attr)
        Stop trying to match attribute names against GObject properties.
        For now, search the object's __dict__ followed by the type's __dict__.

        * src/pcl-reversed.[ch]:
        Make members of `PclReversed' public.
        Abolish reversed properties.

        * src/pcl-slice.[ch]:
        Make members of `PclSlice' public.
        Abolish slice properties.

        * src/pcl-string.[ch]: (pcl_string_intern_in_place)
        New function places string in the internal string cache.

        * src/pcl-traceback.[ch]:
        Make members of `PclTraceback' public.
        Abolish traceback properties.

        * src/pcl-tuple.[ch]: (pcl_tuple_get_slice)
        New function returns the requested slice.

        * src/pcl-type.[ch]:
        Make members of `PclType' public.
        Abolish type properties.
        Define PCL_GET_TYPE_NAME() macro to replace pcl_type_name().

        * src/pcl-type.[ch]: (pcl_type_new)
        New function returns a new instance of `PclType'.

        * src/pcl-util.[ch]: (pcl_hash_double)
        New function hashes a double-precision floating point number.

        * src/pcl-value.[ch]:
        Stop caching the string representation; it's a premature optimization.

2005-11-16  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-table.[ch]:
        Gut the old implementation and leave a skeleton to guide Dave.

2005-11-08  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Integer division returns the floor.
        Support triple-quoted string literals.
        In interactive mode, the prompt always appears on a new line.

        * src/pcl-compile.c: (compile_print)
        Remove use of obsolete PCL_OPCODE_PRINT_DELIMIT.

        * src/pcl-error.c: (pcl_error_display)
        * src/pcl-run.c: (pcl_run_interactive_one_flags,
                          pcl_run_simple_file_ex_flags,
                          pcl_run_simple_string_flags)
        Only clear error if pcl_flush_line() returns FALSE.

        * src/pcl-eval.c: (pcl_eval_frame)
        PRINT_ITEM / PRINT_NEWLINE: Write to sys.stdout.

        * src/pcl-int.c: (int_number_divide, int_number_remainder)
        Integer division returns the floor.
        Use the same algorithm as int_number_divmod().

        * src/pcl-lexer.l:
        Keep string parameters const-correct.
        Support triple-quoted string literals.

        * src/pcl-opcode.h:
        Rename PCL_OPCODE_PRINT to PCL_OPCODE_PRINT_ITEM.
        Remove obsolete PCL_OPCODE_PRINT_DELIMIT.

2005-11-07  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.17

        * New feature summary:
        Support rollbacks in predicate conjunctions.
        Partial support for parent cuts.
        Faster printing of dictionaries, lists, and tuples.

        * src/pcl.c: (pcl_true, pcl_false)
        Set the GValue directly using g_value_set_long().

        * src/pcl-cell.c: (cell_class_init)
        * src/pcl-float.c: (float_class_init)
        * src/pcl-int.c: (int_class_init)
        * src/pcl-string.c: (string_class_init)
        * src/pcl-value.[ch]:
        Abolish the `value' property.

        * src/pcl-cell.[ch]: (pcl_cell_set)
        Return a gboolean to indicate success.

        * src/pcl-cell.c: (cell_deep)
        Forgot to log an entry in the thread state cache.

        * src/pcl-cell.c: (pcl_cell_new)
        Set the GValue directly using g_value_set_object().

        * src/pcl-cell.c: (pcl_cell_get, pcl_cell_set)
        Better error handling.

        * src/pcl-compile.c: (compile_conjunction)
        Compile frame forking byte code.
        Raise a `StopIteration' exception if a parent cut is seen.

        * src/pcl-compile.c: (compile_disjunction)
        Don't assume all the child nodes are conjunctions.

        * src/pcl-compile.c: (compile_for)
        Remove frame forking code (conjunctions fork the frame).

        * src/pcl-dict.c: (dict_print)
        New function implements PclObject's print() method.

        * src/pcl-dict.c: (dict_repr)
        Use PCL_LIST_GET_ITEM() and PCL_TUPLE_GET_ITEM() macros.

        * src/pcl-eval.c: (pcl_eval_frame)
        Fix bugs in PCL_OPCODE_FORK_FRAME switch case.

        * src/pcl-float.c: (pcl_float_from_double)
        Set the GValue directly using g_value_set_double().

        * src/pcl-int.c: (pcl_int_from_long)
        Set the GValue directly using g_value_set_long().

        * src/pcl-list.c: (list_print)
        New function implements PclObject's print() method.

        * src/pcl-parser.y:
        Change production type of `predicate_statement' to list.
        PCL_NT_EXCEPT nodes can have 1, 2, or 3 children.

        * src/pcl-string.c: (string_from_g_string)
        Set the GValue directly using g_value_take_boxed().
        Calling functions no longer need to free the passed GString.

        * src/pcl-symtab.c: (symtab_node)
        PCL_NT_EXCEPT nodes can have 1, 2, or 3 children.

        * src/pcl-tuple.c: (tuple_print)
        New function implements PclObject's print() method.

        * src/pcl-util.c: (pcl_find_file)
        Bug fix: Don't free `dirname'; we don't own it.

2005-11-03  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support rollbacks in predicate `for' loops.

        * src/main.c:
        Use native C types.

        * src/pcl-compile.c: (compile_for)
        Compile frame forking byte code if in a predicate.

        * src/pcl-compile.c: (compile_function)
        Call this for PCL_NT_PREDICATE nodes.
        Obsoletes compile_predicate().

        * src/pcl-compile.c: (compile_yield)
        Prevent yields inside a `try' block with a `finally' clause.

        * src/pcl-dict.c:
        Cosmetic changes.

        * src/pcl-eval.c: (pcl_eval_frame)
        Enhance verbose debug messages.
        Fix some frame forking bugs.

        * src/pcl-frame.c: (frame_fork)
        Clear the thread state cache before forking.
        Deep copy frame->globals and frame->builtins.

        * src/pcl-function.c:
        Abolish function properties.
        The `globals' field is no longer a weak reference.  This is known to
                cause reference cycles preventing garbage collection, but
                we'll deal with it later.

        * src/pcl-function.c: (function_deep)
        New function implements PclObject's deep() method.

        * src/pcl-object.c: (pcl_object_deep_copy)
        Return NULL if the argument is NULL.

        * src/pcl-object.c: (pcl_object_del_item, pcl_object_get_item,
                             pcl_object_set_item)
        Improve error handling.

        * src/pcl-util.c: (pcl_extract_object)
        Make sure object is non-NULL before calling g_object_ref().

2005-11-01  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Interactive mode with prompts.
        Support `for' loops in predicates.
        Nicer formatting when printing floats.
        Adjustable recursion limit via the `sys' module.
        Function definitions now start with `def', not `function'.

        * configure.ac:
        Add AC_CHECK_LIB(readline, readline)

        * src/pcl.h:
        Add declaration for pcl_parse_input_file_with_prompts().

        * src/pcl-code.h:
        New flags: PCL_CODE_NEWLOCALS, PCL_CODE_NOFREE

        * src/pcl-code.c: (code_constructor)
        New function inits the PCL_CODE_NOFREE flag during construction.

        * src/pcl-compile.c:
        Add `offset' field (as in column offset) to PclCompileState.
        Utilize new predicate opcodes (too pedantic to describe in detail).

        * src/pcl-compile.c: (compile_set_lineno)
        Update both `cs->lineno' and `cs->offset' fields.

        * src/pcl-compile.c: (compile_backpatch)
        Byte code should be cast to an UNSIGNED char array.

        * src/pcl-compile.c: (compile_add)
        Pack the appropriate type object into the dictionary key to ensure
                that no implicit type coersion takes place when performing
                dictionary lookups.
        Better error handling.

        * src/pcl-compile.c: (compile_make_closure)
        Don't use g_object_get(), access fields directly.

        * src/pcl-config.h:
        Update listings of what definitions and functions are being used.

        * src/pcl-error.c: (pcl_error_display)
        Add a `flags' argument to pcl_file_write_object() call.

        * src/pcl-eval.[ch]: (pcl_get_recursion_limit)
        New function returns the current recursion limit.

        * src/pcl-eval.[ch]: (pcl_set_recursion_limit)
        New function adjusts the current recursion limit.

        * src/pcl-eval.[ch]: (pcl_enter_recursive_call)
        New function increments the current thread's recursion depth.

        * src/pcl-eval.[ch]: (pcl_leave_recursive_call)
        New function decrements the current thread's recursion depth.

        * src/pcl-eval.[ch]: (pcl_eval_code_ex)
        Revamp the parameter list to make arguments easier to process.

        * src/pcl-eval.c: (eval_fast_function)
        New function quickly dispatches calls with simple argument lists.

        * src/pcl-eval.c: (pcl_eval_frame)
        Utilize pcl_enter_recursive_call() and pcl_leave_recursive_call().
        If `frame->code' is a predicate, initialize `retval' to an empty list.
        Add a `flags' argument to pcl_object_print() calls.
        Improve error handling for PCL_OPCODE_UNPACK_SEQUENCE.
        Handle new opcodes (see src/pcl-opcode.h).

        * src/pcl-file.[ch]:
        Add a `flags' parameter to PclFile's write() method.

        * src/pcl-float.c:
        Mimic Python's way of converting floats to strings.

        * src/pcl-frame.c: (frame_fork)
        Share (i.e., don't deep copy) globals and builtins... this should
                fulfill our need for a "static variable" mechanism.

        * src/pcl-function.[ch]:
        Expose PclFunction's internals.
        Define get/set functions and fast access macros.

        * src/pcl-function.c: (function_callable_call)
        Adapt to pcl_eval_code_ex()'s new parameter list.

        * src/pcl-lexer.l:
        Replace keyword `function' with `def'.
        Rename start state IN to BOL (beginning-of-line).
        Implement a working interactive mode with prompts.

        * src/pcl-mod-sys.c: (sys_displayhook)
        Restructure logic to reduce indentation.
        Add a `flags' argument to pcl_file_write_object() call.

        * src/pcl-mod-sys.c: (sys_getrecursionlimit)
        New function implements sys module method getrecursionlimit().

        * src/pcl-mod-sys.c: (sys_setrecursionlimit)
        New function implements sys module method setrecursionlimit().

        * src/pcl-object.h:
        Add a `flags' parameter to PclObject's print() method.
        New print flag: PCL_PRINT_RAW

        * src/pcl-object.c: (object_internal_print)
        New function implements recursive print strategy from Python.

        * src/pcl-opcode.h:
        New opcode: PCL_OPCODE_RETURN_RESULT
        Group predicate-specific opcodes.
        Renumber comparison and subscript opcodes.
        Rename PCL_OPCODE_LOAD_ARGS to PCL_OPCODE_RECORD_RESULT.

        * src/pcl-parser.y:
        Replace keyword token KW_FUNCTION with KW_DEF.
        Allow global and pass statements anywhere in predicates.
        Add production to support for-loops in predicates.
        Consolidate predicate productions.
        Fix a couple grammar bugs.

        * src/pcl-run.c: (pcl_run_interactive_one_flags)
        Call new pcl_parse_input_file_with_prompts() function.

        * src/pcl-state.h:
        Add `recursion_depth' field to PclThreadState.

        * src/pcl-string.c: (string_print)
        Add `flags' parameter.
        Expand non-printable characters when printing non-raw strings.

2005-10-20  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl.c: (pcl_initialize, pcl_finalize)
        Set and restore the *default* log handler, like we used to.

        * src/pcl-code.h:
        Define PCL_CODE_PREDICATE flag.

        * src/pcl-dict.c:
        Use pcl_object_equal() for the key compare function.
        Remove obsolete dict_key_equal() function.
                Dictionary keys use weak type comparisons.  The compilation
                issue that was causing has been corrected.  See compile_add()
                in pcl-compile.c for more information.

        * src/pcl-lexer.l:
        Define NEW_TREE_NODE() macro (borrowed from the parser).

        * src/pcl-node.h:
        Add `offset' field to PclNode (gint).
        Define PCL_NODE_OFFSET() macro.

        * src/pcl-node.[ch]: (pcl_node_new)
        Add an `offset' function parameter.

        * src/pcl-parse-info.c: (parse_info_normalize_lineno)
        Invalidate a node's `offset' field when its `lineno' is adjusted.

        * src/pcl-parser.y:
        Add `offset' argument to pcl_node_new() calls.

        * src/pcl-type.c:
        Implement the `hashable' interface.

        * src/pcl-type.c: (type_compare)
        New function implements PclObject's compare() method.

2005-10-18  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-eval.c: (pcl_eval_frame)
        Handle PCL_OPCODE_FORK_FRAME.

        * src/pcl-frame.[ch]: (pcl_frame_fork)
        New function returns a deep copied (forked) PclFrame object.
        Replaces the frame's deep() method.

        * src/pcl-opcode.h:
        Rename PCL_OPCODE_DUP_FRAME to PCL_OPCODE_FORK_FRAME.

        * src/pcl-parser.y:
        Fix cut flag propagation bug.
        One too many NEWLINE tokens in `disjunction_suite'.

        * src/pcl-parser.y: (normalize_conjunction)
        Fix backward normalization bug.

        * src/pcl-symtab.c: (symtab_assign, symtab_node)
        Fix attribute assignment bug.

2005-10-17  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support `pkg-config' and `man' command-line utilities.
        Make the `--command' command-line option actually work.
        Support basic interactive mode (no prompts, no editing features).

        * configure.ac:
        Add `pcl.pc' to AC_CONFIG_FILES.
        Change --enable-profile option to --enable-profiling.

        * Makefile.am:
        Add commands for distributing a man-page file.
        Add commands for distributing a pkg-config metadata file.

        * pcl.pc.in:
        New pkg-config metadata input file.

        * pcl.1:
        New man-page source file for pcl(1).

        * src/Makefile.am:
        New source files: pcl-parse-info.[ch]
        Add definitions for `PREFIX' and `EXEC_PREFIX' to AM_CPPFLAGS.

        * src/pcl.h:
        #include "pcl-parse-info.h"
        Separate "parse-info" declarations into separate source file.
        Update function signatures for pcl_parse_input_file() and
                pcl_parse_input_string().

        * src/pcl.c:
        Move log_handler() function here from pcl-main.c.
        Add log_handler() setup logic to pcl_initialize().
        Add log_handler() teardown logic to pcl_finalize().

        * src/pcl-compile.c: (compile_expression)
        Generate PCL_OPCODE_PRINT_EXPR if in interactive mode.

        * src/pcl-compile.c: (compile_top_level_eval_input)
        New function handles PCL_NT_EVAL_INPUT nodes.

        * src/pcl-compile.c: (compile_top_level_file_input)
        New function handles PCL_NT_FILE_INPUT nodes.
        Replaces compile_top_level_program().

        * src/pcl-compile.c: (compile_top_level_single_input)
        New function handles PCL_NT_SINGLE_INPUT nodes.

        * src/pcl-config.h:
        Add runtime option flags: PCL_OPTION_DEBUG, PCL_OPTION_PARSE_ONLY

        * src/pcl-error.c: (pcl_error_display)
        Kludge: Temporarily ignore result of pcl_traceback_print() so that
                error messages are reported correctly in interactive mode.
                It's failing because it can't find a source file.

        * src/pcl-eval.c: (pcl_eval_frame)
        Handle new opcode (PCL_OPCODE_PRINT_EXPR).

        * src/pcl-import.c: (import_parse_source_module)
        Adapt to new signature for pcl_parse_input_file().

        * src/pcl-lexer.l:
        Further refinement of interactive mode.
        Obtain final parse tree from `yylval.node'.
        Adopt parser's yyerror() and use for lexer errors.

        * src/pcl-main.c: (pcl_main)
        Restructure command-line option handling.  Some arguments get written
                to global flags, others to static local variables.
        Print version string when entering interactive mode.
        Integrate the "parse-only" option into the "pcl_run_*()" functions.
        Make the "command" option actually work.

        * src/pcl-mod-sys.c: (sys_displayhook)
        Trivial bug fix.

        * src/pcl-mod-sys.c: (_pcl_sys_init)
        Add `sys.prefix' and `sys.exec_prefix' objects.

        * src/pcl-node.[ch]:
        Add node types: EVAL_INPUT, FILE_INPUT, SINGLE_INPUT
        Remove obsolete node type: PROGRAM

        * src/pcl-opcode.h:
        New opcode: PCL_OPCODE_PRINT_EXPR

        * src/pcl-parse-info.[ch]:
        New source files manage system resources during parsing.

        * src/pcl-parser.y:
        Rename token OP_GL to OP_LG (less-than-greater-than).
        Root node of global parse tree is now untyped.  Start productions
                fill in the appropriate type.
        "SINGLE_INPUT" start productions call YYACCEPT when reduced.
        Modify production: expression_statement := expression_list opt_comma
        Remove `parse_tree' global, store final parse tree in `yylval.node'.
        Move yyerror() into lexer.

        * src/pcl-run.c: (run_parse_tree)
        Don't execute the parse tree if PCL_OPTION_PARSE_ONLY is true.

        * src/pcl-run.c: (pcl_run_interactive_loop_flags)
        Kludge: Loop endlessly, ignoring the return value of
                pcl_run_interactive_one_flags().  Only way to exit is Ctrl-C.

        * src/pcl-run.c: (pcl_run_interactive_one_flags)
        With the new signature for pcl_parse_input_file(), we can finally
                complete this function.

        * src/pcl-run.c: (pcl_run_string, pcl_run_string_flags)
        Adapt to new signature for pcl_parse_input_string().

2005-10-11  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support in-place power operator ('x **= y').

        * pcl-lexer.l:
        Cosmetic changes.
        New operator: **= (in-place power)
        Better implementation of EOF cleanup.

        * pcl-lexer.l: (parse_input_common)
        New function performs logic common to file and string input.
        First step in supporting an interactive mode.

        * pcl-parser.y:
        Define new operation token: OP_INPLACE_POW
        New production: augmented_assignment_operator := OP_INPLACE_POW
        Rename OP_POWER token to OP_POW (to match new OP_INPLACE_POW).
        Add string literals to keyword and operation tokens.

2005-10-10  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl.h:
        * src/pcl-bool.h:
        * src/pcl-callable.h:
        * src/pcl-cell.h:
        * src/pcl-code.h:
        * src/pcl-compile.h:
        * src/pcl-dict.h:
        * src/pcl-enumerate.h:
        * src/pcl-exception.h:
        * src/pcl-file.h:
        * src/pcl-float.h:
        * src/pcl-frame.h:
        * src/pcl-function.h:
        * src/pcl-generator.h:
        * src/pcl-hashable.h:
        * src/pcl-import.h:
        * src/pcl-int.h:
        * src/pcl-iterator.h:
        * src/pcl-list.h:
        * src/pcl-mapping.h:
        * src/pcl-measurable.h:
        * src/pcl-method.h:
        * src/pcl-module.h:
        * src/pcl-node.h:
        * src/pcl-number.h:
        * src/pcl-object.h:
        * src/pcl-reversed.h:
        * src/pcl-sequence.h:
        * src/pcl-singleton.h:
        * src/pcl-slice.h:
        * src/pcl-state.h:
        * src/pcl-string.h:
        * src/pcl-table.h:
        * src/pcl-traceback.h:
        * src/pcl-tuple.h:
        * src/pcl-type.h:
        * src/pcl-value.h:
        Eliminate underscore prefix from struct definitions.

        * src/pcl.h:
        Add PCL_FREE macro, a new built-in singleton object.

        * src/pcl.[ch]: (pcl_free)
        New function returns the PCL_TYPE_FREE singleton object.

        * src/pcl-compile.c: (compile_top_level_predicate)
        Utilize new `LOAD_ARGS' opcode while building the predicate result.

        * src/pcl-dict.c: (dict_class_init)
        Forgot to connect up `dict_deep' as the deep() method.

        * src/pcl-eval.c: (pcl_eval_frame)
        Handle new opcode PCL_OPCODE_LOAD_ARGS.
        Skip exception safety checks unless PCL_DEBUG is defined.

        * src/pcl-frame.c: (frame_deep)
        New function implements PclObject's deep() method.

        * src/pcl-lexer.l:
        Remove obsolete keyword: `database'
        Remember original start state as `input_mode'.
        Blank lines trigger a NEWLINE only when `input_mode == SIN'.

        * src/pcl-lexer.l: (pcl_parse_input_string)
        Move line number normalization from parser to here.

        * src/pcl-mod-builtin.c: (_pcl_builtin_init)
        Add `Free' object to built-in namespace.

        * src/pcl-opcode.h:
        New opcodes: PCL_OPCODE_DUP_FRAME
                     PCL_OPCODE_LOAD_ARGS

        * src/pcl-parser.y:
        Remove obsolete keyword token: KW_DATABASE
        Move line number normalization to pcl_parse_input_string().
        Add top-level productions for EVAL_INPUT and SINGLE_INPUT modes.

        * src/pcl-singleton.[ch]:
        Add definitions for new singleton object `Free'.
        All singleton types should defer to PclObject's copy() method.

        * src/pcl-symtab.[ch]:
        Rename PCL_IS_FREE() macro to PCL_SYMBOL_IS_FREE().

2005-10-03  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-eval.c: (pcl_eval_frame)
        Use PCL_TUPLE_GET_ITEM macro unless PCL_DEBUG is defined.

        * src/pcl-frame.c: (frame_constructor)
        Return a skeleton frame if key properties were not given.

        * src/pcl-import.c: (import_find_module)
        Change an empty path to a dot (.) to indicate the current directory.

        * src/pcl-list.[ch]:
        Expose the underlying array so we can define fast-access macros.
        New macros: PCL_LIST_GET_ITEM, PCL_LIST_GET_SIZE, PCL_LIST_SET_ITEM

        * src/pcl-parser.y:
        Change type of `statement' productions to a list.
        This eliminates wrapping each statement line in its own suite.

        * src/pcl-tuple.[ch]:
        Expose the underlying array so we can define fast-access macros.
        New macros: PCL_TUPLE_GET_ITEM, PCL_TUPLE_GET_SIZE, PCL_TUPLE_SET_ITEM

2005-09-29  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.16

        * New feature summary:
        Support try statements (with except/else/finally clauses).
        Support raw string literals ('r' or 'R' prefix before the quote).

        * src/pcl-compile.c: (compile_continue)
        Handle "try", "except" and "finally" blocks properly.

        * src/pcl-compile.c: (compile_try_except)
        New function handles PCL_NT_TRY_EXCEPT nodes.

        * src/pcl-compile.c: (compile_try_finally)
        New function handles PCL_NT_TRY_FINALLY nodes.

        * src/pcl-error.[ch]: (pcl_error_given_exception_matches)
        New function compares two exception objects.

        * src/pcl-error.c: (pcl_error_exception_matches)
        Call pcl_error_given_exception_matches().

        * src/pcl-eval.c:
        Add WHY_CONTINUE to WhyCode enumeration.

        * src/pcl-eval.c: (eval_set_exc_info, eval_reset_exc_info)
        New functions set and reset the current thread state exception.

        * src/pcl-eval.c: (pcl_eval_frame)
        Handle new opcodes (see src/pcl-opcode.h).
        Unwind "except" and "finally" blocks properly after main loop.

        * src/pcl-frame.[ch]:
        Add `exc_type', `exc_value', and `exc_traceback' fields to PclFrame.

        * src/pcl-frame.c: (frame_constructor)
        Don't use g_object_get()... it's very expensive!

        * src/pcl-import.c: (import_find_module)
        Don't append a G_DIR_SEPARATOR to an empty path.

        * src/pcl-lexer.l:
        New keywords: `except', `finally', `try'
        Remove obsolete keyword: `table'
        Add new states and rules for raw string literals.

        * src/pcl-mod-sys.c: (pcl_sys_set_path)
        Always make the first entry of sys.path an empty string.
        This will force imports to search the current directory first.

        * src/pcl-node.[ch]:
        Add node types: EXCEPT, TRY_EXCEPT, TRY_FINALLY

        * src/pcl-opcode.h:
        New opcodes: PCL_OPCODE_COMPARISON_EXCEPT
                     PCL_OPCODE_END_FINALLY
                     PCL_OPCODE_SETUP_EXCEPT
                     PCL_OPCODE_SETUP_FINALLY
                     PCL_OPCODE_CONTINUE_LOOP
        Add missing oparg descriptions.

        * src/pcl-parser.y:
        Define new keyword tokens: KW_EXCEPT, KW_FINALLY, KW_TRY
        Remove obsolete keyword token: KW_TABLE
        New production: compound_statement := try_statement
        Add productions for "try/except" and "try/finally" statements.

        * src/pcl-symtab.c: (symtab_node)
        Handle PCL_NT_EXCEPT nodes.

        * src/pcl-traceback.c: (pcl_traceback_get_type_object)
        Forgot to actually create the type object.

2005-09-27  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-cell.c: (cell_deep)
        New function implements PclObject's deep() method.
        Cell objects are mutable.

        * src/pcl-exception.h:
        * src/pcl-type.h:
        Add missing G_END_DECLS macro.

        * src/pcl-float.c:
        Cosmetic changes.

        * src/pcl-float.c: (float_number_divmod)
        New function will implement PclNumber's divmod() method.
        The function is just a stub for now.

        * src/pcl-float.c: (pcl_float_as_double)
        Save a function call if the object is already a float.

        * src/pcl-frame.c: (frame_copy, frame_deep)
        New functions will implement PclObject's copy() and deep() methods.
        The functions are just stubs for now.

        * src/pcl-int.c:
        Cosmetic changes.

        * src/pcl-int.c: (int_number_divmod)
        New function implements PclNumber's divmod() method.

        * src/pcl-int.c: (int_number_divide, int_number_remainder)
        Catch divide by zero errors.

        * src/pcl-int.c: (pcl_int_as_long)
        Save a function call if the object is already an integer.

        * src/pcl-mod-builtin.c: (builtin_divmod)
        New function implements the built-in method divmod().

        * src/pcl-mod-builtin.c: (builtin_pow)
        New function implements the built-in method pow().
        The optional third argument is not yet supported.

        * src/pcl-module.h:
        #include "pcl-method.h"

        * src/pcl-number.[ch]:
        Add divmod() method to PclNumber interface.

2005-09-26  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * configure.ac:
        Enable debugging facilities with the --enable-debug option.
        Print "Checking for ..." messages for debug and profile options.
        Turn on full optimization (-O3) if debug option is NOT set.
        Disable GLib assertions if debug option is NOT set.

        * src/Makefile.am:
        Create sources: glib-ext.[ch]
        Rename INCLUDES to AM_CPPFLAGS (INCLUDES is apparently deprecated).

        * src/glib-ext.[ch]:
        New source files contain minor extensions to GLib.

        * src/pcl.c: (pcl_finalize)
        Finalize exception objects.

        * src/pcl-bool.[ch]:
        PclBool is now a subclass of PclInt.
        Rip out a bunch of stuff that PclInt implements for us.

        * src/pcl-compile.c: (compile_aug_assign)
        Move augmented assignment restrictions to the parser.

        * src/pcl-dict.c: (dict_key_equal)
        Key compare function with strong type comparisons.

        * src/pcl-dict.c: (dict_copy, dict_copy_helper)
        Much more efficient implementation.

        * src/pcl-dict.c: (dict_deep, dict_deep_helper)
        New functions implement PclObject's deep() method.

        * src/pcl-dict.c: (pcl_dict_clear)
        Call g_hash_table_remove_all() (a GLib extension).

        * src/pcl-eval.c: (eval_unpack_iterable)
        Better error handling.

        * src/pcl-eval.c: (pcl_eval_frame)
        Collect opcode hit counts if DYNAMIC_EXECUTION_PROFILE is defined.
        Add opcode prediction macros for increased throughput.
        Don't use g_object_get()... it's very expensive!

        * src/pcl-eval.c: (pcl_eval_code_ex)
        Don't use g_object_get()... it's very expensive!
        Use pcl_cell_set() instead of g_object_set().

        * src/pcl-eval.c: (pcl_get_dx_profile, eval_get_array)
        New functions return results of opcode hit count statistics.
        These are only present if DYNAMIC_EXECUTION_PROFILE is defined.

        * src/pcl-exception.c:
        Exceptions should log their own instantiation.

        * src/pcl-list.[ch]:
        Remove copy() method; redundant with PclObject's copy() method.

        * src/pcl-list.c: (list_copy)
        Much more efficient implementation.

        * src/pcl-list.c: (list_deep)
        New function implements PclObject's deep() method.

        * src/pcl-method.c: (pcl_method_new)
        Fix a reference counting bug.

        * src/pcl-mod-builtin.c: (_pcl_builtin_init)
        Add __debug__ symbol to __builtin__, hard-coded to True for now.

        * src/pcl-mod-sys.c:
        Add `getdxp' method if DYNAMIC_EXECUTION_PROFILE is defined.

        * src/pcl-module.c: (pcl_module_init)
        Fix reference leak.

        * src/pcl-number.c: (pcl_number_coerce)
        Return FALSE if neither object is a number.

        * src/pcl-object.[ch]:
        Add deep() method to PclObjectClass (for deep copies).
        Provide default copy() and deep() methods for immutable objects.
        Remove object_extract_index() helper function.
        Silence some compiler warnings.

        * src/pcl-object.c: (pcl_object_compare)
        Check for identical pointers before doing anything else.
        If all else fails, compare the objects' GTypes.

        * src/pcl-object.c: (pcl_object_equal)
        Remove GType comparison.
        This function is no longer suitable for key_equal_func in PclDict.

        * src/pcl-object.c: (pcl_object_from_value)
        Remove G_TYPE_BOOLEAN case.

        * src/pcl-parser.y:
        u_expr: Inline '+' and '-' if the operand is a numeric literal.
        Support assignments of the form "a, b, c = x, y, z".
        Disallow augmented assignment to lists and tuples.
        target: Abort parsing if primary is not a valid target type.

        * src/pcl-parser.y: (yyprint)
        Call YYFPRINTF instead of fprintf.

        * src/pcl-parser.y: (validate_target)
        Provide more meaningful error messages for invalid target types.

        * src/pcl-slice.c: (slice_index)
        Raise an exception if slice index is not an integer.

        * src/pcl-state.[ch]:
        Add a `cache' field to PclThreadState (GHashTable pointer).

        * src/pcl-string.c:
        Move g_string_compare() to glib-ext.c.

        * src/pcl-tuple.c: (tuple_deep)
        New function implements PclObject's deep() method.

        * src/pcl-util.c:
        Better error handling.

        * src/pcl-value.c:
        Remove value_copy(); fallback to PclObject's implementation.

2005-09-22  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.15

        * src/pcl-compile.c:
        * src/pcl-dict.c:
        * src/pcl-eval.c:
        * src/pcl-mod-builtin.c:
        * src/pcl-mod-sys.c:
        * src/pcl-string.c:
        * src/pcl-symtab.c:
        * src/pcl-table.c:
        * src/pcl-tuple.c:
        * src/pcl-util.c:
        pcl_list_new() now takes an initial length argument.
        Use pcl_list_set_item() instead of pcl_list_append() whenever possible.

        * src/pcl-list.c: (list_sequence_repeat)
        * src/pcl-string.c: (string_sequence_repeat)
        * src/pcl-tuple.c: (tuple_sequence_repeat)
        Accept an integer instead of an object for the multiplier.

        * src/pcl-compile.c: (compile_assign_target)
        Fix variable name deletion bug.

        * src/pcl-dict.[ch]:
        The clear() method now returns a success flag.
        Raise an exception in methods when `self' is not a dictionary.

        * src/pcl-error.c: (pcl_error_display)
        pcl_tuple_get_item() no longer takes negative indices.

        * src/pcl-list.[ch]:
        Change underlying implementation to GPtrArray (like tuples).
        The append(), insert(), reverse() and sort() methods now return a
                success flag.
        Add a copy() method for shallow copies.
        The data type of `index' arguments is now gint (was glong).
        Raise an exception in methods when `self' is not a dictionary.
        All-around better error handling.

        * src/pcl-main.c: (pcl_main)
        Clean up unused variables to silence compiler warnings.
        Enable parser traces when the --debug option is given.

        * src/pcl-parser.y:
        Define YYFPRINTF to stream_to_debug.
        Add %debug and %verbose options.
        New production: parenth_form := '(' ')'
        Refine handling of PCL_FLAG_CUT.
        Various debugging enhancements.

        * src/pcl-parser.y: (stream_to_debug)
        New function intercepts outgoing message segments from the parser and
                emits a debug-level logging message when we see a newline.

        * src/pcl-sequence.[ch]:
        The repeat() method now takes an integer multiplier.
        The data type of index arguments is now gint (was glong).

        * src/pcl-sequence.c: (pcl_sequence_repeat)
        Convert multiplier object to integer, or else raise exception.

        * src/pcl-slice.[ch]: (pcl_slice_get_indices)
        The data type of output arguments is now gint (was glong).

        * src/pcl-string.c:
        Raise an exception in methods when `self' is not a dictionary.
        All-around better error handling.

        * src/pcl-tuple.[ch]:
        The data type of `index' arguments is now gint (was glong).
        Raise an exception in methods when `self' is not a dictionary.
        All-around better error handling.

2005-09-19  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support argument notations: arg=value, *args, **args
        Support parameter notations: param=default, *params, **params
        Predicate cuts are now denoted by the keyword statement `cut'.

        * src/pcl.h:
        Add PclParseInfo structure for managing resources during parsing.

        * src/pcl-bool.c:
        * src/pcl-cell.c:
        * src/pcl-float.c:
        * src/pcl-int.c:
        * src/pcl-string.c:
        Underlying GValue is no longer a pointer.

        * src/pcl-bool.c: (bool_new_instance)
        * src/pcl-enumerate.c: (enumerate_new_instance)
        * src/pcl-float.c: (float_new_instance)
        * src/pcl-function.c: (function_callable_call)
        * src/pcl-int.c: (int_new_instance)
        * src/pcl-list.c: (list_new_instance)
        * src/pcl-method.c: (method_callable_call)
        * src/pcl-string.c: (string_new_instance)
        * src/pcl-string.c: (tuple_new_instance)
        * src/pcl-type.c: (type_new_instance, type_callable_call)
        Accept keyword arguments.

        * src/pcl-arg.c:
        Implement keyword argument parsing.
        Rename pcl_measurable_length() calls to pcl_object_measure().

        * src/pcl-arg.[ch]: (pcl_arg_va_parse_tuple)
        New function is similar to pcl_arg_parse_tuple(), but accepts a
                va_list instead of a variable-length argument list.

        * src/pcl-arg.[ch]: (pcl_arg_parse_tuple_and_keywords)
        New function parses both positional and keyword arguments.

        * src/pcl-arg.[ch]: (pcl_arg_va_parse_tuple_and_keywords)
        New function is similar to pcl_arg_parse_tuple_and_keywords(), but
                accepts a va_list instead of a variable-length argument list.

        * src/pcl-callable.[ch]:
        Add `keywords' argument to call() method in PclCallableInterface.
        Rename pcl_callable_call() to pcl_object_call().

        * src/pcl-code.h:
        Define PCL_CODE_VARARGS and PCL_CODE_VARKEYWORDS flags.

        * src/pcl-code.c:
        Expose PclCode methods directly rather than using wrapper functions.
        Rename pcl_hashable_hash() calls to pcl_object_hash().
        Rename pcl_measurable_length() calls to pcl_object_measure().

        * src/pcl-compile.c:
        GValue field in PclNode is no longer a pointer.
        Rename pcl_measurable_length() calls to pcl_object_measure().

        * src/pcl-compile.c: (compile_arguments)
        New function handles PCL_NT_ARGUMENTS nodes.

        * src/pcl-compile.c: (compile_call)
        Handle new argument notations.

        * src/pcl-compile.c: (compile_function, compile_predicate)
        Process default arguments.

        * src/pcl-compile.c: (compile_load_symbols)
        Handle PCL_DEF_STAR and PCL_DEF_DOUBLE_STAR symbol table flags.

        * src/pcl-dict.c:
        Expose PclDict methods directly rather than using wrapper functions.
        Rename pcl_hashable_hash() calls to pcl_object_hash().
        Rename pcl_iterator_next() calls to pcl_object_next().
        Rename pcl_iterable_iterator() calls to pcl_object_iterate().
        Rename pcl_measurable_length() calls to pcl_object_measure().
        Rename dict_iterable_iterator() to dict_iterable_iterate().
        Rename dict_measurable_length() to dict_measurable_measure().

        * src/pcl-enumerate.c:
        Rename pcl_iterator_next() calls to pcl_object_next().
        Rename pcl_iterable_iterator() calls to pcl_object_iterate().
        Rename enumerate_iterable_iterator() to enumerate_iterable_iterate().

        * src/pcl-error.h:
        Fix typo in pcl_error_bad_internal_call() macro.

        * src/pcl-error.c:
        Rename pcl_measurable_length() calls to pcl_object_measure().

        * src/pcl-eval.[ch]: (pcl_eval_code_ex)
        Process new `keyword' and `defaults' parameters.

        * src/pcl-eval.[ch]: (pcl_eval_call_object_with_keywords)
        New function calls an object with extra type checking.

        * src/pcl-eval.[ch]: (pcl_eval_get_func_name, pcl_eval_get_func_desc)
        New functions retrieve information about callable objects.

        * src/pcl-eval.c:
        Handle new argument forms when calling a function (or any callable).
        Rename pcl_callable_call() calls to pcl_object_call().
        Rename pcl_iterator_next() calls to pcl_object_next().
        Rename pcl_iterable_iterator() calls to pcl_object_iterate().
        Rename pcl_measurable_length() calls to pcl_object_measure().

        * src/pcl-eval.c: (pcl_eval_frame)
        Define PEEKARG() macro (not used yet).
        Print max stack size in debug info.
        Add preprocessor switch to print condensed debug info.
        JUMP_IF_TRUE / JUMP_IF_FALSE: Check for True and False explicitly.
        MAKE_CLOSURE / MAKE_FUNCTION: Handle opcode argument (# defaults).
        Handle new opcodes (see src/pcl-opcode.h).

        * src/pcl-frame.c:
        Rename pcl_measurable_length() calls to pcl_object_measure().

        * src/pcl-function.[ch]: (pcl_function_get_name)
        New function returns the name of the PclFunction as a string.

        * src/pcl-function.[ch]: (pcl_function_set_closure)
        New function sets the closure property of the PclFunction.

        * src/pcl-function.[ch]: (pcl_function_set_defaults)
        New function sets the defaults property of the PclFunction.

        * src/pcl-generator.c:
        Rename generator_iterable_iterator() to generator_iterable_iterate().

        * src/pcl-hashable.[ch]:
        Rename pcl_hashable_hash() to pcl_object_hash().

        * src/pcl-import.c:
        Utilize new PclParseInfo structure.
        Rename pcl_measurable_length() calls to pcl_object_measure().

        * src/pcl-iterator.[ch]:
        Rename iterator() method to iterate() in PclIterableInterface.
        Rename pcl_iterable_iterator() to pcl_object_iterate().
        Rename pcl_iterator_next() to pcl_object_next().

        * src/pcl-lexer.l:
        New keyword: `cut'
        Utilize new PclParseInfo structure.
        GValue field in PclNode is no longer a pointer.

        * src/pcl-lexer.l: (pcl_parse_info_new, pcl_parse_info_destroy)
        New functions to create and destroy PclParseInfo structures.

        * src/pcl-lexer.l: (pcl_parse_info_display, parse_info_display_node)
        New functions print a parse tree in human-readable form.

        * src/pcl-list.c:
        Expose PclList methods directly rather than using wrapper functions.
        Rename pcl_iterator_next() calls to pcl_object_next().
        Rename pcl_measurable_length() calls to pcl_object_measure().
        Rename list_iterable_iterator() to list_iterable_iterate().
        Rename list_measurable_length() to list_measurable_measure().

        * src/pcl-main.c: (pcl_main)
        Make the --parse option work again.

        * src/pcl-main.c: (log_handler)
        Only query on messages with G_LOG_FLAG_FATAL set.

        * src/pcl-measurable.[ch]:
        Rename length() method to measure() in PclMeasurableInterface.
        Rename pcl_measurable_length() to pcl_object_measure().

        * src/pcl-method.[ch]:
        Define PCL_METHOD_KEYWORDS for methods that take keyword arguments.
        Define function signature PclCFunctionWithKeywords.
        Rename pcl_hashable_hash() calls to pcl_object_hash().

        * src/pcl-method.[ch]: (pcl_method_get_name)
        New function returns the name of the PclMethod as a string.

        * src/pcl-mod-builtin.c:
        Rename pcl_hashable_hash() calls to pcl_object_hash().
        Rename pcl_iterator_next() calls to pcl_object_next().
        Rename pcl_iterable_iterate() calls to pcl_object_iterate().
        Rename pcl_measurable_length() calls to pcl_object_measure().

        * src/pcl-node.[ch]:
        Add node types: ARGUMENTS, PARAMETERS
        Remove obsolete node types: ARGS, PAIR
        GValue field in PclNode is no longer a pointer.
        pcl_node_new() no longer accepts a GValue pointer argument.
        Define PCL_FLAG_PAIRS value to indicate children are in pairs.

        * src/pcl-object.[ch]:
        Add `kwds' argument to new_instance() method in PclObjectClass.
        Rename pcl_measurable_length() calls to pcl_object_measure().

        * src/pcl-opcode.h:
        New opcodes: PCL_OPCODE_CALL_FUNCTION_VA
                     PCL_OPCODE_CALL_FUNCTION_KW
                     PCL_OPCODE_CALL_FUNCTION_VA_KW

        * src/pcl-parser.y:
        Define new keyword token: KW_CUT
        Define NEW_TREE_NODE_FROM_LIST() macro.
        GValue field in PclNode is no longer a pointer.
        Add productions to support new forms of argument lists.
        Add productions to support new forms of parameter lists.
        New production: predicate_simple_term := cut_statement
        New production: cut_statement := KW_CUT
        Remove `opt_cut' production.

        * src/pcl-parser.y: (normalize_lineno)
        New function reorders the line numbers in PclNodes so that they never
                decrease as the parse tree is traversed during compilation.

        * src/pcl-parser.y: (process_arguments)
        New function assembles child lists for PCL_NT_ARGUMENTS nodes.

        * src/pcl-parser.y: (process_parameters)
        New function assembles child lists for PCL_NT_PARAMETERS nodes.

        * src/pcl-reversed.c:
        Rename pcl_measurable_length() calls to pcl_object_measure().
        Rename reversed_iterable_iterator() to reversed_iterable_iterate().
        Rename reversed_measurable_length() to reversed_measurable_measure().

        * src/pcl-run.c:
        Utilize the new PclParserInfo structure.

        * src/pcl-run.c: (run_parse_tree)
        Use pcl_parse_info_display() to display the parse tree.

        * src/pcl-string.c:
        Rename pcl_measurable_length() calls to pcl_object_measure().
        Rename string_measurable_length() to string_measureable_measure().

        * src/pcl-symtab.h:
        Define PCL_DEF_STAR and PCL_DEF_DOUBLE_STAR for parameter notation.

        * src/pcl-symtab.c:
        GValue field in PclNode is no longer a pointer.
        Rename pcl_measurable_length() calls to pcl_object_measure().

        * src/pcl-symtab.c: (symtab_default_args)
        New function processes defaults in a PCL_NT_PARAMETERS node.

        * src/pcl-symtab.c: (symtab_function)
        Handle new parameter notations.

        * src/pcl-symtab.c: (symtab_node)
        Handle PCL_NT_ARGUMENTS and PCL_NT_PARAMETERS nodes.

        * src/pcl-table.c:
        Rename pcl_measurable_length() calls to pcl_object_measure().

        * src/pcl-tuple.c:
        Optimize access to underlying GPtrArray structure.
        Expose PclTuple methods directly rather than using wrapper functions.
        Rename pcl_hashable_hash() calls to pcl_object_hash().
        Rename pcl_iterator_next() calls to pcl_object_next().
        Rename tuple_iterable_iterator() to tuple_iterable_iterate().
        Rename tuple_measurable_length() to tuple_measurable_measure().

        * src/pcl-util.c:
        Rename pcl_measurable_length() calls to pcl_object_measure().

        * src/pcl-value.[ch]:
        GValue fields in PclValue are no longer pointers.

2005-09-08  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        New built-in methods: enumerate(), reversed()

        * src/Makefile.am:
        Create sources: pcl-enumerate.[ch] pcl-reversed.[ch]

        * src/pcl.h:
        #include "pcl-enumerate.h"
        #include "pcl-reversed.h"

        * src/pcl-compile.c: (compile_conjunction)
        Also do special processing when child is a PCL_NT_DISJUNCTION.

        * src/pcl-compile.c: (compile_top_level_predicate)
        Only do special processing if child is a PCL_NT_CONJUNCTION.

        * src/pcl-enumerate.[ch]:
        New source files implement enumerate iterators.

        * src/pcl-mod-builtin.c: (_pcl_builtin_init)
        Add callable type objects for PclEnumerate and PclReversed.

        * src/pcl-reversed.[ch]:
        New source files implement reversed iterators.

2005-09-08  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.14.1

        * src/pcl-compile.c:
        Add `in_predicate' and `lineno_frozen' fields to PclCompileState.
        Key insight: Predicates only need to do special processing after
                     compiling an expression statement (PCL_NT_EXPRESSION).

        * src/pcl-compile.c: (compile_set_lineno)
        Don't update lineno if it's frozen.

        * src/pcl-compile.c: (compile_assign, compile_aug_assign)
        Freeze the lineno while compiling the right side of the assignment.

        * src/pcl-compile.c: (compile_test_and, compile_test_or)
        Fix bug causing stack underflow at runtime.

        * src/pcl-compile.c: (compile_conjunction, compile_top_level_predicate)
        Only do special processing if child is a PCL_NT_EXPRESSION.

        * src/pcl-compile.c: (compile_disjunction)
        Don't need to check if child is a PCL_NT_CONJUNCTION.

        * src/pcl-compile.c: (compile_expression)
        New function handles PCL_NT_EXPRESSION nodes.

        * src/pcl-compile.c: (compile_node)
        Change return type to void (see key insight above).

        * src/pcl-lexer.l:
        Support implicit line joining.

        * src/pcl-node.[ch]:
        Add node type: EXPRESSION

        * src/pcl-number.c: (pcl_number_as_int, pcl_number_as_float)
        Allow string objects as the argument.
        Better error handling.

        * src/pcl-parser.y:
        Encapsulate expression statements in a PCL_NT_EXPRESSION node.

        * src/pcl-symtab.c: (symtab_assign)
        Fix bug in handling PCL_NT_SLICING and PCL_NT_SUBSCRIPT nodes.

2005-09-06  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.14

        * New feature summary:
        "Pythonize" the grammar.
        New built-in method: iter()
        Predicates now return a list rather than a boolean.
        Overhauled the iterator protocol.  Now composed of `iterable' and
                `iterator' interfaces.  Some object types are both.
        Make the yield statement actually work.
        Support generator expressions.
        Support `pass' statements.

        * configure.ac:
        Enable profiling with the --enable-profile option.

        * src/Makefile.am:
        Create sources: pcl-generator.[ch]
        Move pcl-node, pcl-opcode, and pcl-symtab headers under SOURCES list.
                These are internal files that should not be installed.

        * src/pcl.h:
        #include "pcl-generator.h"
        Do not include pcl-node.h, pcl-opcode.h, or pcl-symtab.h.

        * src/pcl-callable.[ch]:
        Add PclCallableIterator object type (implements PclIterator).

        * src/pcl-compile.[ch]:
        Make PclCompileState a private internal structure.
        Start adding facilities for reporting compile-time errors.

        * src/pcl-compile.c: (compile_add_byte)
        Fix an assertion bug to allow byte values of [0..255].

        * src/pcl-compile.c: (compile_generator)
        New function handles calls to generator functions.

        * src/pcl-compile.c: (compile_gen_clause, compile_top_level_generator)
        New functions handle top-level PCL_NT_GENERATOR nodes.

        * src/pcl-compile.c: (compile_top_level_predicate)
        Return an empty list or a list containing the args tuple.

        * src/pcl-dict.c: (dict_iterable_iterator)
        * src/pcl-list.c: (list_iterable_iterator)
        * src/pcl-tuple.c: (tuple_iterable_iterator)
        * src/pcl-string.c: (string_iterable_iterator)
        Return a new PCL_TYPE_SEQUENCE_ITERATOR.

        * src/pcl-eval.c: (eval_unpack_iterable)
        Change pcl_object_iterator() calls to pcl_iterable_iterator().

        * src/pcl-eval.c: (pcl_eval_frame)
        Initialize next_instruction to first_instruction + frame->lasti + 1.
        Add goto label `fast_next_opcode' to speed up the main loop.
        Change pcl_object_iterator() calls to pcl_iterable_iterator().

        * src/pcl-eval.c: (pcl_eval_code_ex)
        Check for generator flag before calling pcl_eval_frame().

        * src/pcl-frame.c: (frame_constructor)
        Initialize `lasti' field of PclFrame to -1.

        * src/pcl-generator.[ch]:
        New source files implement generator iterators.

        * src/pcl-iterator.[ch]:
        Overhauled iterator protocol.
        Define interfaces PclIterable and PclIterator.

        * src/pcl-lexer.l:
        Track indentation and generate INDENT and DEDENT tokens.
        Generate NEWLINE tokens on non-commented, non-escaped newlines.

        * src/pcl-lexer.l: (pcl_parse_input_string)
        Append a secret `pass' statement at the end of the source code string
                to flush any pending DEDENT tokens before terminating.

        * src/pcl-list.c: (list_new_instance)
        * src/pcl-tuple.c: (tuple_new_instance)
        Optional argument may be a sequence OR iterator.

        * src/pcl-mod-builtin.c:
        Change pcl_object_iterator() calls to pcl_iterable_iterator().

        * src/pcl-mod-builtin.c: (builtin_iter)
        New function implements the built-in method iter().

        * src/pcl-mod-builtin.c: (builtin_sum)
        Fix bug so that optional argument is truly optional.

        * src/pcl-node.[ch]:
        Add node type: GENERATOR
        Change default opcode to 0 instead of PCL_OPCODE_NONE.

        * src/pcl-opcode.h:
        Cosmetic changes.

        * src/pcl-parser.y:
        Remove obsolete keyword tokens: KW_ENUM KW_NONTRAN
        "Pythonize" the grammar with INDENT, DEDENT, and NEWLINE tokens.
        Semicolon no longer required for single statements per line.
        Eliminate curly braces in function and predicate suites.
        Eliminate parentheses in keyword statements (assert, del, yield, etc).
        New production: enclosure := generator_expression
        New production: call := primary generator_expression
        New production: simple_statement := pass_statement
        New production: predicate_simple_term := pass_statement
        New production: pass_statement := KW_PASS
        Add productions to support generator expressions.
        The cut symbol is now '$' instead of '~'.
        Expect default opcode of 0 instead of PCL_OPCODE_NONE.

        * src/pcl-parser.y: (yyerror)
        Print custom error message for unexpected INDENT or DEDENT tokens.

        * src/pcl-sequence.[ch]:
        Add PclSequenceIterator object type (implements PclIterator).

        * src/pcl-symtab.c: (symtab_tmpname_borrow, symtab_tmpname_return)
        New functions manage hidden symbols for various language features.

        * src/pcl-symtab.c: (symtab_comprehension)
        Embed the hidden symbol name into the PCL_NT_COMPREHENSION node.

        * src/pcl-symtab.c: (symtab_generator)
        New function handles PCL_NT_GENERATOR nodes.

        * src/pcl-symtab.c: (symtab_preddef)
        New function handles PCL_NT_PREDICATE nodes (used to be handled by
                symtab_funcdef(), but we have special semantics now).

        * src/pcl-symtab.c: (symtab_node)
        Handle PCL_NT_FOR nodes properly.

        * src/pcl-symtab.c: (symtab_entry_new)
        Generators have the same symbol table semantics as normal functions.

2005-08-29  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        New built-in methods: hex(), oct(), sum(), zip()
        Source imports are working (though sys.path is still [] by default).

        * src/pcl.c: (pcl_initialize)
        Add fatal errors if bad things happen during initialization.
        Write clearer code to initialize __builtin__ and sys modules.

        * src/pcl-dict.c:
        * src/pcl-float.c:
        * src/pcl-int.c:
        * src/pcl-list.c:
        * src/pcl-string.c:
        * src/pcl-tuple.c:
        * src/pcl-type.c:
        Begin implementing built-in methods.

        * src/pcl-dict.c: (dict_has_key, dict_get_item, dict_set_item)
        Raise TypeError if key is not hashable.

        * src/pcl-dict.c: (dict_set_item, dict_mapping_get_item,
                           dict_mapping_get_item_string)
        Raise KeyError if key lookup fails.

        * src/pcl-dict.[ch]: (pcl_dict_has_key[_string])
        * src/pcl-mapping.[ch]: (pcl_mapping_has_key[_string])
        Change return type to gint so that -1 can be returned on error.

        * src/pcl-eval.c: (pcl_eval_frame)
        PCL_OPCODE_COMPARISON_IN: Check for KeyError
        PCL_OPCODE_COMPARISON_NOT_IN: Check for KeyError

        * src/pcl-eval.c: (pcl_eval_get_builtins)
        Return builtins from current frame or else current thread state.

        * src/pcl-import.c:
        Source imports are working.

        * src/pcl-int.c: (int_number_hex)
        New function implements PclNumber's hex() method. 

        * src/pcl-int.c: (int_number_oct)
        New function implements PclNumber's oct() method.

        * src/pcl-list.c: (list_compare)
        New function implements PclObject's compare() method.

        * src/pcl-module.c:
        Rename get_dict() method to dict().

        * src/pcl-mod-builtin.c: (builtin_hex)
        New function implements the built-in method hex().

        * src/pcl-mod-builtin.c: (builtin_oct)
        New function implements the built-in method oct().

        * src/pcl-mod-builtin.c: (builtin_sum)
        New function implements the built-in method sum().

        * src/pcl-mod-builtin.c: (builtin_zip)
        New function implements the built-in method zip().

        * src/pcl-number.[ch]:
        Add hex() and oct() methods.

        * src/pcl-object.[ch]:
        Rename get_dict() method to dict().

        * src/pcl-object.c: (pcl_object_has_attr)
        Clear KeyError if key lookup failed.

        * src/pcl-traceback.c: (traceback_depth, traceback_print)
        Fix infinite loop bug related to fetching private members.

        * src/pcl-type.c:
        Add `dict' and `methods' properties.
        Implement PclObject's dict() method.

2005-08-25  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support callable type objects.
        Privatize members of GObject-derived structs.

        * src/Makefile.am:
        Create sources: pcl-type.[ch]

        * src/pcl-type.[ch]:
        New source files implement type objects.

        * src/pcl.h:
        #include "pcl-type.h"
        PclObject is no longer abstract, so move its listing.
        Add macro PCL_RETURN_NONE to properly return None from a function.
        Add macro PCL_RETURN_TRUE to properly return True from a function.
        Add macro PCL_RETURN_FALSE to properly return False from a function.

        * src/pcl.c:
        Move log_instantiation() to pcl-util and make it public.
        Adjust log_instantiation() calls in pcl_none(), pcl_true(), etc.

        * src/pcl-arg.c: (arg_convert_error)
        * src/pcl-calllable.c: (pcl_callable_call)
        * src/pcl-cell.c: (cell_cache_repr)
        * src/pcl-eval.c: (eval_raise)
        * src/pcl-mod-builtin.c: (builtin_ord)
        * src/pcl-method.c: (method_repr)
        * src/pcl-object.c: (object_repr, object_str, pcl_object_dir)
        Fetch object's type name using new pcl_type_name().

        * src/pcl-bool.h:
        * src/pcl-callable.h:
        * src/pcl-cell.h:
        * src/pcl-code.h:
        * src/pcl-dict.h:
        * src/pcl-exception.h:
        * src/pcl-file.h:
        * src/pcl-float.h:
        * src/pcl-frame.h:
        * src/pcl-function.h:
        * src/pcl-hashable.h:
        * src/pcl-int.h:
        * src/pcl-iterator.h:
        * src/pcl-list.h:
        * src/pcl-mapping.h:
        * src/pcl-measurable.h:
        * src/pcl-method.h:
        * src/pcl-module.h:
        * src/pcl-number.h:
        * src/pcl-object.h:
        * src/pcl-sequence.h:
        * src/pcl-singleton.h:
        * src/pcl-slice.h:
        * src/pcl-string.h:
        * src/pcl-table.h:
        * src/pcl-traceback.h:
        * src/pcl-tuple.h:
        * src/pcl-value.h:
        Cosmetic changes in the standard GObject macros.

        * src/pcl-bool.[ch]:
        * src/pcl-cell.[ch]:
        * src/pcl-code.[ch]:
        * src/pcl-dict.[ch]:
        * src/pcl-exception.[ch]:
        * src/pcl-file.[ch]:
        * src/pcl-float.[ch]:
        * src/pcl-frame.[ch]:
        * src/pcl-function.[ch]:
        * src/pcl-int.[ch]:
        * src/pcl-iterator.[ch]:
        * src/pcl-list.[ch]:
        * src/pcl-method.[ch]:
        * src/pcl-module.[ch]:
        * src/pcl-object.[ch]:
        * src/pcl-singleton.[ch]:
        * src/pcl-slice.[ch]:
        * src/pcl-string.[ch]:
        * src/pcl-table.[ch]:
        * src/pcl-traceback.[ch]:
        * src/pcl-tuple.[ch]:
        Add pcl_*_get_type_object() to fetch the appropriate type object.
        Point the class attribute `type' to pcl_*_get_type_object().

        * src/pcl-dict.[ch]:
        * src/pcl-exception.[ch]:
        * src/pcl-file.[ch]:
        * src/pcl-function.[ch]:
        * src/pcl-iterator.[ch]:
        * src/pcl-list.[ch]:
        * src/pcl-method.[ch]:
        * src/pcl-module.[ch]:
        * src/pcl-slice.[ch]:
        * src/pcl-table.[ch]:
        * src/pcl-traceback.[ch]:
        * src/pcl-tuple.[ch]:
        Privatize members of instance struct.

        * src/pcl-bool.c: (bool_new_instance)
        * src/pcl-float.c: (float_new_instance)
        * src/pcl-int.c: (int_new_instance)
        * src/pcl-list.c: (list_new_instance)
        * src/pcl-object.c: (object_new_instance)
        * src/pcl-string.c: (string_new_instance)
        * src/pcl-tuple.c: (tuple_new_instance)
        New function implements PclObject's new_instance() method.

        * src/pcl-list.c: (list_sequence_as_list)
        * src/pcl-string.c: (string_sequence_as_list)
        * src/pcl-tuple.c: (tuple_sequence_as_list)
        New function implements PclSequence's as_list() method.

        * src/pcl-list.c: (list_sequence_as_tuple)
        * src/pcl-string.c: (string_sequence_as_tuple)
        * src/pcl-tuple.c: (tuple_sequence_as_tuple)
        New function implements PclSequence's as_tuple() method.

        * src/pcl-file.c:
        * src/pcl-import.c:
        * src/pcl-mod-builtin.c:
        * src/pcl-mod-sys.c:
        * src/pcl-util.c:
        Utilize new PCL_RETURN_(NONE | TRUE | FALSE) macros.

        * src/pcl-callable.[ch]: (pcl_callable_call_method)
        New function provides an easier way to invoke object methods.

        * src/pcl-error.[ch]: (pcl_error_exception_matches)
        New function compares given exception against current exception.

        * src/pcl-import.[ch]:
        Translation of Pyhon's import mechanism complete but untested.

        * src/pcl-lexer.l: (lexer_process_float, lexer_process_int)
        Improve error handling when string conversion fails.

        * src/pcl-main.c: (pcl_main)
        Make CRITICAL log messages fatal when --debug option is given.

        * src/pcl-mod-builtin.c: (_pcl_builtin_init)
        Add callable type objects to the __builtin__ module.

        * src/pcl-object.h:
        Add new_instance() method to PclObjectClass.
        Add macro PCL_GET_TYPE_OBJECT() to fetch an object's type object.

        * src/pcl-sequence.[ch]:
        Add as_list() and as_tuple() methods to PclSequenceInterface.

        * src/pcl-util.[ch]: (pcl_log_instantiation)
        New function emits a log message about instantiating an object.

2005-08-22  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        New built-in methods: all(), any(), eval()

        * src/pcl-method.c: (method_hashable_hash)
        Remove function pointer from hash calculation to make GCC 4.0 happy.

        * src/pcl-mod-builtin.c: (builtin_all)
        New function implements the built-in method all().

        * src/pcl-mod-builtin.c: (builtin_any)
        New function implements the built-in method any().

        * src/pcl-mod-builtin.c: (builtin_eval)
        New function implements the built-in method eval().

2005-08-19  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support `assert' and `raise' statements.
        Preliminary support for `exec' and `yield' statements.
        The cut symbol is now the percent sign ('%').
        Support integer bit inversion using the '~' operator.

        * src/Makefile.am:
        Create sources: pcl-mod-exceptions.c pcl-run.[ch]

        * src/pcl-mod-exceptions.c:
        New source file implements the standard library module "exceptions".

        * src/pcl-run.[ch]:
        New source files implement Python's high-level `run' API.

        * src/pcl.h:
        #include "pcl-run.h"
        Define parser start state constants.
        Rename pcl_parse_tree_destroy() to pcl_ast_destroy().

        * src/pcl.c:
        Use a fixed-length array for exit functions.

        * src/pcl.c: (pcl_initialize)
        Initialize the new `exceptions' module.

        * src/pcl-function.c: (function_set_property, function_finalize)
        * src/pcl-method.c: (method_finalize)
        Stop using the obsoleted PCL_CHECKED_UNREF() macro.

        * src/pcl-iterator.c: (iterator_set_property)
        * src/pcl-method.c: (method_set_property)
        Use pcl_extract_object() to extract a PclObject from a GValue.

        * src/pcl-callable.[ch]: (pcl_callable_call_function)
        New function provides an easier way to invoke a callable object.

        * src/pcl-callable.c: (pcl_callable_call)
        Raise a TypeError if the object is not callable.
        Raise a SystemError if the callable object returns NULL and hasn't
                raised an exception.

        * src/pcl-code.[ch]:
        Add `flags' field to PclCode.
        Define PCL_CODE_GENERATOR flag.

        * src/pcl-code.[ch]: (pcl_code_get_num_free)
        New function returns the length of the `freevars' field.

        * src/pcl-compile.[ch]:
        Add `flags' field to PclCompileState.
        Rename pcl_compile_parse_tree() to pcl_compile_ast().

        * src/pcl-compile.c: (compile_assert)
        New function handles PCL_NT_ASSERT nodes.

        * src/pcl-compile.c: (compile_exec)
        New function handles PCL_NT_EXEC nodes.

        * src/pcl-compile.c: (compile_return)
        Don't allow return with an argument if in a generator function.

        * src/pcl-compile.c: (compile_yield)
        New function handles PCL_NT_YIELD nodes.

        * src/pcl-compile.c: (compile_update_flags)
        New function sets PclCompileState flags and miscellaneous other stuff.

        * src/pcl-error.[ch]: (pcl_null_error)
        New convenience function raises a SystemError if a NULL pointer is
                passed to an internal function that's not expecting one.

        * src/pcl-error.[ch]: (pcl_type_error)
        New convenience function raises a TypeError with the given message.

        * src/pcl-eval.c:
        Add new WhyCode value: WHY_YIELD

        * src/pcl-eval.c: (eval_exec_statement)
        New function handles EXEC_STMT opcodes. 

        * src/pcl-eval.c: (pcl_eval_frame)
        Initialize stack pointer to frame->tos.  This allows generator
                functions to continue from where they yielded a value.
        Add some 'goto' labels to speed up the main loop a bit.
        Handle new opcodes (see src/pcl-opcode.h).

        * src/pcl-frame.[ch]:
        Add `tos' field to PclFrame.
        Add `locals_to_fast' method and make the other one a method too.

        * src/pcl-import.[ch]:
        Rename functions to conform to Python's import API.
        More hacking about on importing dynamic and source modules.

        * src/pcl-lexer.l:
        New keywords: `assert', `exec', `pass', `yield'
        Remove keyword: `enum'
        Remove operator: #^ (table update)
        Rename global_parse_tree to global_ast.
        Implement start states: FILE_INPUT, EVAL_INPUT, SINGLE_INPUT
        Add preliminary support for Python's parser API.

        * src/pcl-main.c: (pcl_main)
        Invoke the pcl-run API (for now, we lose some option functionality).

        * src/pcl-mod_builtin.c: (builtin_reload)
        New function implements the built-in method reload().

        * src/pcl-node.[ch]:
        Add node types: ASSERT, EXEC, YIELD
        Remove ENUM node type and all the crufty old TABLE_* node types.

        * src/pcl-object.h:
        Remove the PCL_UNCHECKED_UNREF() macro.
        Add some preliminary hooks for PclType objects.

        * src/pcl-opcode.h:
        New opcodes: PCL_OPCODE_EXEC_STMT, PCL_OPCODE_YIELD_VALUE

        * src/pcl-parser.y:
        Define new keyword tokens: KW_ASSERT, KW_EXEC, KW_PASS, KW_YIELD
        Define new start tokens: EVAL_INPUT, FILE_INPUT, SINGLE_INPUT
        Define new whitespace tokens: DEDENT, INDENT, NEWLINE (not yet used)
        New production: simple_statement := assert_statement
        New production: simple_statement := execute_statement
        New production: simple_statement := yield_statement
        New production: predicate_term := assert_statement
        New production: predicate_term := execute_statement
        Add productions for assert_statement.
        Add productions for execute_statement.
        Add productions for yield_statement.
        Clean out all the old enum and table cruft.

        * src/pcl-symtab.[ch]:
        Add `generator' field to PclSymtabEntry.

        * src/pcl-symtab.c: (symtab_node)
        Set the `generator' flag when a PCL_NT_YIELD node is encountered.

        * src/pcl-util.[ch]:
        Make the format parameter in pcl_build_value(), pcl_va_build_value(),
                and all the helper functions constant.

2005-08-15  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support raise statement.

        * pcl-compile.c: (compile_raise)
        New function to compile PCL_NT_RAISE nodes.

        * pcl-eval.c: (eval_raise)
        New function to handle new opcode (too complex to inline).

        * pcl-eval.c: (pcl_eval_frame)
        Handle new opcode (see src/pcl-opcode.h).
        Check for WHY_RERAISE after main loop.

        * pcl-lexer.l:
        New keyword: `raise'

        * pcl-node.[ch]:
        Add node type: RAISE

        * pcl-opcode.h:
        New opcode: PCL_OPCODE_RAISE_EXCEPTION

        * pcl-parser.y:
        Define new keyword token: KW_RAISE
        New production: simple_statement := raise_statement
        New production: predicate_term := raise_statement
        Add productions for raise_statement (allow up to 3 arguments).

2005-08-12  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        New built-in methods: chr() dir() max() min() ord() round() vars()
        New sys module method: exit()

        * src/pcl-error.[ch]: (pcl_error_set_from_errno)
        New function sets a standard error message based on errno.

        * src/pcl-list.[ch]:
        Add `sort' method to PclListClass.

        * src/pcl-mod-builtin.c: (builtin_chr, builtin_ord)
        New functions implement the built-in methods chr() and ord().

        * src/pcl-mod-builtin.c: (builtin_dir, builtin_vars)
        New functions implement the built-in methods dir() and vars().

        * src/pcl-mod-builtin.c: (builtin_max, builtin_min)
        New functions implement the built-in methods max() and min().

        * src/pcl-mod-builtin.c: (builtin_round)
        New function implements the built-in method round().

        * src/pcl-mod-math.c:
        Use error-reporting system for non-fatal error conditions.

        * src/pcl-mod-sys.c: (sys_displayhook)
        Use error-reporting system for non-fatal error conditions.

        * src/pcl-mod-sys.c: (sys_exit)
        New function implements sys module method exit().

        * src/pcl-object.[ch]: (pcl_object_dir)
        New function returns the given object's symbol table keys.

2005-08-11  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.13

        * New feature summary:
        Support list comprehensions.
        Support string subscripts and slices.
        Support exceptions and source-code tracebacks.
        New built-in method: range()

        * src/Makefile.am:
        Remove verbose option from AM_YFLAGS.
        Add G_LOG_DOMAIN definition to INCLUDES.
        Change pcl_SOURCES from "pcl-main.c" to "main.c".
        Create sources: pcl-exception.[ch] pcl-file.[ch] pcl-main.[ch]
                        pcl-traceback.[ch]

        * src/pcl.h:
        #include "pcl-exception.h"
        #include "pcl-file.h"
        #include "pcl-main.h"
        #include "pcl-traceback.h"
        Remove extern declarations lineno and current_input_filename.

        * src/pcl.[ch]:
        Move singleton functions here and define macros for accessing them.

        * src/pcl.[ch]: (pcl_parse_tree_destroy)
        New function frees resources associated with a parse tree.

        * src/pcl.[ch]: (pcl_parse_input_file)
        Add "pcl" prefix to function name and drop debug flag parameter.
        Generates a parse tree by parsing the given filename.

        * src/pcl.[ch]: (pcl_parse_input_string)
        New function generates a parse tree from the given string.

        * src/pcl.[ch]: (pcl_exit)
        New function calls pcl_finalize() and then calls the standard C
                library function exit(status).

        * src/pcl.[ch]: (pcl_at_exit)
        New function registers a function to be called by pcl_finalize().

        * src/pcl-config.h:
        #include <unistd.h>
        Update comments.

        * src/pcl-main.[ch]:
        This file is now part of libpcl, not a stand-alone program.
        Rename the main(argc, argv) function to pcl_main(argc, argv).
        Add --command command-line option, which will eventually execute
                source code given on the command-line but doesn't work yet.
        Modify handling of logging messages: debug-level messages should only
                be printed if the --debug option was given, and should never
                trigger a query (see g_on_error_query()).
        Dump parse trees as a sequence of debug-level logging messages.
        Print error message if pcl_eval_code() returns NULL.

        * src/main.c:
        New source file implements trivial PCL executable.

        * src/pcl-exception.[ch]:
        New source files implement built-in exception types.

        * src/pcl-file.[ch]:
        New source files implement file objects.

        * src/pcl-traceback.[ch]:
        New source files implement source code traceback objects.

        * src/pcl-bool.c: (bool_class_init)
        * src/pcl-cell.c: (cell_class_init)
        * src/pcl-code.c: (code_class_init)
        * src/pcl-dict.c: (dict_class_init)
        * src/pcl-float.c: (float_class_init)
        * src/pcl-frame.c: (frame_class_init)
        * src/pcl-function.c: (function_class_init)
        * src/pcl-int.c: (int_class_init)
        * src/pcl-iterator.c: (iterator_class_init)
        * src/pcl-list.c: (list_class_init)
        * src/pcl-method.c: (method_class_init)
        * src/pcl-module.c: (module_class_init)
        * src/pcl-singleton.c: (ellipsis_class_init)
        * src/pcl-singleton.c: (none_class_init)
        * src/pcl-singleton.c: (not_implemented_class_init)
        * src/pcl-slice.c: (slice_class_init)
        * src/pcl-string.c: (string_class_init)
        * src/pcl-table.c: (table_class_init)
        * src/pcl-tuple.c: (tuple_class_init)
        Store "printable name" string in PclObject base class.

        * src/pcl-code.c: (code_set_property)
        * src/pcl-frame.c: (frame_set_property)
        * src/pcl-slice.c: (slice_set_property)
        Use pcl_extract_object() to extract a PclObject from a GValue.

        * src/pcl-arg.c:
        Use g_error() instead of g_assert() for fatal error conditions.
        Use new error-reporting system for non-fatal error conditions.

        * src/pcl-bool.[ch]:
        Move pcl_bool_true() and pcl_bool_false() functions to pcl.c.

        * src/pcl-bool.c: (pcl_bool_from_boolean)
        Use PCL_TRUE and PCL_FALSE macros instead of direct function calls.

        * src/pcl-cell.c: (cell_cache_repr)
        Show "printable name" instead of GType name.

        * src/pcl-cell.[ch]: (pcl_cell_get, pcl_cell_set)
        New functions provide managed access to cell reference.

        * src/pcl-code.[ch]:
        Add `first_lineno' and `lineno_table' fields to PclCode.
        Change type of `instructions' field to PclObject pointer.
        Add `addr_to_line' method to PclCodeClass.

        * src/pcl-code.c: (code_addr_to_line)
        New function returns the corresponding line number from the given
                bytecode address.

        * src/pcl-compile.h:
        Change type of `instructions' field to PclObject pointer.
        Add `next_instruction', `tmpname', `lineno_table',
                `lineno_table_next', `lineno_table_last', `first_lineno',
                `last_lineno', `last_address', and `lineno' fields to
                PclCompileState struct.

        * src/pcl-compile.c:
        Adapt to new `instructions' field type.
        Use PCL_NONE macros instead of direct function calls.
        Implement line number tracking as parse tree is compiled.
        Prefer compile_add_oparg() to adding the opcode and arg separately.

        * src/pcl-compile.c: (compile_add_oparg)
        New function properly handles 32-bit arguments.

        * src/pcl-compile.c: (compile_comprehension, compile_list_clause)
        New functions handle PCL_NT_COMPREHENSION nodes.

        * src/pcl-error.[ch]:
        Complete overhaul of these files to implement systematic error
                reporting with exception types and source code tracebacks.

        * src/pcl-eval.c:
        Remove PCL prefix from evaluation-related macros.
        Implement better error handling (still room for improvement).

        * src/pcl-eval.c: (eval_call_trace)
        New function calls custom tracing function.

        * src/pcl-eval.c: (eval_call_exc_trace)
        New function calls custom exception tracing function.

        * src/pcl-eval.c: (pcl_eval_frame)
        Adapt to changes in PclCode field types.
        Declare a `success' flag for functions that return a boolean.
        Update frame->lasti at beginning of main loop.
        Break out of switch statement when an error condition occurs.
        Use singleton object macros instead of direct function calls.
        Utilize new pcl_cell_get() and pcl_cell_set() functions.
        Handle new opcode PCL_OPCODE_EXTENDED_ARG.
        Better exception handling after switch statement.

        * src/pcl-eval.[ch]: (pcl_eval_get_builtins)
        New function returns the current frame's `builtins' dictionary.

        * src/pcl-eval.[ch]: (pcl_eval_set_profile)
        New function sets the current thread's custom profiling function.

        * src/pcl-eval.[ch]: (pcl_eval_set_trace)
        New function sets the current thread's custom tracing function.

        * src/pcl-float.c: (pcl_float_from_string)
        Throw OverflowError exception if g_ascii_strtod() fails.

        * src/pcl-frame.h:
        Add `ts' and `lasti' fields to PclFrame.

        * src/pcl-frame.c:
        Use g_error() instead of g_assert() for fatal error conditions.

        * src/pcl-frame.c: (frame_constructor)
        Rework initialization of `builtins' and `previous' fields.

        * src/pcl-import.c:
        Use PCL_NONE macro instead of direct function calls.
        More preliminary work on importing dynamic and source modules.

        * src/pcl-import.[ch]: (pcl_import_exec_code_module)
        New function to load and execute a PCL module.

        * src/pcl-lexer.l:
        Track line and column numbers as tokens are read.
        Use new error-reporting system for parsing errors.

        * src/pcl-lexer.l: (pcl_parse_tree_destroy)
        New function frees resources associated with a parse tree.

        * src/pcl-lexer.l: (pcl_parse_input_file)
        Moved from pcl-parser, and given a "pcl" prefix.
        Add "pcl" prefix to function name and drop debug flag parameter.
        Generates a parse tree by parsing the given filename.

        * src/pcl-lexer.l: (pcl_parse_input_string)
        New function generates a parse tree from the given string.

        * src/pcl-method.c: (method_callable_call)
        Raise TypeError exception if the argument tuple is invalid.

        * src/pcl-mod-builtin.c: (builtin_delattr, builtin_setattr)
        Use PCL_NONE macro instead of direct function call.

        * src/pcl-mod-builtin.c: (builtin_range, builtin_range_helper)
        New functions implement built-in method range().

        * src/pcl-mod-builtin.c: (_pcl_builtin_init)
        Use singleton object macros instead of direct function calls.

        * src/pcl-mod-sys.c: (sys_displayhook)
        New function implements sys module method displayhook().

        * src/pcl-mod-sys.c: (sys_exc_clear)
        New function implements sys module method exc_clear().

        * src/pcl-mod-sys.c: (sys_exc_info)
        New function implements sys module method exc_info().

        * src/pcl-mod-sys.c: (sys_excepthook)
        New function implements sys module method excepthook().

        * src/pcl-mod-sys.c: (_pcl_sys_init)
        New sys module members: stdin, stdout, stderr,
                                __displayhook__, __excepthook__,
                                __stdin__, __stdout__, __stderr__ 

        * src/pcl-module.[ch]: (pcl_module_get_dict)
        New function returns __dict__ member of a PclModule.

        * src/pcl-node.[ch]:
        Add node type: COMPREHENSION
        Change `opcode' field of PclNode to type gint.

        * src/pcl-node.[ch]: (pcl_node_contents)
        Returns a textual description of the given parse tree node.
        Replaces obsolete function pcl_node_print().

        * src/pcl-opcode.h:
        Remove PclOpcode and PclOparg type definitions.
        New opcode: PCL_OPCODE_EXTENDED_ARG

        * src/pcl-object.[ch]:
        Add `printable_name' field and `str' method to PclObjectClass.
        Move pcl_object_none(), pcl_object_not_implemented(), and
                pcl_object_ellipsis() functions to pcl.c.
        Move default `repr' implementation into pcl_object_repr().
        Use singleton object macros instead of direct function calls.

        * src/pcl-parser.y:
        Remove PCL prefix from parsing-related macros.
        Use @n location tracking for recording line numbers in nodes.
        Merge `proper_slice' production into `slicing'.
        Add productions to support list comprehensions.
        Move yyerror() from pcl-lexer, use new error-reporting system.

        * src/pcl-singleton.h:
        Rename PCL_(type) macros to PCL_(type)_OBJECT so they don't cause a
                namespace collision with new accessor macros.

        * src/pcl-state.[ch]:
        Add exception, profiling, and tracing fields to PclThreadState.
        Use g_error() instead of g_assert() for fatal error conditions.

        * src/pcl-state.[ch]: (pcl_thread_state_get_dict)
        Return __dict__ member of current thread state.

        * src/pcl-string.[ch]: (pcl_string_resize)
        New function resizes a PclString object.

        * src/pcl-string.c: (string_str)
        New function implements PclObject's str() method.

        * src/pcl-string.c: (string_sequence_get_item)
        New function implements PclSequence's get_item() method.

        * src/pcl-string.c: (string_sequence_get_slice)
        New function implements PclSequence's get_slice() method.

        * src/pcl-symtab.h:
        Add `tmpname' field to PclSymtabEntry struct.

        * src/pcl-symtab.c: (symtab_comprehension)
        New function to handle PCL_NT_COMPREHENSION nodes.
        Called from symtab_node().

        * src/pcl-table.c: (pcl_table_entry_new)
        Use PCL_NONE macro instead of direct function call.

        * src/pcl-util.[ch]: (pcl_flush_line)
        New function writes a newline to sys.stdout when appropriate.

        * src/pcl-util.[ch]: (pcl_find_file)
        New function searches sys.path for the given filename.

        * src/pcl-util.[ch]: (pcl_extract_object)
        New function properly extracts a PclObject from a GValue.
        Primarily for use with GObject's set_property() method.

        * src/pcl-value.c:
        Implement PclObject's new str() method.

2005-07-22  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-symtab.c: (symtab_assign)
        Call symtab_node() instead of symtab_assign() for first child of
                PCL_NT_SLICING and PCL_NT_SUBSCRIPT nodes.
        Fixes bug reported by Hien Nguyen.

2005-07-21  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-symtab.c: (symtab_node)
        Recurse on last child of PCL_NT_ASSIGN nodes.
        Fixes bug reported by Grant Degenhardt.

2005-07-18  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support sequence repetition using the '*' operator.
        Use GString as the underlying storage type of PclString.
        Clean up the C API (retract the coding policy of 06/24).
        Break some optional PclObject methods into separate interfaces.
        Coding Policy: Use PclObject in public function signatures.

        * src/Makefile.am:
        Create sources: pcl-callable.[ch] pcl-hashable.[ch]
                        pcl-measurable.[ch] pcl-util.[ch]

        * src/pcl.h:
        #include "pcl-callable.h"
        #include "pcl-hashable.h"
        #include "pcl-measurable.h"
        #include "pcl-util.h"

        * src/pcl-config.h:
        Update comments.

        * src/pcl-callable.[ch]:
        New source files implement callable interface.

        * src/pcl-hashable.[ch]:
        New source files implement hashable interface.

        * src/pcl-measurable.[ch]:
        New source files implement measurable interface.

        * src/pcl-util.[ch]:
        New source files provide miscellaneous utility functions.

        * src/pcl.c:
        * src/pcl-arg.[ch]:
        * src/pcl-code.c:
        * src/pcl-compile.[ch]:
        * src/pcl-dict.[ch]:
        * src/pcl-eval.[ch]:
        * src/pcl-float.c:
        * src/pcl-frame.[ch]:
        * src/pcl-function.[ch]:
        * src/pcl-import.[ch]:
        * src/pcl-int.c:
        * src/pcl-iterator.h:
        * src/pcl-list.[ch]:
        * src/pcl-main.c:
        * src/pcl-method.[ch]:
        * src/pcl-mod-builtin.c:
        * src/pcl-mod-math.c:
        * src/pcl-mod-sys.c:
        * src/pcl-module.[ch]:
        * src/pcl-singleton.c:
        * src/pcl-slice.[ch]:
        * src/pcl-state.h:
        * src/pcl-string.[ch]:
        * src/pcl-symtab.[ch]:
        * src/pcl-table.[ch]:
        * src/pcl-tuple.[ch]:
        * src/pcl-value.c:
        Adapt to coding policy of using only PclObject (no derived types) to
                pass PCL object handles in the public API.  This approach
                provides a better abstraction of PCL objects to the user.

        * src/pcl-function.c:
        * src/pcl-method.c:
        Implement new PclCallable interface (replaces pcl_object_call()).

        * src/pcl-bool.c:
        * src/pcl-code.c:
        * src/pcl-float.c:
        * src/pcl-int.c:
        * src/pcl-method.c:
        * src/pcl-string.c:
        * src/pcl-tuple.c:
        Implement new PclHashable interface (replaces pcl_object_hash()).

        * src/pcl-dict.c:
        * src/pcl-list.c:
        * src/pcl-string.c:
        * src/pcl-tuple.c:
        Implement new PclMeasurable interface (replaces pcl_*_length()).

        * src/pcl-arg.c:
        * src/pcl-compile.c:
        * src/pcl-dict.c:
        * src/pcl-eval.c:
        * src/pcl-frame.c:
        * src/pcl-import.c:
        * src/pcl-list.c:
        * src/pcl-mod-builtin.c:
        * src/pcl-symtab.c:
        * src/pcl-table.c:
        * src/pcl-tuple.c:
        Use new PclMeasurable interface to obtain lengths.

        * src/pcl-bool.c:
        * src/pcl-dict.c:
        * src/pcl-float.c:
        * src/pcl-int.c:
        * src/pcl-iterator.[ch]:
        * src/pcl-mapping.[ch]:
        * src/pcl-number.[ch]:
        * src/pcl-sequence.[ch]:
        Do not use the word 'class' to refer to interfaces.

        * src/pcl-arg.c: (arg_convert_simple)
        * src/pcl-code.c: (code_repr)
        * src/pcl-function.c: (function_repr)
        * src/pcl-import.c: (get_parent, find_module)
        * src/pcl-module.c: (module_get_name, module_get_filename)
        * src/pcl-object.c: (pcl_object_get_attr, pcl_object_set_attr)
        Utilize pcl_string_as_string() to simplify code.

        * src/pcl-list.c: (list_sequence_contains)
        * src/pcl-string.c: (string_sequence_contains)
        * src/pcl-tuple.c: (tuple_sequence_contains)
        New function implements PclSequence's contains() method.


        * src/pcl-list.c: (list_sequence_repeat)
        * src/pcl-string.c: (string_sequence_repeat)
        * src/pcl-tuple.c: (tuple_sequence_repeat)
        New function implements PclSequence's repeat() method.


        * src/pcl-arg.c: (arg_convert_simple)
        Handle 'i' (signed int) format character.

        * src/pcl-dict.[ch]:
        Remove pcl_dict_length() (use pcl_measurable_length()).

        * src/pcl-dict.c:
        Remove pcl_dict_mapping_length() (use pcl_measurable_length()).

        * src/pcl-dict.c: (dict_init)
        Use pcl_hashable_hash() as the GHashTable hashing function.

        * src/pcl-eval.c:
        Use new PclCallable interface to invoke callable objects.

        * src/pcl-eval.c: (pcl_eval_frame)
        BINARY_MULTIPLY: Call pcl_sequence_repeat() if either operand is a
                         sequence.

        * src/pcl-list.[ch]:
        Implement pcl_list_del_item() as a macro.
        Remove pcl_list_length() (use pcl_measurable_length()).

        * src/pcl-list.c:
        Remove pcl_list_sequence_length() (use pcl_measurable_length()).

        * src/pcl-mapping.[ch]:
        Implement pcl_mapping_del_item() as a macro.
        Implement pcl_mapping_del_item_string() as a macro.
        Remove pcl_mapping_length() (use pcl_measurable_length()).

        * src/pcl-mod-builtin.c:
        Use new PclCallable interface to simplify code.
        Use new PclHashable interface to obtain hash values.

        * src/pcl-mod-math.c:
        Utilize pcl_build_value() to simplify code.

        * src/pcl-mod-sys.c:
        Declare pcl_sys_set_argv().

        * src/pcl-object.[ch]:
        Remove call(), hash(), and length() methods from PclObject.

        * src/pcl-sequence.[ch]:
        Implement pcl_sequence_del_item() as a macro.
        Implement pcl_sequence_del_slice() as a macro.
        Add repeat() and contains() methods to PclSequence.
        Remove pcl_sequence_length() (use pcl_measurable_length()).

        * src/pcl-sequence.c: (pcl_sequence_get_item)
        Subclasses are now responsible for reference counting.

        * src/pcl-singleton.c:
        Implement new PclHashable interface on all singleton object types.

        * src/pcl-string.c:
        Remove pcl_string_hash() (use pcl_hashable_hash()).
        Remove pcl_string_sequence_length() (use pcl_measurable_length()).
        Use GString instead of a gchar pointer as the underlying storage type.
        Support embedded nul characters in a PclString.

        * src/pcl-string.[ch]: (pcl_string_as_string)
        New function returns the character array without making a copy.

        * src/pcl-table.c:
        Use new PclHashable interface to simplify code.

        * src/pcl-tuple.[ch]:
        Remove pcl_tuple_hash() (use pcl_hashable_hash()).
        Remove pcl_tuple_length() (use pcl_measurable_length()).

        * src/pcl-tuple.c:
        Remove pcl_tuple_sequence_length() (use pcl_measurable_length()).

        * src/pcl-tuple.c: (tuple_sequence_concat)
        New function implements PclSequence's concat() method.

2005-07-11  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.12

        * New feature summary:
        Support dictionaries (one-to-one mapping objects).
        Support getting, setting, and deleting object attributes.
        Support single quoted string literals and escape sequences.
        Add preliminary support for importing modules.
        New PCL standard library modules: __builtin__, math, and sys

        * src/Makefile.am:
        Create sources: pcl-arg.[ch] pcl-import.[ch] pcl-state.[ch]
        Rename sources: pcl-builtin.c -> pcl-mod-builtin.c
        Create module sources: pcl-mod-math.c pcl-mod-sys.[ch]

        * src/pcl-arg.[ch]:
        New source files provide argument parsing support.

        * src/pcl-import.[ch]:
        New source files implement PCL's import mechanism.

        * src/pcl-mod-math.c:
        New source file implements the standard library module "math".

        * src/pcl-mod-sys.[ch]:
        New source files implement the standard library module "sys".

        * src/pcl-state.[ch]:
        New source files implement PCL's interpreter and thread states.

        * src/pcl.h:
        #include "pcl-arg.h"
        #include "pcl-import.h"
        #include "pcl-state.h"
        #include "pcl-mod-sys.h"

        * src/pcl.c: (pcl_initialize)
        Initialize PCL interpreter and thread states.
        Initialize modules __main__, __builtin__, and sys.

        * src/pcl.c: (pcl_finalize)
        Clean up PCL interpreter and thread states.

        * src/pcl-config.h:
        #include <stdarg.h>
        #include <gmodule.h>
        #define PCL_MAX_PATH_LEN

        * src/pcl-compile.c:
        * src/pcl-slice.c:
        * src/pcl-symtab.c:
        * src/pcl-table.c:
        Use new `pcl_int_as_long' function to extract integer values.

        * src/pcl-bool.c: (bool_number_as_int)
        * src/pcl-float.c: (float_number_as_int)
        * src/pcl-int.c: (int_number_as_int)
        Implements PclNumber's new `as_int' method.

        * src/pcl-bool.c: (bool_number_as_float)
        * src/pcl-float.c: (float_number_as_float)
        * src/pcl-int.c: (int_number_as_float)
        Implements PclNumber's new `as_float' method.

        * src/pcl-compile.c:
        Rename `compile_top_level_module' to `compile_top_level_program'.

        * src/pcl-compile.c: (compile_attr)
        New function to compile PCL_NT_ATTR nodes.

        * src/pcl-compile.c: (compile_dict)
        New function to compile PCL_NT_DICT nodes.

        * src/pcl-compile.c: (compile_import)
        New function to compile PCL_NT_IMPORT nodes.

        * src/pcl-compile.c: (compile_assign_target)
        Handle PCL_NT_ATTR nodes.

        * src/pcl_compile.c: (compile_list, compile_tuple)
        Fix a stack size tracking bug.

        * src/pcl-eval.[ch]: (pcl_eval_get_frame)
        New function returns the current frame.

        * src/pcl-eval.[ch]: (pcl_eval_get_globals)
        New function returns the current frame's `globals' dictionary.

        * src/pcl-eval.[ch]: (pcl_eval_get_locals)
        New function returns the current frame's `locals' dictionary.

        * src/pcl-eval.[ch]: (pcl_eval_call_object)
        New function provides a thin wrapper around `pcl_object_call'.

        * src/pcl-eval.[ch]: (pcl_eval_call_function)
        New function provides a fancier wrapper around `pcl_object_call'.

        * src/pcl-eval.c: (pcl_eval_frame)
        Record the given frame in the current PclThreadState upon entering
                the function, and restore the previous frame in PclThreadState
                just prior to exiting the function.
        Support PclMapping objects in `in' and `not in' comparisons.
        BUILD_LIST: Fix reference counting bug.
        Handle new opcodes (see src/pcl-opcode.h).

        * src/pcl-eval.c: (pcl_eval_code_ex)
        When creating a new PclFrame, set the `previous' property to the
                current PclThreadState's frame.

        * src/pcl-float.[ch]: (pcl_float_as_double)
        New function to extract a double from a numeric object.

        * src/pcl-frame.[ch]:
        Add `previous' field to PclFrame (PclFrame *).

        * src/pcl-frame.[ch]: (pcl_frame_fast_to_locals)
        New function to copy contents of `slots' into `locals' dictionary.

        * src/pcl-frame.c: (frame_constructor)
        Fix extraction of `builtins' dictionary from `globals'.

        * src/pcl-int.[ch]: (pcl_int_as_long)
        New function to extract a long from a numeric object.

        * src/pcl-lexer.l:
        New keywords: `as', `from', `import'
        Support single quoted string literals and escape sequences.

        * src/pcl-main.c:
        Remove `check_glib_version' function (merge into main).
        Initialize sys.argv from remaining_argv (sys.argv[0] is PCL script).
        Pass __main__.__dict__ as globals and locals to `pcl_eval_code'.

        * src/pcl-node.[ch]:
        Add node types: ATTR, DICT, IMPORT, PROGRAM

        * src/pcl-number.[ch]:
        Add `as_int' and `as_float' methods to PclNumber interface.

        * src/pcl-object.[ch]:
        Add `get_attr', `set_attr', and `get_dict' methods to
                PclObject interface.

        * src/pcl-object.c: (pcl_object_repr)
        Render NULL objects as "<NULL>" to aid in debugging.

        * src/pcl-opcode.h:
        New opcodes:
                PCL_OPCODE_LOAD_ATTR
                PCL_OPCODE_STORE_ATTR
                PCL_OPCODE_DELETE_ATTR
                PCL_OPCODE_BUILD_DICT
                PCL_OPCODE_IMPORT_NAME

        * src/pcl-parser.y:
        Define new keyword tokens: KW_AS, KW_FROM, KW_IMPORT
        Change root node in AST from PCL_NT_MODULE to PCL_NT_PROGRAM.
        Disallow empty suites and predicate disjunctions.
        New production: simple_statement := import_statement
        New production: predicate_term := import_statement
        New production: primary := attributeref
        New production: attributeref := primary '.' NAME
        New production: enclosure := dict_display
        Add productions for dictionary construction.
        Add productions for "import" statements.
        Allow a trailing comma in `global_statement'.

        * src/pcl-parser.y: (validate_target)
        PCL_NT_ATTR nodes are valid targets.

        * src/pcl-symtab.h:
        #define PCL_DEF_IMPORT

        * src/pcl-symtab.c: (symtab_assign)
        Add `flags' parameter (glong).
        Handle PCL_NT_ATTR nodes (ignore them!).

        * src/pcl-symtab.c: (symtab_import)
        New function to handle PCL_NT_IMPORT nodes.

        * src/pcl-tuple.[ch]: (pcl_tuple_pack)
        New function to pack a set of objects into a tuple.

2005-06-24  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Add preliminary support for modules and built-in methods.
        Support a module named "__builtin__" that's always present.
        Coding Policy: Use the most specific PCL object type as possible.

        * src/Makefile.am:
        Create sources: pcl-builtin.c pcl-method.[ch] pcl-module.[ch]
        Add -pedantic-errors to AM_CFLAGS.
        Remove -t option from AM_YFLAGS (redundant).

        * src/pcl-builtin.c:
        New source file implements the standard library module "__builtin__".

        * src/pcl-method.[ch]:
        New source files implement built-in method objects.

        * src/pcl-module.[ch]:
        New source files implement module objects.

        * src/pcl.h:
        #include "pcl-method.h"
        #include "pcl-module.h"

        * src/pcl-code.[ch]:
        * src/pcl-compile.[ch]:
        * src/pcl-dict.[ch]:
        * src/pcl-eval.[ch]:
        * src/pcl-frame.[ch]:
        * src/pcl-function.[ch]:
        * src/pcl-list.[ch]:
        * src/pcl-object.c:
        * src/pcl-singleton.c:
        * src/pcl-slice.c:
        * src/pcl-string.[ch]:
        * src/pcl-symtab.[ch]:
        * src/pcl-tuple.[ch]:
        * src/pcl-value.c:
        Adapt to new coding policy of using the most specific PCL object type
                possible in structs and function signatures.  This is closer
                to the style of GLib-based libraries like GTK+.

        * src/pcl-cell.c: (cell_cache_repr)
        * src/pcl-compile.c: (compile_add_argument)
        * src/pcl-node.c: (pcl_node_print)
        Fix some pedantic errors.

        * src/pcl-dict.c: (dict_repr)
        * src/pcl-list.c: (list_repr)
        * src/pcl-slice.c: (slice_repr)
        * src/pcl-tuple.c: (tuple_repr)
        Utilize new `pcl_string_concat_and_del' function to simplify logic.

        * src/pcl-eval.c: (pcl_eval_frame)
        LOAD_NAME: Search `locals', then `globals', then `builtins'.
        LOAD_GLOBAL: Search `globals', then `builtins'.

        * src/pcl-frame.[ch]:
        Add `builtins' property to PclFrame (PclDict object).

        * src/pcl-frame.c: (frame_constructor)
        Initialize a minimal default built-in dictionary if '__builtin__' is
                not present in the global dictionary.

        * src/pcl-lexer.l:
        Remove keywords `true' and `false' (now in __builtin__ module).

        * src/pcl-object.[ch]:
        Add `length' method to PclObject API.

        * src/pcl-object.[ch]: (pcl_object_hash_pointer)
        New function to generate a hash value from a pointer.

        * src/pcl-parser.y:
        Remove keyword tokens: KW_FALSE, KW_TRUE
        Remove `true_or_false' production.

        * src/pcl-string.[ch]: (pcl_string_concat_and_del)
        New function calls `pcl_string_concat' and decrements the reference
                count of the second string object.

2005-06-08  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-parser.y:
        Remove `opt_argument_list' production.
        Separate `call' into two productions:
                call := primary '(' argument_list opt_comma ')'
                call := primary '(' ')'
        Tweak the way PCL_FLAG_COMMA is assigned to nodes.

2005-06-07  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Move string literal concatenation into lexer.
        Support power operator (**) in numeric types.

        * src/pcl-eval.c: (pcl_eval_frame)
        Handle PCL_OPCODE_BINARY_POWER.

        * src/pcl-float.c: (float_number_power)
        * src/pcl-int.c: (int_number_power)
        Implements PclNumber's new `power' method.

        * src/pcl-lexer.l:
        New keywords: `is'...`not', `not'...`in'
        New operator: ** (power)
        Change prefix of functions from `pcl' to `lexer'.
        Modify string literal pattern to accept multiple string literals
                separated by whitespace.

        * src/pcl-lexer.l: (lexer_adjust_lineno)
        New function to increment `lineno' for every newline in a string.

        * src/pcl-lexer.l: (lexer_process_string)
        Concatenate adjacent string literals into a single literal.

        * src/pcl-number.[ch]:
        Add `power' method to PclNumber interface.

        * src/pcl-opcode.h:
        New opcode: PCL_OPCODE_BINARY_POWER

        * src/pcl-parser.y:
        Define new keyword tokens: KW_IS_NOT, KW_NOT_IN
        Define new operator token: OP_POWER
        Remove `concatenated_string' production.
        New production: atom := STRING (replaces concatenated_string).
        New production: comp_operator := KW_NOT_IN (replaces KW_NOT KW_IN)
        New production: comp_operator := KW_IS_NOT (replaces KW_IS KW_NOT)
        Rename and reorganize expressions to match Python grammar.

2005-06-06  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Released PCL 0.0.11

        * New feature summary:
        Support for statements in functions.

        * src/Makefile.am:
        Create sources: pcl-iterator.[ch]
        Remove sources: pcl-block.[ch]

        * src/pcl.h:
        #include "pcl-iterator.h"
        Remove inclusion of "pcl-block.h"

        * src/pcl-compile.c:
        Redefine PCL_{LOAD, STORE, DELETE} to ACTION_{LOAD, STORE, DELETE}.
        Rename `compile_inplace_oper' function to `compile_aug_assign'.

        * src/pcl-compile.c: (compile_slicing, compile_subscript)
        Pass an action rather than an opcode as the third argument.

        * src/pcl-compile.c: (compile_assign_target)
        New function centralizes handling of targets in an assignment.

        * src/pcl-compile.c: (compile_assign, compile_aug_assign, compile_del)
        Defer target handling logic to `compile_assign_target'.

        * src/pcl-compile.c: (compile_for)
        New function handles PCL_NT_FOR nodes.

        * src/pcl-compile.c: (compile_print)
        Don't print a newline if there's a trailing comma.

        * src/pcl-compile.c: (compile_tuple)
        New function handles PCL_NT_TUPLE nodes.

        * src/pcl-dict.c:
        * src/pcl-list.c:
        * src/pcl-string.c:
        * src/pcl-tuple.c:
        Implement the `PclIterable' interface.

        * src/pcl-eval.c: (eval_unpack_iterable)
        New function to unpack a sequence on the stack.

        * src/pcl-eval.c: (pcl_eval_frame)
        Handle new opcodes (see src/pcl-opcode.h).

        * src/pcl-iterator.[ch]:
        New source files implement sequence iterators.

        * src/pcl-lexer.l:
        New keyword: `for'

        * src/pcl-node.[ch]:
        Define PCL_FLAG_COMMA value for flagging trailing commas.
        Rename node type INPLACE_OPER to AUG_ASSIGN.
        Add node types: FOR, TUPLE

        * src/pcl-opcode.h:
        New opcodes:
                PCL_OPCODE_GET_ITER
                PCL_OPCODE_BUILD_TUPLE
                PCL_OPCODE_UNPACK_SEQUENCE
                PCL_OPCODE_FOR_ITER

        * src/pcl-parser.y:
        Define new keyword token: KW_FOR
        Require parentheses in "if" and "while" statements.
        New production: compound_statement := for_statement
        New production: enclosure := parenth_form
        New production: parenth_form := '(' expression_list opt_comma ')'
        Add productions for "for" statement with optional "else" clause.
        Allow a trailing comma in `subscription', `list_display',
                `delete_statement', and `print_statement'.
        Remove `postfix_expression' and `opt_expression_list' productions.
        Target is now a subset of primary that must be manually validated.

        * src/pcl-parser.y: (expression_or_tuple)
        New function to generate either a tuple or expression node based on
                characteristics of expression list and trailing comma.

        * src/pcl-parser.y: (validate_target)
        New function to determine if a primary is a valid target.

        * src/pcl-symtab.c: (symtab_assign)
        Recurse over children of PCL_NT_LIST and PCL_NT_TUPLE nodes.

        * src/pcl-tuple.c: (tuple_get_item)
        Fix bounds checking error.

2005-06-02  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-bool.c:
        * src/pcl-cell.c:
        * src/pcl-code.c:
        * src/pcl-compile.c:
        * src/pcl-dict.c:
        * src/pcl-eval.c:
        * src/pcl-float.c:
        * src/pcl-function.c:
        * src/pcl-int.c:
        * src/pcl-list.c:
        * src/pcl-node.c:
        * src/pcl-object.c:
        * src/pcl-singleton.c:
        * src/pcl-slice.c:
        * src/pcl-string.c:
        * src/pcl-symtab.c:
        * src/pcl-tuple.c:
        * src/pcl-value.c:
        Strip `pcl' prefix from internal functions and definitions.

        * src/pcl-compile.[ch]: (pcl_compile_load_symbols)
        Make this a static internal function.

2005-06-01  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support if, while, break, and continue statements in functions.

        * src/pcl-compile.h:
        Add `loop_count', `loop_begin_anchor', `block', and `block_count'
                fields to PclCompileState (all guint -- `block' is an array).

        * src/pcl-compile.c: (pcl_compile_block_push, pcl_compile_block_pop)
        New functions to track nesting level of blocks.

        * src/pcl-compile.c: (pcl_compile_node)
        Handle node types PCL_NT_{BREAK, CONTINUE, IF, WHILE}.

        * src/pcl-config.h:
        Define arbitrary limit for depth of nested blocks (yuck!).

        * src/pcl-eval.c: (pcl_eval_frame)
        Handle new opcodes (see src/pcl-opcode.h).
        Define instruction pointer macros PCL_IPADDR and PCL_JUMPTO.

        * src/pcl-frame.h:
        Define PclTryBlock structure for tracking nested blocks.
        Add `block' and `block_count' fields to PclFrame.

        * src/pcl-frame.[ch]:
        Add methods to PclFrame: block_setup, block_pop

        * src/pcl-lexer.l:
        New keywords: `break', `continue', `elif', `else', `if', `while'

        * src/pcl-node.[ch]:
        Add node types: BREAK, CONTINUE, IF, WHILE

        * src/pcl-opcode.h:
        Add comment for each opcode argument.
        New opcodes:
                PCL_OPCODE_BREAK_LOOP
                PCL_OPCODE_JUMP_ABSOLUTE
                PCL_OPCODE_POP_BLOCK
                PCL_OPCODE_SETUP_LOOP

        * src/pcl-parser.y:
        Define new keyword tokens:
                KW_BREAK, KW_CONTINUE, KW_ELIF, KW_ELSE, KW_IF, KW_WHILE
        New production: suite := simple_statement ';'
        New production: simple_statement := break_statement
        New production: simple_statement := continue_statement
        New production: compound_statement := if_statement
        New production: compound_statement := while_statement
        New production: break_statement := KW_BREAK
        New production: continue_statement := KW_CONTINUE
        Add productions for "if" statement with optional "elif/else" clauses.
        Add productions for "while" statement with optional "else" clause.

        * src/pcl-parser.y: (adopt_children)
        Return the parent node so the function can be used in expressions.

2005-05-31  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Distinguish between functions and predicates.
        Fix disjunction semantics (no rollbacks yet).

        * src/pcl-compile.c:
        Compile normal functions properly.
        Add preliminary support for predicate semantics.

        * src/pcl-compile.c: (pcl_compile_node)
        Handle PCL_NT_PASS nodes.
        Return a boolean value to indicate whether the node will produce a new
                value on the stack at runtime.

        * src/pcl-lexer.l:
        New keywords: `function', `predicate'
        Remove iterative assignment operator (=*).
        Remove `def' keyword.

        * src/pcl-node.[ch]:
        Add node types: CONJUNCTION, DISJUNCTION, SUITE
        Remove node types: BLOCK, ITERATE
        Add `flags' field to PclNode (gint).
        Define PCL_NODE_FLAGS macro for accessing `flags' field.
        Define PCL_FLAG_CUT value for flagging PCL cuts.

        * src/pcl-node.[ch]: (pcl_node_copy)
        New function to copy a PclNode (including the GValue).

        * src/pcl-node.c: (pcl_node_print)
        Print '[cut]' if the node's cut flag is set.

        * src/pcl-parser.y:
        Define new keyword tokens KW_FUNCTION, KW_PREDICATE.
        Remove keyword token KW_DEF.
        Remove operator token OP_ITR_ASSIGN.
        Overhaul the grammar to distinguish between functions and predicates.
        Rename `append_nodes_to_parent' function as `adopt_children'.
        Use g_list_prepend for constructing and adopting lists.  It's faster
                than g_list_append.

        * src/pcl-parser.y: (normalize_conjunction)
        New function for normalizing conjunction nodes.

        * src/pcl-symtab.c: (pcl_symtab_node)
        Handle PCL_NT_FUNCTION and PCL_NT_PREDICATE the same.

        * src/pcl-symtab.c: (pcl_symtab_entry_new)
        Give predicates the same symbol table semantics as functions.

2005-05-19  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Introduce PclTable objects.

        * src/Makefile.am:
        Create sources: pcl-table.[ch]
        Break header files into `include_HEADERS' rule so that "make install"
                copies them into ${prefix}/include.

        * src/pcl-table.[ch]:
        New source files implement table objects.

        * src/pcl.h:
        #include "pcl-table.h"

        * src/pcl.[ch]:
        Rename `pcl_init' as `pcl_initialize'.
        Add placeholder function `pcl_finalize' to manage libpcl cleanup.

        * src/pcl-compile.c: (pcl_compile_dict_keys_inorder)
        * src/pcl-dict.c: (_pcl_dict_items_helper)
        * src/pcl-eval.c: (pcl_call_function)
        * src/pcl-list.c: (pcl_list_as_tuple)
        * src/pcl-tuple.c: (pcl_tuple_sequence_set_item)
        Adjust for reference stealing behavior of `pcl_tuple_set_item'.

        * src/pcl-main.c: (main)
        Call `pcl_initialize' and `pcl_finalize'.

        * src/pcl-sequence.[ch]: (pcl_*_slice)
        * src/pcl-list.[ch]: (pcl_*_slice)
        Pass slice object as a PclObject instead of a PclSlice.

        * src/pcl-tuple.c: (pcl_tuple_compare)
        Implements PclObject's `compare' method.

        * src/pcl-tuple.c: (_pcl_tuple_set_item)
        Steal the reference to the item being assigned to the tuple.

2005-05-17  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Make better use of GObject properties.
        PclCell is now derived from PclValue.

        * src/pcl-bool.[ch]:
        * src/pcl-float.[ch]:
        * src/pcl-int.[ch]:
        Remove PCL_*_VALUE macro (use `value' property instead).
        Utilize PclValue's new `scratch' field for numeric operations.
        Remove "convert_to" function (use `g_value_transform' instead).

        * src/pcl-bool.c: (pcl_bool_number_nonzero)
        * src/pcl-float.c: (pcl_float_number_nonzero)
        * src/pcl-int.c: (pcl_int_number_nonzero)
        Implements PclNumber's new `nonzero' method.

        * src/pcl-cell.[ch]:
        Inherit from PclValue.
        Remove get/set methods (use `value' property instead).

        * src/pcl-code.c:
        Define GObject properties for each field in PclCode.
        Implement GObject's `set_property' and `get_property' methods.

        * src/pcl-code.c: (pcl_code_repr)
        Access string objects' value using their `value' property.

        * src/pcl-compile.c: (pcl_compile_add,
                              pcl_compile_lookup_index,
                              pcl_compile_dict_keys_inorder,
                              pcl_compile_freevar_offsets,
                              pcl_compile_load_symbols)
        * src/pcl-symtab.c:  (pcl_symtab_lookup,
                              pcl_symtab_add_def_ext,
                              pcl_symtab_undo_free,
                              pcl_symtab_check_global,
                              pcl_symtab_update_free_vars)
        Access integer objects' value using their `value' property.

        * src/pcl-compile.c: (pcl_compile_make_closure)
        Access code objects' free variables using their `free-variable-names'
                property.

        * src/pcl-compile.c: (pcl_compile_parse_tree)
        Initialize new code object by providing property values via
                `g_object_new', rather than assigning directly to its fields.

        * src/pcl-dict.c:
        * src/pcl-singleton.c:
        * src/pcl-tuple.c:
        Remove `is_true' method(s).

        * src/pcl-eval.c: (pcl_eval_frame, pcl_eval_code_ex)
        Use `g_object_get' to access fields in PclCode and PclFrame objects.

        * src/pcl-frame.[ch]:
        Remove pcl_frame_new function (use `g_object_new' instead).
        Define GObject properties for each field in PclFrame.
        Implement GObject's `set_property' and `get_property' methods.
        Implement GObject's `constructor' method to set up internals like
                pcl_frame_new had done in the past.

        * src/pcl-function.[ch]:
        Remove `is_true' method.
        Remove PCL_FUNCTION_NAME macro (use `name' property instead).
        Remove `set_closure' method (use `closure' property instead).
        Define GObject properties for each field in PclFunction.
        Implement GObject's `set_property' and `get_property' methods.

        * src/pcl-list.c:
        Remove `is_true' method.
        Don't access PclSlice fields directly (use properties instead).
        Fix a shadowed variable name bug.

        * src/pcl-number.[ch]:
        Add PclNumber method and corresponding wrapper function:
                `nonzero'       pcl_number_nonzero

        * src/pcl-object.[ch]:
        Remove `is_true' method.
        Make pcl_object_is_true a standalone helper function.
        Define PCL_CHECKED_UNREF macro (checks for NULL before unref).

        * src/pcl-slice.c:
        Define GObject properties for each field in PclSlice.
        Implement GObject's `set_property' and `get_property' methods.

        * src/pcl-string.[ch]:
        Remove PCL_STRING_VALUE macro (use `value' property instead).

        * src/pcl-value.[ch]:
        Add `scratch' field to PclValue (GValue *).

        * src/pcl-value.c: (pcl_value_set_property)
        Update the cached representation when the `value' property is set.

2005-05-06  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support list slices [start:stop:step].
        Support list concatenation using the '+' operator.
        Support object identity operators `is' and `is not'.
        Support negative list subscripts (selects from right).
        Support `del' statements.

        * src/Makefile.am:
        Create sources: pcl-slice.[ch]

        * src/pcl.h:
        #include "pcl-slice.h"

        * src/pcl-slice.[ch]:
        New source files implement slice objects.

        * src/pcl-compile.c: (pcl_compile_assign)
        Handle PCL_NT_SLICING nodes.
        Handle PCL_NT_NAME nodes in the case block (no need for a helper).

        * src/pcl-compile.c: (pcl_compile_del)
        New function to handle PCL_NT_DEL nodes.

        * src/pcl-compile.c: (pcl_compile_none)
        New function to handle PCL_NT_NONE nodes.

        * src/pcl-compile.c: (pcl_compile_slicing)
        New function to handle PCL_NT_SLICING nodes.

        * src/pcl-compile.c: (pcl_compile_subscript)
        Pass opcode via argument, rather than embedding in node.

        * src/pcl-dict.[ch]:
        * src/pcl-mapping.[ch]:
        Remove `del_item' and `del_item_string' methods.
        Deletion is now accomplished by passing NULL to `set_item'.

        * src/pcl-eval.c: (pcl_eval_frame)
        Handle new opcodes (see src/pcl-opcode.h).
        Concatenate sequences in PCL_OPCODE_BINARY_ADD handler.

        * src/pcl-lexer.l:
        New keywords: `del', `is'

        * src/pcl-list.[ch]:
        Remove `del_item' method.
        Deletion is now accomplished by passing NULL to `set_item'.
        Allow negative indicies in `get_item' and `set_item' methods.
        Support getting and setting via slice objects.

        * src/pcl-node.[ch]:
        Add PclNodeType enumeration values: PCL_NT_DEL, PCL_NT_NONE,
                                            PCL_NT_SLICING

        * src/pcl-object.c: (pcl_object_extract_index)
        Produce a glong instead of a guint, allowing for negative indicies.

        * src/pcl-object.c: (pcl_object_*_item)
        Handle slice objects when `object' is a sequence.

        * src/pcl-opcode.h:
        New opcodes:
                PCL_OPCODE_COMPARISON_IS
                PCL_OPCODE_COMPARISON_IS_NOT
                PCL_OPCODE_BUILD_SLICE

        * src/pcl-parser.y:
        Define new keyword tokens KW_DEL, KW_IS.
        Define new productions for slicing.
        New production: external_declaration := delete_statement ';'
        New production: predicate := delete_statement
        New production: comparison_operation := KW_IS | KW_IS KW_NOT
        New production: delete_statement := KW_DEL '(' target_list ')'
        Define `target_list' as list of comma-separated `target' productions.
        Add `slicing' production as a new kind of `primary' and `target'.
        
        * src/pcl-sequence.[ch]:
        Remove `del_item' method.
        Deletion is now accomplished by passing NULL to `set_item'.
        Support getting and setting via slice objects.

        * src/pcl-string.c: (pcl_string_intern_from_string)
        Fixed a memory leak.

        * src/pcl-symtab.c: (pcl_symtab_assign)
        Handle PCL_NT_SLICING nodes the same as PCL_NT_SUBSCRIPT nodes.

        * src/pcl-tuple.[ch]:
        Allow negative indicies in `get_item' and `set_item' methods.

2005-05-02  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Preliminary support for lists and subscripts.
        Support membership operators `in' and `not in'.
        Support `global' statements (like Python).

        * src/pcl-dict.c: (pcl_dict_copy)
        * src/pcl-list.c: (pcl_list_copy)
        * src/pcl-tuple.c: (pcl_tuple_copy)
        * src/pcl-value.c: (pcl_value_copy)
        Implements PclObject's new `copy' method.

        * src/pcl-code.c: (pcl_code_repr)
        Implements PclObject's `repr' method.

        * src/pcl-compile.c: (pcl_compile_get_ref_type)
        Fix mixed up conditions for returning explicit vs. implicit global.

        * src/pcl-compile.c: (pcl_compile_add_variable)
        Set scope to PCL_SCOPE_GLOBAL for implicit global reference types.

        * src/pcl-compile.c: (pcl_compile_assign)
        Handle PCL_NT_SUBSCRIPT nodes.
        Break processing of PCL_NT_NAME nodes into a helper function.

        * src/pcl-compile.c: (pcl_compile_global)
        Handle PCL_NT_GLOBAL nodes (but not really, see code).

        * src/pcl-compile.c: (pcl_compile_list)
        Handle PCL_NT_LIST nodes.

        * src/pcl-compile.c: (pcl_compile_subscript)
        Handle PCL_NT_SUBSCRIPT nodes.

        * src/pcl-dict.c: (pcl_dict_repr)
        Prevent infinite recursion when a dictionary refers to itself by
                displaying the circular reference as {...}.

        * src/pcl-eval.c: (pcl_eval_frame)
        Handle new opcodes (see src/pcl-opcode.h).
        Fix stack bug in PCL_OPCODE_LIST_APPEND handler.
        Fix stack bug in PCL_OPCODE_LOAD_SUBSCRIPT handler.

        * src/pcl-lexer.l:
        New keywords: `global', `in'

        * src/pcl-list.[ch]:
        Add `reverse' method to PclListClass.

        * src/pcl-list.c: (pcl_list_repr)
        Prevent infinite recursion when a list refers to itself by displaying
                the circular reference as [...].

        * src/pcl-node.[ch]:
        Add PclNodeType enumeration values: PCL_NT_GLOBAL, PCL_NT_SUBSCRIPT

        * src/pcl-object.[ch]:
        Add `marker' field to PclObject (gboolean), intended for marking
                visited objects in a recursive algorithm.
        Add `copy' method to PclObjectClass.  Produces a deep copy of mutable
                objects, and a new reference to immutable objects.

        * src/pcl-object.[ch]: (pcl_object_ellipsis)
        New function returns a static PclEllipsis object.

        * src/pcl-opcode.h:
        New opcodes:
                PCL_OPCODE_COMPARISON_IN
                PCL_OPCODE_COMPARISON_NOT_IN
                PCL_OPCODE_BUILD_LIST

        * src/pcl-parser.y:
        Define new keyword tokens KW_GLOBAL, KW_IN.
        New production: external_declaration := global_statement ';'
        New production: predicate := global_statement ';'
        New production: comparison_operation := KW_IN | KW_NOT KW_IN
        New production: subscription := primary '[' expression ']'
        New production: list_display := '[' opt_expression_list ']'
        New production: global_statement := KW_GLOBAL '(' identifier_list ')'
        New production: target := subscription
        Define `identifier_list' production as list of comma-separated NAMES.
        Add `subscription' production as a new kind of `primary'.
        Add `list_display' production as a new kind of `enclosure'.
        Remove `list' production (replaced by `list_display').

        * src/pcl-sequence.[ch]: (pcl_sequence_contains)
        New function implements membership test in a sequence.

        * src/pcl-singleton.[ch]:
        Implement built-in Ellipsis object (used for slices).

        * src/pcl-symtab.c: (pcl_symtab_lookup)
        Return the correct value if the name can't be found.

        * src/pcl-symtab.c: (pcl_symtab_assign)
        Handle PCL_NT_SUBSCRIPT nodes.

        * src/pcl-symtab.c: (pcl_symtab_global)
        New function to handle PCL_NT_GLOBAL nodes.

2005-04-22  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-cell.c: (pcl_cell_repr)
        Fix bug in generating a string representation of a cell object.

        * src/pcl-compile.[ch]: (pcl_compile_init)
        Remove this function from the public API and declare it static.

        * src/pcl-compile.c: (pcl_compile_top_level_module)
        Make modules act like blocks w.r.t. predicates.

        * src/pcl-compile.c: (pcl_compile_free)
        New function to free PclCompileState structures.

        * src/pcl-compile.c: (pcl_compile_parse_tree)
        Free the symbol table before exiting the function.

        * src/pcl-dict.c: (pcl_dict_finalize)
        Call the hash table's destructor instead of just freeing it.

        * src/pcl-dict.c: (_pcl_dict_items_helper)
        Fix a memory leak.

        * src/pcl-eval.c: (pcl_call_function, pcl_eval_frame)
        Fix some memory leaks.

        * src/pcl-frame.c: (pcl_frame_finalize)
        Implements GObject's `finalize' method.

        * src/pcl-function.c: (pcl_function_finalize, pcl_function_new)
        Use a weak reference to `globals' to avoid a circular reference.

        * src/pcl-function.[ch]: (pcl_function_set_closure)
        New function assigns the closure with proper reference counting.

        * src/pcl-lexer.l:
        * src/pcl-parser.y:
        Remove obsolete keywords for variable types.

        * src/pcl-object.c: (pcl_object_call)
        Do not increment the return value's reference count.

        * src/pcl-string.c: (pcl_string_intern_from_string)
        Fix a memory leak.

        * src/pcl-symtab.[ch]: (pcl_symtab_free)
        New function to free PclSymtab structures.

        * src/pcl-symtab.c: (pcl_symtab_entry_finalize, pcl_symtab_entry_new)
        Fix some memory leaks.

        * src/pcl-symtab.c: (pcl_symtab_enter_scope, pcl_symtab_exit_scope)
        Count references properly.

        * src/pcl-tuple.c: (pcl_tuple_finalize)
        Fix a memory leak.

2005-04-13  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support predicates and sibling cuts.

        * src/pcl-compile.c: (pcl_compile_inplace_oper)
        Give the predicate accumulator something to reduce.

        * src/pcl-compile.c: (pcl_compile_block)
        Jump to the end of the block if a child predicate has a sibling cut
                and evaluates successfully.

        * src/pcl-parser.y:
        Embed a boolean flag in PCL_NT_PREDICATE nodes to indicate the
                presence of a sibling cut.

2005-04-12  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-compile.[ch]:
        Add `in_function' field to PclCompileState (gboolean).

        * src/pcl-compile.c: (pcl_compile_assign)
        Give the predicate accumulator something to reduce.

        * src/pcl-compile.c: (pcl_compile_block)
        New function to handle PCL_NT_BLOCK nodes.
        Use an accumulator on the stack to track predicate results.

        * src/pcl-compile.c: (pcl_compile_function)
        Account for popping of free variables when making a closure.
        Give the block accumulator something to reduce.

        * src/pcl-compile.c: (pcl_compile_predicate)
        New function to handle PCL_NT_PREDICATE nodes.
        Use an accumulator on the stack to track statement results.

        * src/pcl-compile.c: (pcl_compile_return)
        Make sure we're in a function (cs->in_function == TRUE).
        Call the correct function for adding the RETURN_VALUE opcode.
        Return or pop the block and predicate accumulators appropriately.

        * src/pcl-compile.c: (pcl_compile_top_level_node)
        Break the case logic into separate functions:
                pcl_compile_top_level_module
                pcl_compile_top_level_function

        * src/pcl-compile.c: (pcl_compile_top_level_function)
        Set the cs->in_function flag before compiling a PCL_NT_FUNCTION node,
                and then clear the flag upon completion.

        * src/pcl-eval.c: (pcl_eval_frame)
        Handle new opcodes PCL_OPCODE_CONJUNCT and PCL_OPCODE_DISJUNCT.

        * src/pcl-number.c:
        The `number' interface should never return NotImplemented.
        Coerce the arguments in binary bitwise operations.

        * src/pcl-opcode.h:
        New opcodes: PCL_OPCODE_CONJUNCT, PCL_OPCODE_DISJUNCT

        * src/pcl-parser.y:
        Rename `jump_statement' predicate to `return_statement'.
        Add predicate: return_statement := KW_RETURN

2005-04-11  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        New command-line option: --parse / -p

        * src/pcl-eval.[ch]:
        Simplify parameter list for `pcl_eval_code' and define new function
                `pcl_eval_code_ex' with more complex parameters.

        * src/pcl-function.c: (pcl_function_call)
        Call `pcl_eval_code_ex' instead of `pcl_eval_code'.

        * src/pcl-lexer.l: (pcl_process_string)
        Do not strip leading and trailing whitespace in a quoted string.

        * src/pcl-main.c:
        Add --parse command-line option, which just parses input and stops.

2005-04-08  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support return statements.
        String concatenation: string + string

        * src/pcl-compile.c: (pcl_compile_return)
        New function compiles return statements.

        * src/pcl-compile.c: (pcl_compile_top_level_node)
        Add an implicit "return None" at the end of modules and functions.

        * src/pcl-eval.c: (pcl_call_function)
        Clean up the stack after a function call.

        * src/pcl-eval.c: (pcl_eval_frame)
        Support concatenation of strings using the '+' operator.
        Handle new opcode PCL_OPCODE_RETURN_VALUE.
        Encountering a PCL_OPCODE_STOP is now a fatal error.

        * src/pcl-lexer.l:
        Drop support for native names.

        * src/pcl-object.c: (pcl_object_hash)
        If a hash method is not defined, try hashing the raw object pointer.

        * src/pcl-opcode.h:
        New opcode: PCL_OPCODE_RETURN_VALUE

        * src/pcl-parser.y:
        Drop support for native names.
        Reorganize the `primary_expression' production into `primary', `atom',
                and `enclosure' productions (similar to Python).
        Rename `call_statement' production to just `call'.
        Add production: primary := call
        Remove productions: external_declaration := call, production := call

2005-04-07  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support closures.

        * src/Makefile.am:
        Create sources: pcl-cell.[ch]

        * src/pcl.h:
        #include "pcl-cell.h"

        * src/pcl-cell.[ch]:
        New source files implement cell variables.

        * src/pcl-code.c: (pcl_code_compare)
        Implements PclObject's `compare' method.

        * src/pcl-compile.c: (pcl_compile_add_variable)
        Utilize new opcodes (see src/pcl-opcode.h).
        No special treatment for implicit globals.

        * src/pcl-compile.c: (pcl_compile_make_closure)
        Fix errors in flow control logic.

        * src/pcl-compile.c: (pcl_compile_cellvar_offsets)
        Call pcl_dict_keys on the right dictionary.

        * src/pcl-compile.c: (pcl_compile_load_symbols)
        Only set cs->variable_count if we're in a function.

        * src/pcl-eval.[ch]: (pcl_eval_code)
        Add a parameter for closures.
        Handle arguments, free variables, and cell variables correctly.

        * src/pcl-eval.c: (pcl_eval_frame)
        New variable `free_slots' points to slots for cell and free variables.
        Handle new opcodes (see src/pcl-opcode.h).
        Support opcodes PCL_OPCODE_{LOAD, STORE}_DEREF and
                PCL_OPCODE_{LOAD, MAKE}_CLOSURE.

        * src/pcl-frame.h:
        Add `slots' field to PclFrame (PclObject **).
        Add `cell_count' and `free_count' fields to PclFrame (both guint).

        * src/pcl-frame.c: (pcl_frame_new)
        Initialize the new PclFrame fields and create cell variables for the
                appropriate slots.

        * src/pcl-function.h:
        Add `closure' field to PclFunction (PclObject *).

        * src/pcl-function.c: (pcl_function_call)
        Pass the function's closure when calling pcl_eval_code.

        * src/pcl-list.c:
        Remove function `pcl_list_print' (fall through to pcl_list_repr).

        * src/pcl-list.c: (pcl_list_repr)
        Implements PclObject's `repr' method (for real).

        * src/pcl-opcode.h:
        New opcodes: PCL_OPCODE_{LOAD, STORE, DELETE}_FAST

        * src/pcl-string.c: (pcl_string_cache_repr)
        Add quotes to cached string representation.

        * src/pcl-string.c: (pcl_string_print)
        New function prints the string without quotes.

        * src/pcl-symtab.c: (pcl_symtab_entry_new)
        Correct the boolean expression that sets ste->nested.

        * src/pcl-symtab.c: (pcl_symtab_check_global)
        Fix errors in flow control logic.

        * src/pcl-symtab.c: (pcl_symtab_update_free_vars)
        Fix errors in flow control logic.

        * src/pcl-tuple.c:
        Remove function `pcl_tuple_print' (fall through to pcl_tuple_repr).

        * src/pcl-tuple.c: (pcl_tuple_repr)
        Implements PclObject's `repr' method (for real).

        * src/pcl-value.c:
        Remove function `pcl_value_print' (fall through to pcl_value_repr).

2005-04-05  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Support functions with fixed number of arguments.
        Support nested functions.

        * src/pcl-code.[ch]:
        Add `freevars' and `cellvars' fields to PclCode (both PclObject *).

        * src/pcl-compile.[ch]:
        Add `globals', `freevars', `cellvars', and `nested' fields to
                PclCompileState.
        Add preliminary support for cell and free variables.
        Add preliminary support for nested function calls.

        * src/pcl-dict.[ch]:
        Fully implement the PclMapping API.

        * src/pcl-dict.[ch]: (pcl_dict_repr)
        Implements PclObject's `repr' method.

        * src/pcl-eval.c:
        Add preliminary support for nested function calls.
        Handle new opcodes (see src/pcl-opcode.h).

        * src/pcl-frame.c: (pcl_frame_new)
        If locals is NULL, then locals and globals are the same.

        * src/pcl-function.c: (pcl_function_call)
        Create a locals object before dispatching the function.

        * src/pcl-list.[ch]:
        Fully implement the PclSequence API.

        * src/pcl-mapping.[ch]:
        Add methods to PclMapping:
                keys, values, items
                has_key_string
                del_item_string
                get_item_string
                set_item_string

        * src/pcl-mapping.c: (pcl_mapping_get_item*)
        INCREF the resulting object so implementations don't have to.

        * src/pcl-opcode.h:
        New opcodes: PCL_OPCODE_DELETE_NAME
                     PCL_OPCODE_{LOAD, STORE, DELETE}_GLOBAL
                     PCL_OPCODE_{LOAD, STORE}_DEREF
                     PCL_OPCODE_{LOAD, MAKE}_CLOSURE

        * src/pcl-parser.y:
        New production: statement := function_definition

        * src/pcl-sequence.c: (pcl_sequence_get_item)
        INCREF the resulting object so implementations don't have to.

        * src/pcl-string.[ch]: (pcl_string_concat)
        Concatenates two string objects.

        * src/pcl-symtab.[ch]:
        Add `pass' field to PclSymtab (gint).
        Add `nested' field to PclSymtabEntry (gboolean).
        Add preliminary support for cell and free variables.

        * src/pcl-tuple.[ch]:
        Fully implement the PclSequence API.

2005-03-31  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Introduce PclMapping interface.
        Allow PclValue subclasses to cache their string representation.

        * src/Makefile.am:
        Create sources: pcl-mapping.[ch]

        * src/pcl.h:
        #include "pcl-mapping.h"

        * src/pcl-mapping.[ch]:
        New source files implement mapping interface.

        * src/pcl-block.c:
        * src/pcl-bool.[ch]:
        * src/pcl-code.c:
        * src/pcl-compile.c:
        * src/pcl-dict.[ch]:
        * src/pcl-eval.c:
        * src/pcl-float.[ch]:
        * src/pcl-frame.c:
        * src/pcl-function.c:
        * src/pcl-int.[ch]:
        * src/pcl-object.[ch]:
        * src/pcl-singleton.c:
        * src/pcl-string.[ch]:
        * src/pcl-symtab.c:
        * src/pcl-value.c:
        Code cleanup, use consistent naming convention.
        Prefer pcl_mapping_*_item or pcl_sequence_*_item to pcl_object_*_item.

        * src/pcl-value.[ch]:
        Add `repr' field to PclValue (gchar *).
        Add `cache_repr' method to PclValueClass (protected, pure virtual).

        * src/pcl-value.c: (pcl_value_print, pcl_value_repr)
        Implements PclObject's `print' and `repr' methods.
        Subclasses of PclValue no longer have to define these methods.

        * src/pcl-bool.c: (pcl_bool_cache_repr)
        * src/pcl-float.c: (pcl_float_cache_repr)
        * src/pcl-int.c: (pcl_int_cache_repr)
        * src/pcl-string.c: (pcl_string_cache_repr)
        Implements PclValue's `cache_repr' method.

        * src/pcl-object.c: (pcl_object_extract_index)
        New function, stolen from pcl_list_extract_index.

        * src/pcl-object.c: (pcl_object_*_item)
        Defer to PclMapping or PclSequence interface, if possible.

        * src/pcl-dict.[ch]:
        Implement PclMapping interface.
        Remove function pcl_dict_get_item_string (now part of PclMapping).

        * src/pcl-sequence.[ch]:
        Add `del_item', `get_item', and `set_item' methods to PclSequence.

        * src/pcl-list.c: (pcl_list_sequence_*_item)
        Implements PclSequence's `*_item' methods.
        Replaces previous pcl_list_*_item functions.

        * src/pcl-tuple.c: (pcl_tuple_sequence_*_item)
        Implements PclSequence's `*_item' methods.
        Replaces previous pcl_tuple_*_item functions.

2005-03-30  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * New feature summary:
        Introduce PclTuple objects.
        Support functions with a fixed number of arguments.

        * src/Makefile.am:
        Create sources: pcl-tuple.[ch]

        * src/pcl.h:
        #include "pcl-tuple.h"

        * src/pcl-code.h:
        Remove `const_dict' and `name_dict' fields from PclCode.
        Add `varnames' and `name' fields to PclCode (both PclObject *).
 
        * src/pcl-code.c: (pcl_code_hash)
        Implements PclObject's `hash' method (hash each field and OR them).

        * src/pcl-compile.h:
        Add `varnames', `name', and `argument_count' fields to
                PclCompileState.

        * src/pcl-compile.c:
        Use PclOpcode and PclOparg types instead of guint8 and guint16.

        * src/pcl-compile.c: (pcl_compile_node)
        Handle node types PCL_NT_{BLOCK, CALL, FUNCTION, PREDICATE}.

        * src/pcl-compile.c: (pcl_compile_top_level_node)
        New function processes the top-level node in a scope.

        * src/pcl-compile.c: (pcl_compile_load_symbols)
        Fix and comment symbol loading logic.
        Assert post-condition:
                len(cs->varnames) == cs->argument_count + cs->variable_count

        * src/pcl-compile.[ch]: (pcl_compile_parse_tree)
        New argument: PclCompileState *base
        Inherit base's symbol table if base is non-null, otherwise build a
                new symbol table and reset it for the code-generation pass.
        Call pcl_compile_top_level_node instead of pcl_compile_node.
        Convert `constant', `names', and `varnames' lists to tuples when
                populating new tuple object.

        * src/pcl-dict.c: (pcl_dict_init)
        Set the hash table's key_equal_func to pcl_object_equal.

        * src/pcl-eval.[ch]: (pcl_eval_code)
        New argument: PclObject *args
        Process any args by pairing them against the code object's list of
                variable names and add them to the frame's `locals' table.

        * src/pcl-eval.c: (pcl_eval_frame)
        Handle opcodes PCL_OPCODE_{MAKE_FUNCTION, CALL_FUNCTION}.

        * src/pcl-frame.c: (pcl_frame_new)
        For now, ignore the `locals' argument and always assign a new PclDict
                object to frame->locals.

        * src/pcl-function.h:
        Fix standard GObject macros for PclFunction.
        Add `code' and `globals' fields to PclFunction (both PclObject *).

        * src/pcl-function.[ch]: (pcl_function_new)
        New function returns a new PclFunction object.

        * src/pcl-function.c: (pcl_function_call)
        Implements PclObject's `call' method (calls pcl_eval_code).

        * src/pcl-lexer.l:
        New keyword: `def'

        * src/pcl-list.[ch]: (pcl_list_as_tuple)
        New function returns list contents as a PclTuple object.

        * src/pcl-node.h:
        Declare `opcode' in PclNode as PclOpcode instead of guint8.

        * src/pcl-object.[ch]:
        Add `pcl_object_call' to PclObject API.
        New function `pcl_object_equal' (compatible with GEqualFunc).

        * src/pcl-opcode.h:
        Define types PclOpcode and PclOparg.
        New opcodes: PCL_OPCODE_{MAKE_FUNCTION, CALL_FUNCTION}

        * src/pcl-parser.y:
        Define new keyword token KW_DEF.
        Declare `oper' in %union as PclOpcode instead of guint8.
        Change production type of `opt_argument_list' to <list>.
        New production: external_declaration := call_statement ';'
        Add KW_DEF to beginning of `function_definition' production.
        Restructure PCL_NT_CALL nodes as <name> { <argument> }.

        * src/pcl-tuple.[ch]:
        New source files implement immutable tuple objects.

        * src/pcl-symtab.c: (pcl_symtab_add_def)
        Generate `key' using pcl_string_intern_from_string.
        Remember to DECREF `object' if found in symbol table.
        Append `key' to variable name list if it's a parameter.

2005-03-25  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-object.[ch]: (pcl_object_from_value)
        New function creates appropriate PCL object from GValue.

        * src/pcl-compile.c: (pcl_compile_const)
        Use pcl_object_from_value to create PclObject.

2005-03-23  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/Makefile.am:
        Create sources: pcl.c pcl-block.[ch] pcl-code.[ch] pcl-compile.[ch]
                        pcl-config.h pcl-eval.[ch] pcl-frame.[ch] pcl-opcode.h
                        pcl-singleton.[ch]
        Remove sources: pcl-bitwise.[ch]
        Rename sources: pcl-ir.* -> pcl-node.*
                        pcl-numeric.* -> pcl-number.*
                        pcl-parse.y -> pcl-parser.y
        Introduce libtool directives to build libpcl.la.
        The PCL command-line tool (pcl-main.c) is now linked against libpcl.

        * src/pcl-code.[ch]:
        * src/pcl-compile.[ch]:
        * src/pcl-eval.[ch]:
        * src/pcl-frame.[ch]:
        * src/pcl-opcode.h:
        New source files implement PCL's compiler and evaluation mechanisms
                and associated internal objects.

        * src/pcl.c:
        New source file implements pcl_init.

        * src/pcl.h:
        Make entire PCL library API available, including pcl_init.

        * src/pcl-block.h:
        PclBlock's should inherit from PclObject, not GObject.

        * src/pcl-bool.[ch]: (pcl_bool_true, pcl_bool_false)
        New functions return a static PclBool object (pcl_true or pcl_false).

        * src/pcl-bool.c:
        Define constant strings for use in pcl_bool_print and pcl_bool_repr.

        * src/pcl-bool.c: (pcl_bool_from_boolean)
        Just call pcl_bool_true or pcl_bool_false and "incref" the result.

        * src/pcl-bool.c: (pcl_bool_number_coerce)
        Implements PclNumber's `coerce' method.  If we're coercing two
                booleans, convert them both to integers.  Otherwise return
                FALSE.  (Slick hack so that we don't have to implement the
                full number interface for stupid things like "true + true".)

        * src/pcl-config.h:
        New source file fulfills previous role of pcl.h.

        * src/pcl-error.[ch]:
        Add PclRuntimeError enum defining PCL_RUNTIME_ERROR_TYPE.
        Add function pcl_runtime_error_quark (self-explanatory).

        * src/pcl-float.c: (pcl_float_hash)
        Implements PclObject's `hash' method (very lame hash for now).

        * src/pcl-float.c: (pcl_float_is_true)
        Implements PclObject's `is_true' method (true if non-zero).

        * src/pcl-function.c: (pcl_function_is_true)
        Implements PclObject's `is_true' method (always returns true).

        * src/pcl-int.c: (pcl_int_is_true)
        Implements PclObject's `is_true' method (true if non-zero).

        * src/pcl-lexer.l:
        Rename OP_xxx_ASSIGN tokens to OP_INPLACE_xxx.
        New operators: << (left shift) and >> (right shift)
        Disallow C/C++ style comments.  Only shell-style (#) is accepted.

        * src/pcl-lexer.l: (pcl_process_string)
        Strip quotation marks and replace escaped characters (e.g. '\n')
                with appropriate ASCII code (via g_strcompress).

        * src/pcl-list.c: (pcl_list_is_true)
        Implements PclObject's `is_true' method (true if non-empty).

        * src/pcl-list.c: (pcl_list_del_item)
        Implements PclObject's `del_item' method.  Key is integer index.

        * src/pcl-list.c: (pcl_list_get_item)
        Implements PclObject's `get_item' method.  Key is integer index.

        * src/pcl-list.c: (pcl_list_set_item)
        Implements PclObject's `set_item' method.  Key is integer index.

        * src/pcl-main.c:
        This is now a stand-alone program that links with libpcl.
        Remove the test suite option as the interpreter is now capable of
                executing a test suite written in PCL.

        * src/pcl-main.c: (main)
        Call pcl_init before parsing command-line options.
        Basic framework for parsing, compiling, and evaluating PCL code.

        * src/pcl-node.h:
        Remove (PclNodeType) PCL_NT_OP_* enumeration values.
        Add PclNodeType enumeration values:
                PCL_NT_COMPARISON
                PCL_NT_UNARY_OPER
                PCL_NT_BINARY_OPER
                PCL_NT_INPLACE_OPER
        Add `opcode' field to PclNode (default to PCL_OPCODE_NONE).
        Define macros for each field in PclNode:
                PCL_NODE_TYPE(n)
                PCL_NODE_VALUE(n)
                PCL_NODE_OPCODE(n)
                PCL_NODE_LINENO(n)

        * src/pcl-node.c: (pcl_node_print)
        Print the opcode in hex unless it's PCL_OPCODE_NONE.

        * src/pcl-number.[ch]:
        Rename the interface from "numeric" to "number".
        Add PclNumber methods and corresponding wrapper functions:
                `bitwise_or'            pcl_number_bitwise_or
                `bitwise_xor'           pcl_number_bitwise_xor
                `bitwise_and'           pcl_number_bitwise_and
                `bitwise_lshift'        pcl_number_bitwise_lshift
                `bitwise_rshift'        pcl_number_bitwise_rshift
                `bitwise_invert'        pcl_number_bitwise_invert
                `coerce'                pcl_number_coerce

        * src/pcl-object.[ch]:
        Make PclObject an abstract class.
        Remove PclObject's `coerce' method (now part of PclNumber).
        Add PclObject methods and corresponding wrapper functions:
                `is_true'       pcl_object_is_true
                `del_item'      pcl_object_del_item
                `get_item'      pcl_object_get_item
                `set_item'      pcl_object_set_item

        * src/pcl-object.[ch]: (pcl_object_none)
        New function returns a static PclNone object.

        * src/pcl-object.[ch]:  (pcl_object_not_implemented)
        New function returns a static PclNotImplemented object.

        * src/pcl-parser.y:
        Rename OP_xxx_ASSIGN tokens to OP_INPLACE_xxx.
        New tokens: OP_LSHIFT and OP_RSHIFT
        Add `oper' field to %union for productions that return opcodes.
        Merge equality_expression and relational_expression productions into
                <node> comparison_expression and <oper> comparison_operator.
        Add productions:
                <list> target_assignment_list
                <node> augmented_assignment_statement
                <oper> augmented_assignment_operator
        Utilize macros PCL_NODE_{TYPE, VALUE, OPCODE, LINENO}.
        Optimization: String together consecutive nodes of the same type for
                the following node types:
                        PCL_NT_TEST_OR
                        PCL_NT_TEST_AND
                        PCL_NT_TEST_BINARY_OPER
                        PCL_NT_COMPARISON
        Optimization: Reduce two consecutive PCL_NT_TEST_NOT nodes to the
                original child expression.

        * src/pcl-sequence.[ch]:
        pcl_sequence_* functions should take `PclObject*' as first argument.

        * src/pcl-singleton.[ch]:
        New source files implement built-in objects None and NotImplemented.

        * src/pcl-string.c: (pcl_string_is_true)
        Return true if the character string length is greater than zero.
        Implements PclObject's `is_true' method.

        * src/pcl-string.[ch]: (pcl_string_intern_from_string)
        New function to generate string objects from an internal cache.

        * src/pcl-symtab.[ch]:
        Rename `symbols' field to `entries' in struct _PclSymtab.
        Add `lineno' field to PclSymtabEntry objects.
        Define symbol table entry flags PCL_SYMTAB_{DEF_LOCAL, DEF_PARAM, USE}.
        Prefer pcl_object_*_item to pcl_dict_*_item.
        Utilize macros PCL_NODE_{TYPE, VALUE, OPCODE, LINENO}.

2005-03-04  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/Makefile.am:
        New sources: pcl-bitwise.[ch] pcl-bool.[ch] pcl-dict.[ch]
                     pcl-float.[ch] pcl-function.[ch] pcl-int.[ch]
                     pcl-list.[ch] pcl-numeric.[ch] pcl-object.[ch]
                     pcl-sequence.[ch] pcl-string.[ch] pcl-symtab.[ch]
        Remove sources: pcl-context.[ch] pcl-ir-tree.[ch]
        Change DISTCLEANFILES rule to CLEANFILES and add pcl-parse.c,
                pcl-parse.h, and pcl-lexer.c to the list.

        * src/pcl-bitwise.[ch]:
        * src/pcl-block.[ch]:
        * src/pcl-bool.[ch]:
        * src/pcl-dict.[ch]:
        * src/pcl-float.[ch]:
        * src/pcl-function.[ch]:
        * src/pcl-int.[ch]:
        * src/pcl-list.[ch]:
        * src/pcl-numeric.[ch]:
        * src/pcl-object.[ch]:
        * src/pcl-sequence.[ch]:
        * src/pcl-string.[ch]:
        * src/pcl-symtab.[ch]:
        * src/pcl-value.[ch]:
        New source files to define PCL's built-in types and interfaces.

        * src/pcl.h:
        Remove pcl_mem_chunk_create macro.

        * src/pcl-ir.[ch]:
        Redo the internal representation again:
                Define new PclNodeType enumeration.
                Define new PclNode struct, using PclNodeType to classify it.
                Rename pcl_ir_code_names to pcl_nt_names and update string
                        list to correspond with PclNodeType.
                Rename pcl_ir_code_name to pcl_node_type_name.
                New functions: pcl_node_new pcl_node_destroy pcl_node_print
                Trash everything else.

        * src/pcl-lexer.l:
        Get rid of all references to PclContext.
        Rename pcl_parse_integer_constant to pcl_process_integer.
        Rename pcl_parse_real_constant to pcl_process_float.
        Rename pcl_parse_string_literal to pcl_process_string.
        Rename pcl_parse_identifier to pcl_process_name.
        Rename pcl_parse_native_identifier to pcl_process_native_name.
        Rewrite all those functions to use new internal representation.
        Add keyword `print', delete keyword `main'.
        Add support for shell-style comments (# comment).

        * src/pcl-main.c:
        Add --test command-line option, which runs a test suite and exits.
        Add run_tests function to implement PCL test suite.
        Parse tree dumps are now generated with the --debug option, which also
                dumps a massive parse trace to stderr (via yydebug).  The parse
                tree gets tacked on to the end of the parse trace.

        * src/pcl-main.c: (main)
        Generate a symbol table by passing the parse tree to pcl_symtab_build.

        * src/pcl-parse.y:
        Define new keyword token KW_PRINT for PCL's built-in print function.
        Rename terminal tokens:
                CONSTANT -> NUMBER
                IDENTIFIER -> NAME
                NATIVE_IDENTIFIER -> NATIVE_NAME
                STRING_LITERAL -> STRING
        Delete terminal token TYPE_NAME.
        Trying to make PCL a dynamically-typed language (like Python):
                Get rid of the anonymous type definitions.
                Remove all declaration and variable type productions.
        Generate a parse tree using new internal representation.
        Delete functions new_ir_cut, pcl_enum_create_type, and
                pcl_get_boolean_constant.
        New function, `dump_parse_tree' replaces old pcl-ir-tree module.
                Convertible to GNodeTraverseFunc.
                Called from parse_input_file if debug flag is set.

2005-02-14  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-parse.y:
        Define new token STRING_LITERAL of type 'node'.
        Define new rule 'concatenated_string_literal' which concatenates
                adjacent STRING_LITERAL tokens.

        * src/pcl-lexer.l:
        Rename pcl_parse_string_constant to pcl_parse_string_literal.

        * src/pcl-lexer.l: (pcl_parse_string_literal)
        Return STRING_LITERAL token.

2005-02-08  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl-context.[ch]:
        * src/pcl-error.h:
        * src/pcl-lexer.l:
        Change typename prefix from 'PCL' to 'Pcl'.

        * src/pcl-parse.y:
        Change typename prefix from 'PCL' to 'Pcl'.
        Comment out uses of "pcl-value.h" definitions.

2005-01-31  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/Makefile.am:
        Change AM_YFLAGS to `-d -t -v' (automake gets confused with -dtv).
        Change BUILT_SOURCES to just `pcl-parse.h' per automake manual.
        Change DISTCLEANFILES to `pcl-parse.output'.
        New sources: pcl-context.[ch] pcl-error.[ch] pcl-value.[ch]

        * src/pcl-main.c: (main):
        Initialize the GLib type system.
        Enforce single input file policy.

        * src/pcl.h:
        #include <errno.h> and <glib-object.h>.
        Globalize the lexer's `lineno' variable.
        Define a pcl_mem_chunk_create macro with reasonable defaults.

        * src/pcl-lexer.l:
        New keywords: `and', `not', `or' (to replace &&, !, ||).
        New assignment operators: *=, /=, %=, +=, -=
        New comparison operators: <> (equivalent to !=)
        Keywords should always return keyword tokens (KW_*).

        * src/pcl-lexer.l: (pcl_parse_integer_constant)
        New function replaces parse_constant (in-part).
        Throw out of range error if (n > G_MAXLONG).
        Pack integer into a GValue of type G_TYPE_LONG.
        Pack the GValue into a "constant" IR node.

        * src/pcl-lexer.l: (pcl_parse_real_constant)
        New function replaces parse_constant (in-part).
        Throw out of range error if errno is non-zero after conversion.
        Pack real into a GValue of type G_TYPE_DOUBLE.
        Pack the GValue into a "constant" IR node.

        * src/pcl-lexer.l: (pcl_parse_string_constant)
        New function replaces parse_constant (in-part).
        Pack string into a GValue to type G_TYPE_STRING.
        Pack the GValue into a "constant" IR node.

        * src/pcl-lexer.l: (pcl_parse_identifier)
        Do a context stack lookup before creating a new "identifier" IR node.
        Existing identifiers that are marked as types return TYPE_NAME.

        * src/pcl-lexer.l: (yyerror)
        Utilize the new error reporting system (see pcl-error.*).

        * src/pcl-parse.y:
        Overhauled grammar, added context support (see pcl-context.*).
        New grammar based on ANSI C, with extensions where appropriate.

        * src/pcl-ir.h:
        Change #define sets to enumerations.
        Define a new IR structure based on GCC's implementation.
        Store constant values as a GValue object of the appropriate type.
        Delete all of the pack/unpack functions.

        * src/pcl-ir.c: (pcl_ir_node_new)
        New function returns a newly allocated IR node.

        * src/pcl-ir.c: (pcl_ir_node_destroy)
        New function frees an IR node.

        * src/pcl-ir.c: (pcl_ir_constant_new)
        New function returns a newly allocated IR "constant" node.
        Utilize pcl_ir_node_new().

        * src/pcl-ir.c: (pcl_ir_constant_destroy)
        New function frees an IR "constant" node.
        Utilize pcl_ir_node_destroy().

        * src/pcl-ir-tree.[ch]:
        Rename dump_syntax_tree to dump_parse_tree.
        Rename traverse_syntax_tree to traverse_parse_tree.
        Adapt to ever-changing IR structure as best we can for now.

        * src/pcl-context.[ch]:
        New source files to define a context stack and manage scoping issues.

        * src/pcl-error.[ch]:
        New source files to provide error reporting based on GError.

        * src/pcl-value.[ch]:
        New source files to provide GValue utilities.

2004-12-22  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * src/pcl.h:
        Add parse_input_file declaration.

        * src/pcl-ir.[ch]: (pack_ir_identifier):
        Store line number in IR_CODE_IDENTIFIER nodes.

        * src/pcl-lexer.l:
        Clean up lexer rules.
        Add parse_native_identifier, returns NATIVE_IDENTIFIER token.

        * src/pcl-main.c:
        Add --debug command-line option (sets yydebug).
        Delete open_input_file (use parse_input_file instead).

        * src/pcl-main.c: (main):
        Only call dump_syntax_tree if the parse was successful.

        * src/pcl-parse.y:
        Define YYDEBUG and YYERROR_VERBOSE.
        Clean up grammar rules.
        Add parse_input_file.

2004-12-17  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Require GLib 2.6.x

        * src/pcl-main.c:
        Command-line option support using GOption.

2004-12-17  Matthew F. Barnes  <matthew.f.barnes@boeing.com>

        * Initial development check-in.
